Table descriptions

cc_account = 
       Represents the customer account associated with a claim policy. Used for special account handling.
    

cc_account.ID = Internally managed primary key
cc_account.AccountHolder = 
cc_account.AccountNumber = The account number
cc_account.CreateTime = Timestamp when the object was created
cc_account.CreateUser = User who created the object
cc_account.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_account.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_account.UpdateTime = Timestamp when the object was last updated
cc_account.UpdateUser = User who last updated the object

cc_activescheduledjob = Running request to start a batch process by the scheduler

cc_activescheduledjob.ID = Internally managed primary key
cc_activescheduledjob.JobStarted = The timestamp in UTC when the job was started
cc_activescheduledjob.ProcessType = The batch process
cc_activescheduledjob.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_activescheduledjob.ServerId = The server ID

cc_activity = <p>Assigns work, reminds a user to complete a task, or provides notification of an event.
      An activity is typically associated with a claim, but some activities may also be associated with Service Requests, Exposures or Contacts (claimants).
      The Guidewire platform defines an ActivityBase entity that ClaimCenter can extend. Each activity is instantiated from an actvity template or pattern.</p>
    

cc_activity.ID = Internally managed primary key
cc_activity.ActivityClass = The class of the activity.
cc_activity.ActivityPattern = Pattern that created this activity. It it was not created from a pattern, then this is null.
cc_activity.ApprovalIssue = Reason approval is needed. This field should only be set for approval activities.
cc_activity.ApprovalRationale = Rationale for approving/rejecting the activity. This field should only be set for approval activities.
cc_activity.Approved = Whether the activity is approved. This is null if not relevant or undecided.
cc_activity.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_activity.AssignedByUser = User who assigned this entity.
cc_activity.AssignedGroup = Group to which this entity is assigned; null if none assigned
cc_activity.AssignedQueue = Either the Queue to which this entity is assigned (if AssignmentStatus is 'assigned'), the Queue to which the system suggests assignment (if AssignmentStatus is 'manual'), or null if none assigned. Only one of AssignedUserID or AssignedQueueID should be non null.
cc_activity.AssignedUser = Either the User to which this entity is assigned (if AssignmentStatus is 'assigned'), the User to which the system suggests assignment (if AssignmentStatus is 'manual'), or null if none assigned. Only one of AssignedUserID or AssignedQueueID should be non null.
cc_activity.AssignmentDate = Time when entity last assigned
cc_activity.AssignmentStatus = Typelist describing assignment status.
cc_activity.AutoGenerated = True if the activity was generated automatically; never fully implemented. Instead, customers can create an extension field and set it after creating an activity in a rule to indicate how the activity was created
cc_activity.BulkInvoice = The associated bulk invoice, if there is one. This field should be set only for ApprovalActivities and ApprovalDeniedActivities for BulkInvoices.
cc_activity.Claim = Claim with which this activity is associated.
cc_activity.ClaimContact = Claimant with which this activity is associated.
cc_activity.CloseDate = Date and time when this entity was closed. (Not applicable to all assignable entities)
cc_activity.CloseUser = The user who closed this activity.
cc_activity.Command = A Gosu command to execute for this activity.
cc_activity.CreateTime = Timestamp when the object was created
cc_activity.CreateUser = User who created the object
cc_activity.Description = Description of the activity.
cc_activity.DocumentTemplate = The id of an associated document template. The id and language gets passed to IDocumentTemplateSource to retrieve the DocumentTemplateDescriptor. This property should not be used by applications.
cc_activity.EmailTemplate = The id of an associated email template. The id gets passed to IEmailTemplateSource to retrieve the EmailTemplateDescriptor.
cc_activity.EndDate = Time the event is scheduled to terminate or null if the activity is not a scheduled event.
cc_activity.Escalated = True if the activity has been escalated.
cc_activity.EscalationDate = When the activity will be escalated if it isn't yet completed; this is null if the activity is never escalated.
cc_activity.Exposure = Exposure with which this activity is associated.
cc_activity.ExternallyOwned = Whether the activity is externally owned.
cc_activity.ExternalOwnerCC = External owner of this activity.
cc_activity.Importance = The importance level of this activity.
cc_activity.LastViewedDate = When this activity was last viewed by the assignee. If never viewed, this is null.
cc_activity.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_activity.LogicalName = Logical name of the activity.  Used by the internal workflow engine.
cc_activity.Mandatory = True if the activity must be completed and cannot be skipped.
cc_activity.Matter = Matter with which this activity is associated.
cc_activity.PreviousGroup = Group to which this entity was previously assigned.
cc_activity.PreviousQueue = Queue to which this entity was previously assigned.
cc_activity.PreviousUser = User to which this entity was previously assigned.
cc_activity.Priority = Priority of the activity with respect to other activities.
cc_activity.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_activity.Recurring = Whether this activity is recurring.
cc_activity.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_activity.ServiceRequest = ServiceRequest with which this activity is associated.
cc_activity.ShortSubject = A very brief title for the activity e.g., displayable in a calendar; this is associated with its pattern.
cc_activity.Status = Status of the activity.
cc_activity.Subject = A brief title for the activity; this is associated with its pattern.
cc_activity.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_activity.TargetDate = If this activity is a task, time by which a person should complete the task; if not completed by this time, the task is considered overdue. If this activity is an event, the time the event is scheduled to start.
cc_activity.TransactionSet = The associated transaction set, if there is one. This field should be set only for ApprovalActivities and ApprovalDeniedActivities for TransactionSets.
cc_activity.Type = Type of the activity.
cc_activity.UpdateTime = Timestamp when the object was last updated
cc_activity.UpdateUser = User who last updated the object
cc_activity.ValidationLevel = Validation level that this object passed (if any) before it was stored.
cc_activity.Workflow = Optional pointer to the workflow this activity is associated with.
cc_activity.Documents = Collection of documents linked to this activity.

cc_activitydocument = <p>Joins an activity to one or more documents.</p>
    

cc_activitydocument.ID = Internally managed primary key
cc_activitydocument.Activity = Parent activity for the documents.
cc_activitydocument.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_activitydocument.Document = A document linked to a parent activity.
cc_activitydocument.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_activitydocument.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_activitypattern = <p>A template for an activity. An activity pattern is not assigned to a user, nor does it belong to a claim; it is used only to create new activity instances.
      To create a new activity, an activity pattern is first chosen, and the values in the activity pattern are used to seed the values of the new activity instance.</p>
    

cc_activitypattern.ID = Internally managed primary key
cc_activitypattern.ActivityClass = The class of the activity.
cc_activitypattern.AutomatedOnly = True if the activity pattern is used only by automated additions to the workplan. If true, the pattern won't be shown as an option for users to choose in the application's interface.
cc_activitypattern.Category = Category used to organize the activity pattern.
cc_activitypattern.ClaimLossType = Used to optionally filter activity patterns by claim loss type.
cc_activitypattern.ClosedClaimAvlble = True if the activity pattern is available for closed claims.
cc_activitypattern.Code = The concise name of the activity pattern, used to identify the pattern within rules.
cc_activitypattern.Command = A Gosu command to execute for this activity.
cc_activitypattern.CreateTime = Timestamp when the object was created
cc_activitypattern.CreateUser = User who created the object
cc_activitypattern.Description = Description of the activity pattern.
cc_activitypattern.DocumentTemplate = The id of an associated document template. The id gets passed to IDocumentTemplateSource to retrieve the DocumentTemplateDescriptor.
cc_activitypattern.EmailTemplate = The id of an associated email template. The id gets passed to IEmailTemplateSource to retrieve the EmailTemplateDescriptor.
cc_activitypattern.EscalationBusCalTag = Holiday tag code to use for business calendar in calculating EscalationDate, if applicable.
cc_activitypattern.EscalationDays = Used in conjunction with EscalationStartPoint and EscalationIncludedDays to calculate the EscalationDate of the activity.
cc_activitypattern.EscalationHours = Used in conjunction with EscalationStartPoint and EscalationIncludedDays to calculate the EscalationDate of the activity.
cc_activitypattern.EscalationInclDays = Which days to include in calculating the EscalationDate.
cc_activitypattern.EscalationStartPt = Which existing date on the activity or associated claim to use as the starting date for the EscalationDate.
cc_activitypattern.EscBusCalLocPath = Location bean path to use for business calendar in calculating EscalationDate, if applicable.
cc_activitypattern.ExternallyOwned = Whether the activity is externally owned.
cc_activitypattern.Importance = The importance level of the activity.
cc_activitypattern.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_activitypattern.Mandatory = Whether completion of the activity is mandatory.
cc_activitypattern.Priority = Priority of the activity with respect to other activities.
cc_activitypattern.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_activitypattern.Recurring = Whether this activity is recurring.
cc_activitypattern.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_activitypattern.ShortSubject = Short subject field of the activity. For use in small areas e.g., a calendar event entry.
cc_activitypattern.Subject = Subject field of the activity.
cc_activitypattern.TargetBusCalLocPath = Location bean path to use for business calendar in calculating TargetDate, if applicable.
cc_activitypattern.TargetBusCalTag = Holiday tag code to use for business calendar in calculating TargetDate, if applicable.
cc_activitypattern.TargetDays = Used in conjunction with TargetStartPoint and TargetIncludedDays to calculate the ActionDate of the activity.
cc_activitypattern.TargetHours = Used in conjunction with TargetStartPoint and TargetIncludedDays to calculate the ActionDate of the activity.
cc_activitypattern.TargetIncludeDays = Which days to include in calculating the TargetDate.
cc_activitypattern.TargetStartPoint = Which existing date on the activity or associated claim to use as the starting date for the TargetDate.
cc_activitypattern.Type = Type of the activity.
cc_activitypattern.UpdateTime = Timestamp when the object was last updated
cc_activitypattern.UpdateUser = User who last updated the object
cc_activitypattern.Description_L10N_ARRAY = 
cc_activitypattern.ShortSubject_L10N_ARRAY = 
cc_activitypattern.Subject_L10N_ARRAY = 

cc_actpat_desc_l10n = null

cc_actpat_desc_l10n.ID = Internally managed primary key
cc_actpat_desc_l10n.Language = 
cc_actpat_desc_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_actpat_desc_l10n.Owner = 
cc_actpat_desc_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_actpat_desc_l10n.Value = 

cc_actpat_ssbj_l10n = null

cc_actpat_ssbj_l10n.ID = Internally managed primary key
cc_actpat_ssbj_l10n.Language = 
cc_actpat_ssbj_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_actpat_ssbj_l10n.Owner = 
cc_actpat_ssbj_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_actpat_ssbj_l10n.Value = 

cc_actpat_subj_l10n = null

cc_actpat_subj_l10n.ID = Internally managed primary key
cc_actpat_subj_l10n.Language = 
cc_actpat_subj_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_actpat_subj_l10n.Owner = 
cc_actpat_subj_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_actpat_subj_l10n.Value = 

cc_addnltripaccommodation = Used to track changed accommodation on the trip incident

cc_addnltripaccommodation.ID = Internally managed primary key
cc_addnltripaccommodation.Address = Address for the planned accommodation
cc_addnltripaccommodation.AgentFees = Agent fees incurred
cc_addnltripaccommodation.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_addnltripaccommodation.Assessment = Approve, deny or review an expense
cc_addnltripaccommodation.CreateTime = Timestamp when the object was created
cc_addnltripaccommodation.CreateUser = User who created the object
cc_addnltripaccommodation.EndDate = The ending date/time for this expense
cc_addnltripaccommodation.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_addnltripaccommodation.OtherFees = Other fees incurred
cc_addnltripaccommodation.PaidAmount = Original invoiced amount
cc_addnltripaccommodation.PropertyName = Name of the accommodation booked
cc_addnltripaccommodation.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_addnltripaccommodation.ReasonForAddnlAccommodation = Reasons for additional accommodation
cc_addnltripaccommodation.ReasonForDenial = Reasons for denial
cc_addnltripaccommodation.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_addnltripaccommodation.StartDate = The starting date/time for this expense
cc_addnltripaccommodation.TripAccommodation = Accommodation on the policy being cancelled, delayed etc
cc_addnltripaccommodation.UpdateTime = Timestamp when the object was last updated
cc_addnltripaccommodation.UpdateUser = User who last updated the object

cc_addnltripsegment = Used to track changed segments on the trip incident

cc_addnltripsegment.ID = Internally managed primary key
cc_addnltripsegment.AgentFees = Agent fees incurred
cc_addnltripsegment.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_addnltripsegment.Assessment = Approve, deny or review an expense
cc_addnltripsegment.CarrierName = Name of the airline, cruise ship, bus etc
cc_addnltripsegment.CarrierNumber = Flight, ship, bus number etc
cc_addnltripsegment.CreateTime = Timestamp when the object was created
cc_addnltripsegment.CreateUser = User who created the object
cc_addnltripsegment.EndDate = The ending date/time for this expense
cc_addnltripsegment.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_addnltripsegment.OtherFees = Other fees incurred
cc_addnltripsegment.PaidAmount = Original invoiced amount
cc_addnltripsegment.PortOfDisembarkation = Arrival airport, port, city etc
cc_addnltripsegment.PortOfEmbarkation = Boarding airport, port, city etc
cc_addnltripsegment.PortOfTransit = Transit airports, ports, cities etc
cc_addnltripsegment.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_addnltripsegment.ReasonForAddnlTravel = Reasons for additional travel
cc_addnltripsegment.ReasonForDenial = Reasons for denial
cc_addnltripsegment.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_addnltripsegment.StartDate = The starting date/time for this expense
cc_addnltripsegment.TransportType = Type of transport, airline, cruise ship, taxi etc
cc_addnltripsegment.TripSegment = Segment on the policy being cancelled, delayed etc
cc_addnltripsegment.UpdateTime = Timestamp when the object was last updated
cc_addnltripsegment.UpdateUser = User who last updated the object

cc_address = <p>
      Represents a street or mailing address. Addresses are normally associated with
      a Contact, either as a Primary Address for that Contact or via the ContactAddress table. Addresses can
      have geographic location information stored for proximity searches.</p>
      @see Contact
      @see ContactAddress
    

cc_address.ID = Internally managed primary key
cc_address.AddressBookUID = The system uses this value when it is integrated with ContactManager and the related contact is linked.  In this case, the ID represents the ID of the corresponding entity in ContactManager. This value is null if the object is not linked.
cc_address.AddressLine1 = First line of mailing address.
cc_address.AddressLine1Kanji = First line of mailing address in kanji (used only for Japanese addresses and will be null otherwise)
cc_address.AddressLine2 = Second line of mailing address.
cc_address.AddressLine2Kanji = Second line of mailing address in kanji (used only for Japanese addresses and will be null otherwise)
cc_address.AddressLine3 = Third line of mailing address.
cc_address.AddressType = Type of this address record.
cc_address.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_address.BatchGeocode = Boolean field to mark an address to be geocoded (if needed) by the batch geocoding work queue.
cc_address.CEDEX = CEDEX: Special business mail delivery flag (used only for French addresses and will be null otherwise)
cc_address.CEDEXBureau = CEDEX: Special business mail delivery bureau (used only for French addresses and will be null otherwise)
cc_address.City = City.
cc_address.CityDenorm = denorm field for City.
cc_address.CityKanji = City in kanji (used only for Japanese addresses and will be null otherwise)
cc_address.Country = Country.
cc_address.County = County.
cc_address.CreateTime = Timestamp when the object was created
cc_address.CreateUser = User who created the object
cc_address.Description = Additional description of mailing address.
cc_address.ExternalLinkID = The external link ID suggested by CC to CM when linkID is null but has been created in CC. 
cc_address.GeocodeStatus = Enum giving the status of the latitude and longitude data.
cc_address.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_address.PostalCode = Postal code; string to handle Zip+4 and international codes.
cc_address.PostalCodeDenorm = denorm field for Postal code; string to handle Zip+4 and international codes.
cc_address.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_address.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_address.SpatialPoint = Latitude and longitude of this address, represented as an instance of SpatialPoint.
cc_address.State = State.
cc_address.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_address.UpdateTime = Timestamp when the object was last updated
cc_address.UpdateUser = User who last updated the object
cc_address.ValidUntil = Latest date that this address is valid.

cc_addresscorrection = <p/>
      AddressCorrection entities will not be created for temporary Address, if no
      corrections are received, or if Geocoding fails for that Address. If an Address is edited more than
      once, and the Geocoding is updated, more than one AddressCorrection may exist for a given address.<p/>
      Note that the corrected address may not capture all information from the original; in particular, MapPoint
      will discard apartment/suite/floor/mailstop numbers. Similarly, "duplicate" corrections may be produced.
    

cc_addresscorrection.ID = Internally managed primary key
cc_addresscorrection.Address = The Address that has been corrected.
cc_addresscorrection.AddressLine1 = First line of original mailing address.
cc_addresscorrection.AddressLine2 = Second line of original mailing address.
cc_addresscorrection.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_addresscorrection.City = Original City.
cc_addresscorrection.CorrectedAddressLine1 = First line of corrected mailing address.
cc_addresscorrection.CorrectedAddressLine2 = Second line of corrected mailing address.
cc_addresscorrection.CorrectedCity = Corrected City.
cc_addresscorrection.CorrectedCountry = Corrected Country.
cc_addresscorrection.CorrectedCounty = Corrected County.
cc_addresscorrection.CorrectedPostalCode = Corrected Postal code; string to handle Zip+4 and international codes.
cc_addresscorrection.CorrectedState = Corrected State.
cc_addresscorrection.Country = Original Country.
cc_addresscorrection.County = Original County.
cc_addresscorrection.PostalCode = Original Postal code; string to handle Zip+4 and international codes.
cc_addresscorrection.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_addresscorrection.State = Original State.

cc_addressdeleteworkitem = Notes an Address that is potentially orphaned and may be deleted if so. Work items are recorded with the PublicID value of (ClaimCenter) Address entities. This is a system-internal entity.
    

cc_addressdeleteworkitem.ID = Internally managed primary key
cc_addressdeleteworkitem.AddressPublicID = The public ID of the Address we want to delete.
cc_addressdeleteworkitem.Attempts = 
cc_addressdeleteworkitem.AvailableSince = The time after which the work item can be tried. Must be null on failed work items
cc_addressdeleteworkitem.CheckedOutBy = 
cc_addressdeleteworkitem.CreationTime = 
cc_addressdeleteworkitem.Exception = Stack trace of the exception
cc_addressdeleteworkitem.LastUpdateTime = 
cc_addressdeleteworkitem.Priority = 
cc_addressdeleteworkitem.ProcessHistoryID = The writer batch job that created this workitem (ProcessHistory).
cc_addressdeleteworkitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_addressdeleteworkitem.Status = Status of this workitem.

cc_aggregatelimit = 
    Defines an annual or lifetime limit on an insurer's liability. This entity's LimitAmount value defines
    the maximum amount that an insurer is required to pay for a specific period. Each CoverageLine, which represents either a
    CoverageType or a specific Coverage, has an associated AggregateLimit and they are linked together through the CoverageLineLimit
    entity. The AggregateLimit.CoverageLines array contains the lines that reference a particular AggregateLimit. Each AggregateLimit
    is associated with a single policy period and zero or more coverage lines. If associated with multiple coverage lines, all the 
    lines must be unique.
  

cc_aggregatelimit.ID = Internally managed primary key
cc_aggregatelimit.AggLimitCalcCriteria = Contribution critiera for limit used calculations
cc_aggregatelimit.Comments = Comments about the aggregate limit.
cc_aggregatelimit.CreateTime = Timestamp when the object was created
cc_aggregatelimit.CreateUser = User who created the object
cc_aggregatelimit.LimitAmount = The amount of the aggregate limit, in the Claim Currency of Claims in the PolicyPeriod.
cc_aggregatelimit.LimitType = Aggregate limit type: none, by loss date, or by reported date.
cc_aggregatelimit.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_aggregatelimit.PolicyPeriod = PolicyPeriod with which the aggregate limit is associated.
cc_aggregatelimit.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_aggregatelimit.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_aggregatelimit.UpdateTime = Timestamp when the object was last updated
cc_aggregatelimit.UpdateUser = User who last updated the object
cc_aggregatelimit.Valid = Indicates if the AggregateLimitRpts related to this aggregatelimit are up-to-date.
cc_aggregatelimit.ValueType = Aggregate type: limit or deductible.
cc_aggregatelimit.CoverageLines = Coverage lines that reference this aggregate limit.

cc_agglimitrpt = Represents denormalized aggregate limit used calculations (i.e., the amount of the limit that has been used to date) for a
    PolicyPeriod and, optionally, a coverageline.
  

cc_agglimitrpt.ID = Internally managed primary key
cc_agglimitrpt.AggLimitCalcCriteria = Exclusions for limit used calculations
cc_agglimitrpt.CoverageLine = The associated coverage line.
cc_agglimitrpt.CreateTime = Timestamp when the object was created
cc_agglimitrpt.CreateUser = User who created the object
cc_agglimitrpt.LimitType = Aggregate limit type: by loss date or by reported date
cc_agglimitrpt.LimitUsed = The amount of the limit that has been used that is tracked within ClaimCenter.
cc_agglimitrpt.PolicyPeriod = PolicyPeriod with which the aggregate limit is associated. This property exists because CoverageLine may be null; when CoverageLine is not null, it must equal CoverageLine.PolicyPeriodID
cc_agglimitrpt.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_agglimitrpt.UpdateTime = Timestamp when the object was last updated
cc_agglimitrpt.UpdateUser = User who last updated the object
cc_agglimitrpt.Valid = Indicates if the limit used is up-to-date.
cc_agglimitrpt.ValueType = Aggregate type: limit or deductible.

cc_allocatedclaimnumber = Stores claim numbers allocated for draft claims which did not get saved successfully.

cc_allocatedclaimnumber.ID = Internally managed primary key
cc_allocatedclaimnumber.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_allocatedclaimnumber.Claim = The draft claim for which this number was allocated.
cc_allocatedclaimnumber.ClaimNumber = The claim number that was allocated.
cc_allocatedclaimnumber.CreateTime = Timestamp when the object was created
cc_allocatedclaimnumber.CreateUser = User who created the object
cc_allocatedclaimnumber.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_allocatedclaimnumber.UpdateTime = Timestamp when the object was last updated
cc_allocatedclaimnumber.UpdateUser = User who last updated the object

cc_answer = Text, Logical and Numeric Answers supplied in a specific Question Set. Question Sets are groupings of questions utilized in the risk qualification process or to develop supplemental underwriting information. Specific to ClaimCenter

cc_answer.ID = Internally managed primary key
cc_answer.AnswerSet = Fk to the Answer Set this answer corresponds to
cc_answer.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_answer.BooleanAnswer = Yes / no component of answer.
cc_answer.ChoiceAnswer = Choice of the answer.
cc_answer.CreateTime = Timestamp when the object was created
cc_answer.CreateUser = User who created the object
cc_answer.DateAnswer = The answer in date form.
cc_answer.IntegerAnswer = Numeric component of answer.
cc_answer.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_answer.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_answer.Question = Question that this answer answers
cc_answer.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_answer.TextAnswer = Either the answer's text.
cc_answer.UpdateTime = Timestamp when the object was last updated
cc_answer.UpdateUser = User who last updated the object

cc_answerset = This is a set of answers that correspond to the user filling out one question set form

cc_answerset.ID = Internally managed primary key
cc_answerset.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_answerset.CreateTime = Timestamp when the object was created
cc_answerset.CreateUser = User who created the object
cc_answerset.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_answerset.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_answerset.QuestionSet = Fk to the Question Set this answer set corresponds to
cc_answerset.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_answerset.UpdateTime = Timestamp when the object was last updated
cc_answerset.UpdateUser = User who last updated the object
cc_answerset.Answers = 
cc_answerset.ReviewQAnswerSets = Internal use by the SPM/Review functionality. Do not modify.

cc_appcritjurisdiction = Jurisdiction Applicability Criteria 

cc_appcritjurisdiction.ID = Internally managed primary key
cc_appcritjurisdiction.ActivityRule = The associated rule
cc_appcritjurisdiction.Jurisdiction = Jurisdiction in a rule availability criteria
cc_appcritjurisdiction.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_appcritlosstype = Loss Type Applicability Criteria 

cc_appcritlosstype.ID = Internally managed primary key
cc_appcritlosstype.ActivityRule = The associated rule
cc_appcritlosstype.LossType = Loss Type in a rule availability criteria
cc_appcritlosstype.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_appcritpolicytype = Policy Type Applicability Criteria 

cc_appcritpolicytype.ID = Internally managed primary key
cc_appcritpolicytype.ActivityRule = The associated rule
cc_appcritpolicytype.PolicyType = Policy Type in a rule availability criteria
cc_appcritpolicytype.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_archivefailure = null

cc_archivefailure.ID = Internally managed primary key
cc_archivefailure.ArchiveFailure = Short version of the reason for a failure to archive
cc_archivefailure.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_archivefailuredetails = null

cc_archivefailuredetails.ID = Internally managed primary key
cc_archivefailuredetails.ArchiveFailureDetails = Full details of archive failure
cc_archivefailuredetails.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_archiveworkitem = Represents a unit of work pending for archive.

cc_archiveworkitem.ID = Internally managed primary key
cc_archiveworkitem.Attempts = 
cc_archiveworkitem.AvailableSince = The time after which the work item can be tried. Must be null on failed work items
cc_archiveworkitem.CheckedOutBy = 
cc_archiveworkitem.CreationTime = 
cc_archiveworkitem.Exception = Stack trace of the exception
cc_archiveworkitem.Item = Soft foreign key to the item to be processed for archive.
cc_archiveworkitem.LastUpdateTime = 
cc_archiveworkitem.Priority = 
cc_archiveworkitem.ProcessHistoryID = The writer batch job that created this workitem (ProcessHistory).
cc_archiveworkitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_archiveworkitem.Status = Status of this workitem.

cc_arraydatadist = Stores array data distribution.

cc_arraydatadist.ID = Internally managed primary key
cc_arraydatadist.ArrayEntityName = Entity associated with array
cc_arraydatadist.ArrayEntityTableName = Table for array entity
cc_arraydatadist.ArrayName = Name of array.
cc_arraydatadist.MaxSize = Maximum array size.
cc_arraydatadist.MeanSize = Mean size of arrays.
cc_arraydatadist.MedianSize = Median size of arrays.
cc_arraydatadist.MinSize = Minimum array size.
cc_arraydatadist.NumNonNull = Count of # of non null values.
cc_arraydatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_arraydatadist.TableDataDist = TableDataDist for this object.
cc_arraydatadist.ArraySizeCntDDs = Collection of ArraySizeCntDDs linked to this ArrayDataDist.

cc_arraysizecntdd = Stores array data distribution size count pairs.

cc_arraysizecntdd.ID = Internally managed primary key
cc_arraysizecntdd.ArrayDataDist = ArrayDataDist for this object.
cc_arraysizecntdd.DistCount = Count of arrays  of that size.
cc_arraysizecntdd.DistSize = Size of array.
cc_arraysizecntdd.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_assessmentcontentitem = An assessment detail line regarding Content

cc_assessmentcontentitem.ID = Internally managed primary key
cc_assessmentcontentitem.Action = AssessmentContentAction
cc_assessmentcontentitem.AmountAfterLimit = The amount payable on the item(s)
cc_assessmentcontentitem.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_assessmentcontentitem.AssessmentSource = Related AssessmentSource if applicable
cc_assessmentcontentitem.Brand = Brand Name / Manufacturer
cc_assessmentcontentitem.ContentCategory = Assessment Category for Property
cc_assessmentcontentitem.ContentSchedule = Assessment Schedule for Property
cc_assessmentcontentitem.CreateTime = Timestamp when the object was created
cc_assessmentcontentitem.CreateUser = User who created the object
cc_assessmentcontentitem.DateAcquired = Date when this item was acquired
cc_assessmentcontentitem.Depreciation = Depreciation
cc_assessmentcontentitem.DepreciationPercentage = Depreciation percentage, per year
cc_assessmentcontentitem.Description = Assessment line.
cc_assessmentcontentitem.Incident = Related Incident
cc_assessmentcontentitem.IncidentOrder = Order of the item on the Incident
cc_assessmentcontentitem.ItemComment = Assessment Item Comment
cc_assessmentcontentitem.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_assessmentcontentitem.NumberOfItems = Number of Items
cc_assessmentcontentitem.ProofOfOwnershipProvided = Did the loss occur on this leg of the schedule
cc_assessmentcontentitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_assessmentcontentitem.PurchaseCost = PurchaseCost
cc_assessmentcontentitem.ReplacementValue = Estimated cost of replacing item(s)
cc_assessmentcontentitem.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_assessmentcontentitem.Salvage = Salvage
cc_assessmentcontentitem.UpdateTime = Timestamp when the object was last updated
cc_assessmentcontentitem.UpdateUser = User who last updated the object
cc_assessmentcontentitem.VehicleCategory = AssessmentCatetory for Vehicles

cc_assessmentitem = An assessment detail line

cc_assessmentitem.ID = Internally managed primary key
cc_assessmentitem.Action = AssessmentAction
cc_assessmentitem.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_assessmentitem.AssessmentSource = Related AssessmentSource if applicable
cc_assessmentitem.CreateTime = Timestamp when the object was created
cc_assessmentitem.CreateUser = User who created the object
cc_assessmentitem.Description = Assessment line.
cc_assessmentitem.EstimateAmount = Assessment Amount
cc_assessmentitem.Incident = Related Incident
cc_assessmentitem.ItemComment = Assessment Item Comment
cc_assessmentitem.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_assessmentitem.PropertyCategory = Assessment Category for Property
cc_assessmentitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_assessmentitem.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_assessmentitem.UpdateTime = Timestamp when the object was last updated
cc_assessmentitem.UpdateUser = User who last updated the object
cc_assessmentitem.VehicleCategory = AssessmentCatetory for Vehicles

cc_assessmentline = An event status line for a assessment e.g., an appointment date with a garage

cc_assessmentline.ID = Internally managed primary key
cc_assessmentline.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_assessmentline.AssessmentSource = Related Incident.
cc_assessmentline.CreateTime = Timestamp when the object was created
cc_assessmentline.CreateUser = User who created the object
cc_assessmentline.Event = The event of this assessment line.
cc_assessmentline.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_assessmentline.Note = Notes or comments explaining the reasoning behind this event status line.
cc_assessmentline.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_assessmentline.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_assessmentline.StatusDate = Date the event took place
cc_assessmentline.UpdateTime = Timestamp when the object was last updated
cc_assessmentline.UpdateUser = User who last updated the object

cc_assessmentsource = A source of information for the assessment

cc_assessmentsource.ID = Internally managed primary key
cc_assessmentsource.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_assessmentsource.Assessor = The relevant assessor
cc_assessmentsource.CreateTime = Timestamp when the object was created
cc_assessmentsource.CreateUser = User who created the object
cc_assessmentsource.Description = Description of Assessment Source
cc_assessmentsource.Incident = Related assessment
cc_assessmentsource.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_assessmentsource.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_assessmentsource.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_assessmentsource.SourceName = Assessment Source name
cc_assessmentsource.SourceType = Assessment Source typelist
cc_assessmentsource.UpdateTime = Timestamp when the object was last updated
cc_assessmentsource.UpdateUser = User who last updated the object
cc_assessmentsource.StatusLine = A list of events for this claim.

cc_assignableforkeydatadist = Stores assignable foreign key data distribution.

cc_assignableforkeydatadist.ID = Internally managed primary key
cc_assignableforkeydatadist.AssignableForKeyName = Name of assignable foreign key.
cc_assignableforkeydatadist.MeanSize = Mean size of assignable foreign keys.
cc_assignableforkeydatadist.MedianSize = Median size of assignable foreign keys.
cc_assignableforkeydatadist.NumNonNull = Count of # of non null values.
cc_assignableforkeydatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_assignableforkeydatadist.TableDataDist = TableDataDist for this object.
cc_assignableforkeydatadist.AssignableForKeySizeCntDDs = Collection of AssignableForKeySizeCntDDs linked to this AssignableForKeyDataDist.

cc_assignableforkeysizecntdd = Stores assignable foreign key data distribution size count pairs.

cc_assignableforkeysizecntdd.ID = Internally managed primary key
cc_assignableforkeysizecntdd.AssignableForKeyDataDist = AssignableForKeyDataDist for this object.
cc_assignableforkeysizecntdd.DistCount = Count of sets of that size.
cc_assignableforkeysizecntdd.DistSize = Number of foreign keys for one value.
cc_assignableforkeysizecntdd.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_assignqueue = 
        A queue of assignable entities. Entities can be assigned to a queue (rather than a user) and
        any entity assigned to a queue is said to be "in the queue". A queue belongs to a group
        and is typically used to organize items which can be handled by any user in its group.
        When a user has time to tackle a new item they look at the items in the queue and reassign
        the top item to themselves.
      
    

cc_assignqueue.ID = Internally managed primary key
cc_assignqueue.CreateTime = Timestamp when the object was created
cc_assignqueue.CreateUser = User who created the object
cc_assignqueue.Description = The description of what this queue is for.
cc_assignqueue.Group = The group to which the queue belongs.
cc_assignqueue.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_assignqueue.LockingColumn = Meaningless column for locking
cc_assignqueue.Name = The name of this queue.
cc_assignqueue.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_assignqueue.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_assignqueue.SubGroupVisible = If true the queue is visible from sub-groups of the group to which it belongs.
cc_assignqueue.UpdateTime = Timestamp when the object was last updated
cc_assignqueue.UpdateUser = User who last updated the object

cc_attribute = 
        Describes a name-value pair. An administrator can create an Attribute entity to represent custom user characteristics,
        for example, Spanish. Then, the administrator can associate the Attribute with one or more system users.
        Studio users can reference an Attribute from Studio when writing rules.
      
    

cc_attribute.ID = Internally managed primary key
cc_attribute.Active = Indicates whether or not this attribute is currently in use.
cc_attribute.CreateTime = Timestamp when the object was created
cc_attribute.CreateUser = User who created the object
cc_attribute.Description = A description of the attribute.
cc_attribute.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_attribute.Name = The name of the attribute.
cc_attribute.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_attribute.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_attribute.Type = The type of the attribute.
cc_attribute.UpdateTime = Timestamp when the object was last updated
cc_attribute.UpdateUser = User who last updated the object
cc_attribute.Description_L10N_ARRAY = 
cc_attribute.Name_L10N_ARRAY = 

cc_attributeuser = 
        Links an Attribute entity with a User entity. An Attribute is a general-purpose characteristic you can associate with one or more users.
      
    

cc_attributeuser.ID = Internally managed primary key
cc_attributeuser.Attribute = The associated attribute.
cc_attributeuser.DateField1 = General-purpose date field.
cc_attributeuser.DateField2 = General-purpose date field.
cc_attributeuser.DateField3 = General-purpose date field.
cc_attributeuser.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_attributeuser.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_attributeuser.State = The state in which this attribute is applicable.
cc_attributeuser.TextField1 = General-purpose text field.
cc_attributeuser.TextField2 = General-purpose text field.
cc_attributeuser.TextField3 = General-purpose text field.
cc_attributeuser.User = The associated user.
cc_attributeuser.Value = The attribute value for this user.

cc_attr_name_l10n = null

cc_attr_name_l10n.ID = Internally managed primary key
cc_attr_name_l10n.Language = 
cc_attr_name_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_attr_name_l10n.Owner = 
cc_attr_name_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_attr_name_l10n.Value = 

cc_attr_desc_l10n = null

cc_attr_desc_l10n.ID = Internally managed primary key
cc_attr_desc_l10n.Language = 
cc_attr_desc_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_attr_desc_l10n.Owner = 
cc_attr_desc_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_attr_desc_l10n.Value = 

cc_authoritylimit = 
      Defines a dollar amount limiting a particular financial authority within the system. An AuthorityLimit has an
      associated LimitType indicating what the limit applies to, for example, setting reserves. You can also restrict
      limits to a particular CoverageType or CostType. Each AuthorityLimit belongs to a particular AuthorityProfile. 
      
    

cc_authoritylimit.ID = Internally managed primary key
cc_authoritylimit.CostType = If non-null, the limit applies only to this cost type.
cc_authoritylimit.CoverageType = If non-null, the limit applies only to this coverage type.
cc_authoritylimit.CreateTime = Timestamp when the object was created
cc_authoritylimit.CreateUser = User who created the object
cc_authoritylimit.LimitAmount = The amount of the limit, in whole dollars.
cc_authoritylimit.LimitType = The limit type.
cc_authoritylimit.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_authoritylimit.PolicyType = If non-null, the limit applies only to this policy type.
cc_authoritylimit.Profile = The authority limit profile this limit is a part of.
cc_authoritylimit.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_authoritylimit.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_authoritylimit.UpdateTime = Timestamp when the object was last updated
cc_authoritylimit.UpdateUser = User who last updated the object

cc_authorityprofile = 
        Encompasses a set of AuthorityLimit entities. A user with the proper authority can assign an AuthorityLimitProfile
        to one or more users in the system. A user can have only one assigned AuthorityLimitProfile. As long as an AuthorityLimit
        is in use, it cannot be deleted.
      
    

cc_authorityprofile.ID = Internally managed primary key
cc_authorityprofile.CreateTime = Timestamp when the object was created
cc_authorityprofile.CreateUser = User who created the object
cc_authorityprofile.Currency = The currency in which the profile's limits are defined.
cc_authorityprofile.Custom = Is this a custom limit, used by a single user?
cc_authorityprofile.Description = Description of the limit.
cc_authorityprofile.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_authorityprofile.Name = Name that identifies the profile.
cc_authorityprofile.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_authorityprofile.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_authorityprofile.UpdateTime = Timestamp when the object was last updated
cc_authorityprofile.UpdateUser = User who last updated the object
cc_authorityprofile.Description_L10N_ARRAY = 
cc_authorityprofile.Limits = Limits contained in the profile.
cc_authorityprofile.Name_L10N_ARRAY = 

cc_authlp_desc_l10n = null

cc_authlp_desc_l10n.ID = Internally managed primary key
cc_authlp_desc_l10n.Language = 
cc_authlp_desc_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_authlp_desc_l10n.Owner = 
cc_authlp_desc_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_authlp_desc_l10n.Value = 

cc_authlp_name_l10n = null

cc_authlp_name_l10n.ID = Internally managed primary key
cc_authlp_name_l10n.Language = 
cc_authlp_name_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_authlp_name_l10n.Owner = 
cc_authlp_name_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_authlp_name_l10n.Value = 

cc_automatedhandler = 
        This entity is the superclass for the two types of Special Handling automated handlers, one for generating email notifications and one for generating activities.
    

cc_automatedhandler.ID = Internally managed primary key
cc_automatedhandler.CreateTime = Timestamp when the object was created
cc_automatedhandler.CreateUser = User who created the object
cc_automatedhandler.PolicyType = If non-null, then this handler will only apply to Claims created for Policies that have this particular Policy Type
cc_automatedhandler.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_automatedhandler.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_automatedhandler.SpecialHandling = The instance of Special Handling that owns this Automated Handler
cc_automatedhandler.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_automatedhandler.UpdateTime = Timestamp when the object was last updated
cc_automatedhandler.UpdateUser = User who last updated the object
cc_automatedhandler.ActivityPattern = Activity pattern to use for activity generation
cc_automatedhandler.EmailTemplateOverride = Optional alternate template to use for activity generation
cc_automatedhandler.EmailAddress = Email address to which the generated email should be sent
cc_automatedhandler.EmailAddresses = Email addresses for multi-recipient lists.
cc_automatedhandler.EmailRole = This is set when email address should be determined dynamically based on the contact assigned to this role.
cc_automatedhandler.EmailTemplate = The ID of the email template to use when generating the email after the associated trigger fires.  The id gets passed to IEmailTemplateSource to retrieve the EmailTemplateDescriptor.
cc_automatedhandler.NotificationType = Notification type for either notification to a fixed email address or a specific contact on a claim

cc_bivalidationalert = 
    Represents one bulk invoice validation alert message. A bulk invoice validation plugin constructs one or more instances
    of this entity when it encounters validation errors. Each instance is related to a single BulkInvoice and has both an alert type and a message
    indicating the reason for the validation failure.
    

cc_bivalidationalert.ID = Internally managed primary key
cc_bivalidationalert.AlertMsg = Text description of this BulkInvoice validation failure alert, i.e. the reason for the validation failure.
cc_bivalidationalert.AlertType = The type of this BulkInvoice validation alert.  Typically customer defined.
cc_bivalidationalert.BulkInvoice = The BulkInvoice with which this validation alert is associated.
cc_bivalidationalert.CreateTime = Timestamp when the object was created
cc_bivalidationalert.CreateUser = User who created the object
cc_bivalidationalert.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bivalidationalert.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_bivalidationalert.UpdateTime = Timestamp when the object was last updated
cc_bivalidationalert.UpdateUser = User who last updated the object

cc_criterion = null

cc_criterion.ID = Internally managed primary key
cc_criterion.BeanPath = 
cc_criterion.CreateTime = Timestamp when the object was created
cc_criterion.CreateUser = User who created the object
cc_criterion.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_criterion.LockingColumn = Meaningless column for locking
cc_criterion.Operator = 
cc_criterion.Owner = 
cc_criterion.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_criterion.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_criterion.UpdateTime = Timestamp when the object was last updated
cc_criterion.UpdateUser = User who last updated the object
cc_criterion.Values = 
cc_criterion.EndInclusive = 
cc_criterion.StartInclusive = 

cc_batchprocesslease = null

cc_batchprocesslease.ID = Internally managed primary key
cc_batchprocesslease.Acquired = 
cc_batchprocesslease.Created = 
cc_batchprocesslease.Exclusivity = 
cc_batchprocesslease.Expired = 
cc_batchprocesslease.ExpireRequested = 
cc_batchprocesslease.FailoverState = 
cc_batchprocesslease.InitialArguments = 
cc_batchprocesslease.LeaseOwner = 
cc_batchprocesslease.LockingColumn = Meaningless column for locking
cc_batchprocesslease.Name = 
cc_batchprocesslease.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_batchprocesslease.Released = 
cc_batchprocesslease.RetryFailover = 
cc_batchprocesslease.TransferRequested = 
cc_batchprocesslease.TransferTarget = 
cc_batchprocesslease.UniqueIdLSB = 
cc_batchprocesslease.UniqueIdMSB = 

cc_batchprocessleasehistory = null

cc_batchprocessleasehistory.ID = Internally managed primary key
cc_batchprocessleasehistory.Acquired = 
cc_batchprocessleasehistory.Created = 
cc_batchprocessleasehistory.Expired = 
cc_batchprocessleasehistory.ExpireRequested = 
cc_batchprocessleasehistory.LeaseOwner = 
cc_batchprocessleasehistory.LockingColumn = Meaningless column for locking
cc_batchprocessleasehistory.Name = 
cc_batchprocessleasehistory.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_batchprocessleasehistory.ReplacementIdLSB = 
cc_batchprocessleasehistory.ReplacementIdMSB = 
cc_batchprocessleasehistory.Terminated = 
cc_batchprocessleasehistory.TerminationMessage = 
cc_batchprocessleasehistory.TerminationReason = 
cc_batchprocessleasehistory.TransferRequested = 
cc_batchprocessleasehistory.TransferTarget = 
cc_batchprocessleasehistory.UniqueIdLSB = 
cc_batchprocessleasehistory.UniqueIdMSB = 

cc_beanversiondatadist = Stores bean version data distributions.

cc_beanversiondatadist.ID = Internally managed primary key
cc_beanversiondatadist.BeanCount = Count of # of rows with this bean version.
cc_beanversiondatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_beanversiondatadist.TableDataDist = TableDataDist for this object.

cc_benefitperiod = Denotes period of time when employee received benefits.

cc_benefitperiod.ID = Internally managed primary key
cc_benefitperiod.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_benefitperiod.BenefitsBeginDate = Date when benefits start.
cc_benefitperiod.BenefitType = Type of lost wages benefit.
cc_benefitperiod.CreateTime = Timestamp when the object was created
cc_benefitperiod.CreateUser = User who created the object
cc_benefitperiod.Description = Additional information.
cc_benefitperiod.Exposure = The related exposure.
cc_benefitperiod.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_benefitperiod.MonthlyCompRate = Monthly compensation rate. This calculation depends on the type of benefit.
cc_benefitperiod.NumPaymentWeeks = Number of weeks benefits will be paid. This differs by state.
cc_benefitperiod.PercentageComp = Percentage compensability.
cc_benefitperiod.PostInjryWklyWgs = Weekly wages post-injury.
cc_benefitperiod.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_benefitperiod.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_benefitperiod.UpdateTime = Timestamp when the object was last updated
cc_benefitperiod.UpdateUser = User who last updated the object
cc_benefitperiod.WeeklyCompRate = Weekly compensation rate. This calculation depends on type of benefit.

cc_benefits = 
      Detail information about specific benefits related to an exposure. Exposures
      have multiple fields linking to different Benefits entities.
    

cc_benefits.ID = Internally managed primary key
cc_benefits.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_benefits.BenefitsBeginDate = Date when benefits start.
cc_benefits.BenefitsEndDate = Date when benefits end.
cc_benefits.BenefitType = Type of lost wages benefit.
cc_benefits.CreateTime = Timestamp when the object was created
cc_benefits.CreateUser = User who created the object
cc_benefits.Description = Additional information about benefits.
cc_benefits.FirstPaymentDate = Date 1st payment made
cc_benefits.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_benefits.MaxBurialRate = Maximum burial rate.
cc_benefits.MaxCompRate = State maximum benefit amount.
cc_benefits.MinCompRate = State minimum benefit amount.
cc_benefits.MMIDate = Date when maximum medical improvement was reached (when PPD benefits can start).
cc_benefits.MonthlyCompRate = Monthly compensation rate. This calculation depends on the type of benefit.
cc_benefits.NumPaymentWeeks = Number of weeks benefits will be paid. This differs by state.
cc_benefits.PaidOnTime = 1st payment - whether made on time or reason why not
cc_benefits.PaymentFrequency = Payment frequency for benefits. This differs by state.
cc_benefits.PaymentLimit = Payment limit
cc_benefits.PercentageComp = Percentage compensability.
cc_benefits.PostInjryWklyWgs = Weekly wages post-injury.
cc_benefits.ProviderType = Type of services provider.
cc_benefits.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_benefits.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_benefits.RetroPeriod = Retroactive period.
cc_benefits.Services = Services required.
cc_benefits.SettleDate = Date of settlement.
cc_benefits.SettleMethod = Method of settlement.
cc_benefits.UpdateTime = Timestamp when the object was last updated
cc_benefits.UpdateUser = User who last updated the object
cc_benefits.WaitingPeriod = Waiting period before benefits begin. This differs by state.
cc_benefits.WaitingPeriodPaid = Whether the Employer has paid the waiting period
cc_benefits.WaitPrdBeginDate = Date when the waiting period begins.
cc_benefits.WaitPrdEndDate = Date when the waiting period ends.
cc_benefits.WeeklyCompRate = Weekly compensation rate. This calculation depends on type of benefit.
cc_benefits.WeeklyCompRateInfo = Rating Information

cc_brvalidator = Entity to keep track of status of Business Rule validation

cc_brvalidator.ConfigFP = 
cc_brvalidator.ValidatePID = 

cc_validatorworkitem = Queue of biz rules validation to run. This is a system-internal entity.

cc_validatorworkitem.ID = Internally managed primary key
cc_validatorworkitem.Attempts = 
cc_validatorworkitem.AvailableSince = The time after which the work item can be tried. Must be null on failed work items
cc_validatorworkitem.CheckedOutBy = 
cc_validatorworkitem.CreationTime = 
cc_validatorworkitem.Exception = Stack trace of the exception
cc_validatorworkitem.LastUpdateTime = 
cc_validatorworkitem.Priority = 
cc_validatorworkitem.ProcessHistoryID = The writer batch job that created this workitem (ProcessHistory).
cc_validatorworkitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_validatorworkitem.RuleID = A reference to the Rule entity to be validated
cc_validatorworkitem.Status = Status of this workitem.

cc_blobcoldatadist = Stores bean version data distributions.

cc_blobcoldatadist.ID = Internally managed primary key
cc_blobcoldatadist.AverageLength = Average length of blob values.
cc_blobcoldatadist.BlobColName = Blob column name.
cc_blobcoldatadist.MaximumLength = Maximum length of blob values.
cc_blobcoldatadist.MinimumLength = Minimum length of blob values.
cc_blobcoldatadist.NumNonNull = Count of # of non null values.
cc_blobcoldatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_blobcoldatadist.TableDataDist = TableDataDist for this object.

cc_bodypart = 
        Collects details of body injury for an InjuryIncident. Each instance of this entity represents a
        body part injured in the incident. An individual InjuryIncident can have multiple BodyPartDetails,
        representing injured body parts of the Person (ClaimContact) with role of "injured" for the
        InjuryIncident.
      
    

cc_bodypart.ID = Internally managed primary key
cc_bodypart.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_bodypart.CompensabilityComments = Comments on compensability of injury.
cc_bodypart.CompensabilityDecision = Decision on compensability for this body part.
cc_bodypart.CompensabilityDecisionDate = Decision Date of compensability.
cc_bodypart.CreateTime = Timestamp when the object was created
cc_bodypart.CreateUser = User who created the object
cc_bodypart.DetailedBodyPart = Specific body part. Choices filtered by PrimaryBodyPart.
cc_bodypart.DetailedBodyPartDesc = Description of Detailed Body Part
cc_bodypart.ImpairmentPercentage = Percentage of Permanment Impairment
cc_bodypart.Incident = The foreign key to the Indicent.
cc_bodypart.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_bodypart.Ordering = Order of the body parts (i.e. First BodyPart should be lowest), based on importance or order entered.
cc_bodypart.PrimaryBodyPart = Area of the body where the body part is located.
cc_bodypart.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bodypart.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_bodypart.SideOfBody = Side Of Body
cc_bodypart.UpdateTime = Timestamp when the object was last updated
cc_bodypart.UpdateUser = User who last updated the object

cc_booleancoldatadist = Stores boolean (true/false) data distribution.

cc_booleancoldatadist.ID = Internally managed primary key
cc_booleancoldatadist.BooleanColumnName = Name of boolean column.
cc_booleancoldatadist.NumFalse = Count of # of false values.
cc_booleancoldatadist.NumNonNull = Count of # of non null values.
cc_booleancoldatadist.NumTrue = Count of # of true values.
cc_booleancoldatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_booleancoldatadist.TableDataDist = TableDataDist for this object.

cc_broadcastbatch = null

cc_broadcastbatch.ID = Internally managed primary key
cc_broadcastbatch.Messages = Serialized list of messages
cc_broadcastbatch.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_broadcastbatch.SeqNo = Sequence ID
cc_broadcastbatch.ServerId = Sender's serverID
cc_broadcastbatch.TimeInserted = Time batch inserted

cc_BudgetLine = null

cc_BudgetLine.ID = Internally managed primary key
cc_BudgetLine.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_BudgetLine.BudgetLineType = Budget line type.
cc_BudgetLine.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_BudgetLine.Matter = Related matter.
cc_BudgetLine.OriginalEstimate = Original budget estimate
cc_BudgetLine.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_building = null

cc_building.ID = Internally managed primary key
cc_building.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_building.BuildingNumber = The alphanumeric "number" associated with this building.
cc_building.CreateTime = Timestamp when the object was created
cc_building.CreateUser = User who created the object
cc_building.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_building.Notes = Any notes associated with this building.
cc_building.PolicyLocation = The PolicyLocation where this building exists.
cc_building.PolicySystemId = Identifier for the building in an external policy system
cc_building.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_building.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_building.UpdateTime = Timestamp when the object was last updated
cc_building.UpdateUser = User who last updated the object

cc_bulkinvoice = 
    The top level entity for Bulk Pay, which corresponds to the incoming invoice or bill to be
    paid. It has a unique ID (which may correspond to the invoice), some data fields (such as payee and a scheduled send
    date), and a non-null array of bulk invoice items (refer to the BulkInvoiceItem entity for details). A bulk invoice
    is not associated with a single claim, but each line item (each BulkInvoiceItem) is associated with a different claim.
    

cc_bulkinvoice.ID = Internally managed primary key
cc_bulkinvoice.AccountName = The name on the account
cc_bulkinvoice.ApprovalDate = The date when the object was ultimately approved or rejected
cc_bulkinvoice.ApprovalStatus = The approval status of the object
cc_bulkinvoice.ApprovedReportingAmount = Denormalized value of amount in reporting currency of all approved invoice items.
cc_bulkinvoice.ApprovedTransactionAmount = Denormalized value of amount in transaction currency of all approved invoice items.
cc_bulkinvoice.BankAccountNumber = The bank account number
cc_bulkinvoice.BankAccountType = The type of bank accout e.g. checking, savings etc
cc_bulkinvoice.BankName = The name of the bank
cc_bulkinvoice.BankRoutingNumber = The routing number is a nine digit bank code used in the United States
cc_bulkinvoice.BulkInvoiceTotal = Amount to be split evenly across all invoice items, or zero if item amounts are to be entered individually.
cc_bulkinvoice.CheckInstructions = Special handling instructions for the check.
cc_bulkinvoice.CheckNumber = The check or EFT identifier for the single large check generated for this invoice.
cc_bulkinvoice.Comments = Comments about the check, such as a reason it was voided.
cc_bulkinvoice.CreateTime = Timestamp when the object was created
cc_bulkinvoice.CreateUser = User who created the object
cc_bulkinvoice.Currency = Currency that the line items on this BulkInvoice should use.
cc_bulkinvoice.DefaultCostCategory = The CostCategory, if any, shared by every payment on this BulkInvoice unless overriden by a particular line-item.
cc_bulkinvoice.DefaultCostType = The CostType, if any, shared by every payment on this BulkInvoice unless overriden by a particular line-item.
cc_bulkinvoice.DefaultPaymentType =  The PaymentType, if any, shared by every payment on this BulkInvoice unless overriden by a particular line-item.
cc_bulkinvoice.DeliveryMethod = Requested delivery method for the bulk check.
cc_bulkinvoice.InvoiceNumber = Unique number of the physical invoice related to this bulk pay invoice.
cc_bulkinvoice.IsPrimary = Indicates if this is the primary EFT record for the contact
cc_bulkinvoice.IssueDate = Date the check was issued.
cc_bulkinvoice.LastValidatedDate = The date that this BulkInvoice was last validated. This property is always non-null when Valid is true.
cc_bulkinvoice.MailingAddress = Address of the person/company to whom this invoice should be mailed. This represents an Address entity.
cc_bulkinvoice.MailTo = Name of the person/company to whom the check should be mailed.
cc_bulkinvoice.MailToAddress = Address of the person/company to whom the check should be mailed.
cc_bulkinvoice.Memo = Memo to include on the check.
cc_bulkinvoice.Payee = The Payee for all the bulkinvoiceitems on this bulkinvoice.
cc_bulkinvoice.PaymentMethod = Requested payment method for all payments in the check.
cc_bulkinvoice.PayTo = Pay to the order of value for the bulk check.
cc_bulkinvoice.PayToDenorm = denorm field for Pay to the order of value for the bulk check.
cc_bulkinvoice.ProcessingItems = Boolean flag to indicate whether the invoice's items are currently being processed.
cc_bulkinvoice.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bulkinvoice.ReceivedDate = Date that the invoice was received or entered.
cc_bulkinvoice.Reportability = Whether the bulk payment should be reported to the IRS as income.
cc_bulkinvoice.ReportableAmount = (Unused. May be removed in a future release.) Reportable amount of the BI check (for deductions).
cc_bulkinvoice.RequestingUser = The user submitting the object for approval
cc_bulkinvoice.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_bulkinvoice.ScheduledSendDate = Date that the bulk invoice should be submitted to the downstream system.
cc_bulkinvoice.SplitEqually = Designates whether or not the amount for each individual line-item should be automatically calculated as an even share of the total amount.
cc_bulkinvoice.Status = Business status of this bulk invoice.
cc_bulkinvoice.TotalReportingAmount = Denormalized value of total amount in reporting currency of all invoice items.
cc_bulkinvoice.TotalTransactionAmount = Denormalized value of total amount in transaction currency of all invoice items.
cc_bulkinvoice.TransToReportingExchangeRate = The Transaction-to-Reporting exchange rate used to select Transaction-to-Claim and Transaction-to-Reporting exchange rates for the checks created for this bulk invoice. If this refers to a market exchange rate, current market rates will be selected. Otherwise, a market Claim-to-Reporting exchange rate will be selected and a custom Transaction-to-Claim rate will be created such that, when multiplied together, they equal this rate.
cc_bulkinvoice.UpdateTime = Timestamp when the object was last updated
cc_bulkinvoice.UpdateUser = User who last updated the object
cc_bulkinvoice.Valid = Indicates whether this BulkInvoice has been validated and if so whether the validation was successful.
cc_bulkinvoice.InvoiceItems = The collection of BulkInvoiceItems on this invoice, corresponding to the line-items on the real-world invoice.
cc_bulkinvoice.ValidationAlerts = Any alerts returned by the most recent validation call.  If empty, then the BulkInvoice is considered valid.

cc_bulkinvoiceitem = 
    Describes one item of the BulkInvoice, and corresponds to one line item of the original invoice.
    It contains data fields that define the reserve line to which the item is to be coded, as well as the amount and the PaymentType.
    

cc_bulkinvoiceitem.ID = Internally managed primary key
cc_bulkinvoiceitem.Amount = The amount of this invoice item.
cc_bulkinvoiceitem.AwaitingProcessing = Flag to indicate whether this item is waiting to be processed for invoice submission.
cc_bulkinvoiceitem.BulkInvoice = The bulk invoice that contains this bulk invoice item.
cc_bulkinvoiceitem.BulkInvoiceOrder = Order of the BulkInvoiceItem on the BulkInvoice.
cc_bulkinvoiceitem.ClaimInfo = The ClaimInfo for which this BulkInvoiceItem represents a payment.
cc_bulkinvoiceitem.ClaimNumber = Claim Number of the claim that this BulkInvoiceItem is related to.
cc_bulkinvoiceitem.CostCategory = The CostCategory of the payment associated with this item.
cc_bulkinvoiceitem.CostType = The CostType of the payment associated with this item.
cc_bulkinvoiceitem.CreateTime = Timestamp when the object was created
cc_bulkinvoiceitem.CreateUser = User who created the object
cc_bulkinvoiceitem.DateOfService = Date that the service was performed (if this check is for a service).
cc_bulkinvoiceitem.DeductionsAmount = The total amount of all deductions computed for the check associated with this bulk invoice item.
cc_bulkinvoiceitem.Description = A comment field for the invoice item.  The contents of this field will be copied to the memo of the place-holder check that is created for this BulkInvoiceItem in ClaimCenter.
cc_bulkinvoiceitem.Explanation = Validation warnings / errors generated for this BulkInvoiceItem during final processing.
cc_bulkinvoiceitem.NonEroding = Indicates whether the associated payment should erode reserves (false) or not (true).
cc_bulkinvoiceitem.PaymentType = The PaymentType for the payment associated with this item.
cc_bulkinvoiceitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bulkinvoiceitem.ReservingCurrency = The reserving currency of the payment associated with this item.
cc_bulkinvoiceitem.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_bulkinvoiceitem.ServicePdEnd = End date of the service period for the check.
cc_bulkinvoiceitem.ServicePdStart = Start date of the service period for the check.
cc_bulkinvoiceitem.Status = The current business status of this item.
cc_bulkinvoiceitem.UpdateTime = Timestamp when the object was last updated
cc_bulkinvoiceitem.UpdateUser = User who last updated the object

cc_biiteminfo = 
      Links a BulkInvoiceItem to a claim graph. It has a nullable reference to BulkInvoiceItem so that it can be archived along with the claim graph.
    

cc_biiteminfo.ID = Internally managed primary key
cc_biiteminfo.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_biiteminfo.BulkInvoiceItem = The bulk invoice that this info is referring to
cc_biiteminfo.BulkInvoiceItemPublicID = PublicID used to link back to the item
cc_biiteminfo.Claim = The Claim for which this BulkInvoiceItem represents a payment.
cc_biiteminfo.CreateTime = Timestamp when the object was created
cc_biiteminfo.CreateUser = User who created the object
cc_biiteminfo.Exposure = The Exposure, if any, for which this BulkInvoiceItem represents a payment.
cc_biiteminfo.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_biiteminfo.ReserveLineWrapper = the wrapper that contains the ReserveLine for the payment associated with this invoice item.
cc_biiteminfo.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_biiteminfo.UpdateTime = Timestamp when the object was last updated
cc_biiteminfo.UpdateUser = User who last updated the object

cc_bulkinvoiceworkitem = 
        Represents a unit of work to process a bulk invoice item for submission.
        A work item has as its target a bulk invoice item for which a placeholder
        check needs to be created and submitted for approval, or marked as not
        valid if there are problems with it.
    

cc_bulkinvoiceworkitem.ID = Internally managed primary key
cc_bulkinvoiceworkitem.Attempts = 
cc_bulkinvoiceworkitem.AvailableSince = The time after which the work item can be tried. Must be null on failed work items
cc_bulkinvoiceworkitem.BulkInvoiceItem = The bulk invoice item to be processed.
cc_bulkinvoiceworkitem.CheckedOutBy = 
cc_bulkinvoiceworkitem.CreationTime = 
cc_bulkinvoiceworkitem.Exception = Stack trace of the exception
cc_bulkinvoiceworkitem.JobType = The type of job for which this bulk invoice item is being processed.
cc_bulkinvoiceworkitem.LastUpdateTime = 
cc_bulkinvoiceworkitem.Priority = 
cc_bulkinvoiceworkitem.ProcessHistoryID = The writer batch job that created this workitem (ProcessHistory).
cc_bulkinvoiceworkitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bulkinvoiceworkitem.Status = Status of this workitem.

cc_bulkpurgeworkitem = Represents a unit of work pending for purging.

cc_bulkpurgeworkitem.ID = Internally managed primary key
cc_bulkpurgeworkitem.Attempts = 
cc_bulkpurgeworkitem.AvailableSince = The time after which the work item can be tried. Must be null on failed work items
cc_bulkpurgeworkitem.CheckedOutBy = 
cc_bulkpurgeworkitem.CreationTime = 
cc_bulkpurgeworkitem.Exception = Stack trace of the exception
cc_bulkpurgeworkitem.Item = Soft foreign key to the item to be processed for purging.
cc_bulkpurgeworkitem.LastUpdateTime = 
cc_bulkpurgeworkitem.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_bulkpurgeworkitem.Priority = 
cc_bulkpurgeworkitem.ProcessHistoryID = The writer batch job that created this workitem (ProcessHistory).
cc_bulkpurgeworkitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bulkpurgeworkitem.Status = Status of this workitem.

cc_businessweek = List of businessweeks.

cc_businessweek.ID = Internally managed primary key
cc_businessweek.AppliesToAllZones = True if this businessweek applies to all zones (in which case BusinessWeekZones should be empty). If false and BusinessWeekZones has elements, this businessweek applies to those zones.  If false and BusinessWeekZones is empty, this businessweek doesn't apply anywhere.
cc_businessweek.BusinessDayDemarcation = Demarcation of the business day
cc_businessweek.BusinessWeekEnd = What day the business week ends.
cc_businessweek.FridayBusinessDay = Is Friday a business day.
cc_businessweek.FridayBusinessEnd = End of business day on Friday.
cc_businessweek.FridayBusinessStart = Start of business day on Friday.
cc_businessweek.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_businessweek.MondayBusinessDay = Is Monday a business day.
cc_businessweek.MondayBusinessEnd = End of business day on Monday.
cc_businessweek.MondayBusinessStart = Start of business day on Monday.
cc_businessweek.Name = The name of a businessweek in the business calendar.
cc_businessweek.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_businessweek.SaturdayBusinessDay = Is Saturday a business day.
cc_businessweek.SaturdayBusinessEnd = End of business day on Saturday.
cc_businessweek.SaturdayBusinessStart = Start of business day on Saturday.
cc_businessweek.SundayBusinessDay = Is Sunday a business day.
cc_businessweek.SundayBusinessEnd = End of business day on Sunday.
cc_businessweek.SundayBusinessStart = Start of business day on Sunday.
cc_businessweek.ThursdayBusinessDay = Is Thursday a business day.
cc_businessweek.ThursdayBusinessEnd = End of business day on Thursday.
cc_businessweek.ThursdayBusinessStart = Start of business day on Thursday.
cc_businessweek.TuesdayBusinessDay = Is Tuesday a business day.
cc_businessweek.TuesdayBusinessEnd = End of business day on Tuesday.
cc_businessweek.TuesdayBusinessStart = Start of business day on Tuesday.
cc_businessweek.WednesdayBusinessDay = Is Wednesday a business day.
cc_businessweek.WednesdayBusinessEnd = End of business day on Wednesday.
cc_businessweek.WednesdayBusinessStart = Start of business day on Wednesday.
cc_businessweek.BusinessWeekZones = The zones that observe this businessweek.
cc_businessweek.Name_L10N_ARRAY = 

cc_businessweek_zone = A zone that observes a certain businessweek.

cc_businessweek_zone.ID = Internally managed primary key
cc_businessweek_zone.BusinessWeek = The businessweek.
cc_businessweek_zone.Code = The code for this zone, this is the value that should be used for zone lookups.
cc_businessweek_zone.Country = Country of this zone.
cc_businessweek_zone.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_businessweek_zone.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_businessweek_zone.ZoneType = Type of this zone.

cc_bizweek_nam_l10n = null

cc_bizweek_nam_l10n.ID = Internally managed primary key
cc_bizweek_nam_l10n.Language = 
cc_bizweek_nam_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_bizweek_nam_l10n.Owner = 
cc_bizweek_nam_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bizweek_nam_l10n.Value = 

cc_cachestatsrollupsnap = Rollup snapshot for the global cache for a particular time slice

cc_cachestatsrollupsnap.ID = Internally managed primary key
cc_cachestatsrollupsnap.AverageNumHits = Average number of hits for this time slice
cc_cachestatsrollupsnap.AverageNumMisses = Average number of misses for this time slice
cc_cachestatsrollupsnap.AverageNumMissesWhenCacheFull = Average number of misses because the item was evicted when the cache was full for this time slice
cc_cachestatsrollupsnap.AverageSpaceRetained = Average space retained in bytes for this time slice
cc_cachestatsrollupsnap.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_cachestatsrollupsnap.ServerId = ServerId of the host that generated the statistics
cc_cachestatsrollupsnap.SliceTimestamp = Lower end of this time slice, i.e 00:00:00,000 for the range 00:00:00,000 to 00:29:59,999

cc_catastrophe = 
Represents a catastrophe to code claims with. Each catastrophe has a unique
name and catastrophe number.
    

cc_catastrophe.ID = Internally managed primary key
cc_catastrophe.Active = True if a catastrophe can be assigned to a new claim.
cc_catastrophe.BottomRightLatitude = Latitude for the bottom right point of the area of interest, in degrees.
cc_catastrophe.BottomRightLongitude = Longitude for the bottom right point of the area of interest, in degrees.
cc_catastrophe.CatastropheNumber = Catastrophe number.
cc_catastrophe.CatastropheValidFrom = Start date when this catastrophe is valid
cc_catastrophe.CatastropheValidTo = Date when this catastrophe is no longer valid
cc_catastrophe.Comments = Comments regarding the Catastrophe
cc_catastrophe.CreateTime = Timestamp when the object was created
cc_catastrophe.CreateUser = User who created the object
cc_catastrophe.Description = Description of the catastrophe.
cc_catastrophe.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_catastrophe.Name = Name of the catastrophe.
cc_catastrophe.PCSCatastropheNumber = PCS catastrophe number from ISO data feed.
cc_catastrophe.PolicyEffectiveDate = Effective date for retrieving policy locations from the policy system.
cc_catastrophe.PolicyRetrievalCompletionTime = Time when last policy retrieval location was completed.
cc_catastrophe.PolicyRetrievalSetTime = Time when policy location retrieval parameters were last set.
cc_catastrophe.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_catastrophe.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_catastrophe.ScheduleBatch = Boolean field to mark a catastrophe to be run in the CatastropheClaimFinder batch process.
cc_catastrophe.TopLeftLatitude = Latitude for the top left  point of the area of interest, in degrees.
cc_catastrophe.TopLeftLongitude = Longitude for the top left point of the area of interest, in degrees.
cc_catastrophe.Type = Type of the catastrophe (for example, ISO or internal).
cc_catastrophe.UpdateTime = Timestamp when the object was last updated
cc_catastrophe.UpdateUser = User who last updated the object
cc_catastrophe.CatastropheZones = The zones that define this catastrophe.
cc_catastrophe.ClaimsHistory = History of the matched claims.
cc_catastrophe.Description_L10N_ARRAY = 
cc_catastrophe.Name_L10N_ARRAY = 
cc_catastrophe.Perils = Details of perils associated with a catastrophe.

cc_catastropheclaimshistory = The history of catastrophe finder batch process runs.

cc_catastropheclaimshistory.ID = Internally managed primary key
cc_catastropheclaimshistory.Catastrophe = The catastrophe.
cc_catastropheclaimshistory.Description = Description of the history event.
cc_catastropheclaimshistory.EventTimestamp = Timestamp when the event occurred.
cc_catastropheclaimshistory.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_catastropheclaimshistory.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_catastropheperil = Details of perils associated to a catastrophe.

cc_catastropheperil.ID = Internally managed primary key
cc_catastropheperil.Catastrophe = 
cc_catastropheperil.Comments = Comments regarding the peril
cc_catastropheperil.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_catastropheperil.LossCause = The loss cause associated to the peril
cc_catastropheperil.LossType = High level claim type (for example, Auto or Property).
cc_catastropheperil.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_catastrophezone = A zone of a catastrophe.  It contains the zone code, the zone type and the country to which the region belongs.

cc_catastrophezone.ID = Internally managed primary key
cc_catastrophezone.Catastrophe = The catastrophe.
cc_catastrophezone.Code = The code for this zone, this is the value that should be used for lookups.
cc_catastrophezone.CodeDenorm = denorm field for The code for this zone, this is the value that should be used for lookups.
cc_catastrophezone.Country = The country to which the zone belongs.
cc_catastrophezone.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_catastrophezone.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_catastrophezone.ZoneType = Type of zone.

cc_cat_desc_l10n = null

cc_cat_desc_l10n.ID = Internally managed primary key
cc_cat_desc_l10n.Language = 
cc_cat_desc_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_cat_desc_l10n.Owner = 
cc_cat_desc_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_cat_desc_l10n.Value = 

cc_cat_name_l10n = null

cc_cat_name_l10n.ID = Internally managed primary key
cc_cat_name_l10n.Language = 
cc_cat_name_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_cat_name_l10n.Owner = 
cc_cat_name_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_cat_name_l10n.Value = 

cc_check = 
      A paper Check or EFT issued to a particular payee to deliver one or more Payments. A Check can have multiple payees,
      in which case distinct Checks to each secondary payee are created in the same CheckSet, and they are all related
      to the primary check as members of a CheckGroup. For a single payee check, the check's amount is the aggregate
      of all the payments associated with it. For a multiple-payee check, each of the secondary checks gets a portion
      of the aggregated payments, and the remainder is the amount of the primary Check.
    

cc_check.ID = Internally managed primary key
cc_check.AccountName = The name on the account
cc_check.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_check.BankAccount = Source bank account.
cc_check.BankAccountNumber = The bank account number
cc_check.BankAccountType = The type of bank accout e.g. checking, savings etc
cc_check.BankName = The name of the bank
cc_check.BankRoutingNumber = The routing number is a nine digit bank code used in the United States
cc_check.BulkInvoiceItemInfo = If this check was created to act as a record-keeper for a bulk invoice item, this is the item it references.
cc_check.CheckBatching = How the check should be batched for sending.
cc_check.CheckInstructions = Special handling instructions for the check.
cc_check.CheckNumber = The check or EFT identifier.
cc_check.CheckSet = CheckSet this Check belongs to.
cc_check.CheckType = Role of the check in the check group (primary or secondary).
cc_check.Claim = The related claim.
cc_check.ClaimContact = Claimant the check is being written for, as a ClaimContact.
cc_check.Comments = Comments about the check, such as a reason it was voided.
cc_check.CreateTime = Timestamp when the object was created
cc_check.CreateUser = User who created the object
cc_check.DateOfService = Date that the service was performed (if this check is for a service).
cc_check.DeductionType = Deduction type for secondary checks.  Always NULL for primary checks.
cc_check.DeliveryMethod = Requested delivery method.
cc_check.EnteredTime = The time the check was created. This is different from CreateTime, which is the time it was stored in the system.
cc_check.Group = CheckGroup this check belongs to, if it's part of a multi-payee check.
cc_check.InvoiceNumber = Invoice number associated with the check.
cc_check.IsPrimary = Indicates if this is the primary EFT record for the contact
cc_check.IssueDate = Date the check was issued.
cc_check.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_check.MailingAddress = Address of the person/company to whom the check should be mailed. This represents an Address entity.
cc_check.MailTo = Name of the person/company to whom the check should be mailed.
cc_check.MailToAddress = Address of the person/company to whom the check should be mailed.
cc_check.Memo = Memo to include on the check.
cc_check.PaymentMethod = Requested payment method for all payments in the check.
cc_check.PayTo = Pay to the order of.
cc_check.PayToDenorm = denorm field for Pay to the order of.
cc_check.PendEscalationForBulk = Only escalate as part of a BulkInvoice.
cc_check.Portion = The amount of a multi-payee check applicable to this check.
cc_check.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_check.RecurringCheck = The recurring check entity, if any, associated with this check.
cc_check.Reportability = Whether the payment should be reported to the IRS as income.
cc_check.ReportableAmount = Reportable amount of the check in the transaction currency. Used by the BackupWithholdingCalculator as the amount of the check reportable to the IRS, from which it calculates backup withholding Deductions. It is editable in the UI.
cc_check.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_check.ScheduledSendDate = Date that the check is scheduled to be sent.  Also used to determine if the check amount is included in Future Payments (tomorrow or later).  Should only be modified in the UI or PreSetup rules.
cc_check.ServicePdEnd = End date of the service period for the check.
cc_check.ServicePdStart = Start date of the service period for the check.
cc_check.Status = Status of the check (issued, voided, cleared, and so on). Do not update directly. Use methods to initiate operations, or use updateCheckStatus() method.
cc_check.UpdateTime = Timestamp when the object was last updated
cc_check.UpdateUser = User who last updated the object
cc_check.Deductions = Any deductions related to the check.
cc_check.Payees = Recipients of the payment; there must be at least one. If there are multiple, each is a 'joint' payee.
cc_check.Payments = Payments on the check.
cc_check.ServiceRequestInvoices = ServiceRequestInvoices related to this check. All linked invoices are expected to have the same service request specialist and currency.

cc_checkgroup = 
      Groups the Checks that are part of a multi-payee "check" (as it would be referred to by users). The primary Check
      of the CheckGroup (i.e., CheckGroup.PrimaryCheck) contains all of the Payments, and each secondary Check has a
      CheckPortion that indicates the portion of the total amount of the payments that it should receive. After amounts
      have been allocated to all secondary Checks according to the CheckPortions, the leftover amount is allocated to
      the primary Check.
    

cc_checkgroup.ID = Internally managed primary key
cc_checkgroup.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_checkgroup.CheckSet = The TransactionSet that this check group belongs to.
cc_checkgroup.CreateTime = Timestamp when the object was created
cc_checkgroup.CreateUser = User who created the object
cc_checkgroup.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_checkgroup.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_checkgroup.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_checkgroup.UpdateTime = Timestamp when the object was last updated
cc_checkgroup.UpdateUser = User who last updated the object
cc_checkgroup.Checks = Check objects in the group, including the primary check. Together, these checks form a multi-payee check.

cc_checkpayee = Links a Check to a Contact that is a Payee of the check.

cc_checkpayee.ID = Internally managed primary key
cc_checkpayee.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_checkpayee.Check = The check.
cc_checkpayee.ClaimContact = The payee as a ClaimContact.
cc_checkpayee.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_checkpayee.PayeeDenorm = Payee FK denorm
cc_checkpayee.PayeeType = The payee type. This is used for tax reporting purposes.
cc_checkpayee.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_checkportion = 
      Indicates the amount of a multi-payee check that applies to a particular check. Checks with a CheckPortion do not
      have any payments, but just receive a percentage or fixed amount of the Payments in the primary Check of the
      CheckGroup (i.e., CheckGroup.PrimaryCheck).
    

cc_checkportion.ID = Internally managed primary key
cc_checkportion.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_checkportion.CreateTime = Timestamp when the object was created
cc_checkportion.CreateUser = User who created the object
cc_checkportion.FixedClaimAmount = The fixed amount (in the claim currency) to allocate towards the check.
cc_checkportion.FixedReportingAmount = The fixed amount (in the reporting currency) to allocate towards the check.
cc_checkportion.FixedReservingAmount = The fixed amount (in the reserving currency) to allocate towards the check.
cc_checkportion.FixedTransactionAmount = The fixed amount (in the transaction currency) to allocate towards the check. Setting this clears Percentage and updates FixedClaimAmount and FixedReportingAmount. At least one check must be added to this CheckPortion before setting this.
cc_checkportion.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_checkportion.Percentage = The percentage to allocate towards the check. Setting this clears the fixed amount properties
cc_checkportion.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_checkportion.Reissued = Flag indicating whether this portion was created for a reissued check.
cc_checkportion.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_checkportion.UpdateTime = Timestamp when the object was last updated
cc_checkportion.UpdateUser = User who last updated the object
cc_checkportion.Checks = Checks whose amounts are defined by this CheckPortion. If there are multiple checks in this array, all of them must belong to the same CheckRecurrence.

cc_checkrecurrence = 
      Describes the frequency that Checks in a {@link RecurringCheck} are issued.
      Abstract supertype of {@link MonthlyCheckRecurrence} and {@link WeeklyCheckRecurrence}.
    

cc_checkrecurrence.ID = Internally managed primary key
cc_checkrecurrence.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_checkrecurrence.CreateTime = Timestamp when the object was created
cc_checkrecurrence.CreateUser = User who created the object
cc_checkrecurrence.FirstDueDate = Due date of the first check in the recurrence.
cc_checkrecurrence.IssuanceDateOffset = Number of days before a check is due that it should be issued.
cc_checkrecurrence.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_checkrecurrence.NumChecks = Number of checks in the recurrence.
cc_checkrecurrence.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_checkrecurrence.RecurrenceDay = Day of the week the check is due.
cc_checkrecurrence.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_checkrecurrence.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_checkrecurrence.UpdateTime = Timestamp when the object was last updated
cc_checkrecurrence.UpdateUser = User who last updated the object
cc_checkrecurrence.MonthlyFrequency = A check is made every n month(s).
cc_checkrecurrence.RecurrenceDate = Day of every month the check is due.
cc_checkrecurrence.RecurrenceWeek = Week in the month the check is due.
cc_checkrecurrence.WeeklyFrequency = A check is made every n week(s).

cc_checkrpt = Calculated amounts for a check.

cc_checkrpt.ID = Internally managed primary key
cc_checkrpt.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_checkrpt.Check = The check that the calculations are on.
cc_checkrpt.CreateTime = Timestamp when the object was created
cc_checkrpt.CreateUser = User who created the object
cc_checkrpt.Currency = The transaction currency of the Check.
cc_checkrpt.GrossAmount = The gross amount of the check in the transaction currency.
cc_checkrpt.GrossClaimAmount = The gross amount of the check in the claim currency.
cc_checkrpt.GrossReservingAmount = The gross amount of the check in the reserving currency.
cc_checkrpt.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_checkrpt.ReservingCurrency = The reserving currency of the Check.
cc_checkrpt.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_checkrpt.UpdateTime = Timestamp when the object was last updated
cc_checkrpt.UpdateUser = User who last updated the object

cc_checksetreserve = Links a check set with any reserves that were automatically created as part of processing its payments.

cc_checksetreserve.ID = Internally managed primary key
cc_checksetreserve.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_checksetreserve.CheckSet = The check set.
cc_checksetreserve.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_checksetreserve.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_checksetreserve.Reserve = The automatically-generated reserve.

cc_citation = 
        Captures a citation information associated with a VehicleIncident. This information includes ticket number,
        code, and type.
      
    

cc_citation.ID = Internally managed primary key
cc_citation.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_citation.CitationAuthority = Authority who issued the citation.
cc_citation.CitationCode = Citation code.
cc_citation.CitationNumber = The ticket number.
cc_citation.CitationType = The type of citation.
cc_citation.CreateTime = Timestamp when the object was created
cc_citation.CreateUser = User who created the object
cc_citation.Incident = The incident to which this Citation belongs.
cc_citation.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_citation.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_citation.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_citation.UpdateTime = Timestamp when the object was last updated
cc_citation.UpdateUser = User who last updated the object

cc_claim = 
      Centralizes all the information, contacts, and business activities associated with a claimant's loss. The Claim
      entity is the primary object in the ClaimCenter system.
      
    

cc_claim.ID = Internally managed primary key
cc_claim.AccidentType = Detailed accident type; augments LossCause.
cc_claim.AgencyId = An ID assigned to indicate company and office a claim is being submitted by, this data is used by ISO integration
cc_claim.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_claim.AssignedByUser = User who assigned this entity.
cc_claim.AssignedGroup = Group to which this entity is assigned; null if none assigned
cc_claim.AssignedQueue = Either the Queue to which this entity is assigned (if AssignmentStatus is 'assigned'), the Queue to which the system suggests assignment (if AssignmentStatus is 'manual'), or null if none assigned. Only one of AssignedUserID or AssignedQueueID should be non null.
cc_claim.AssignedUser = Either the User to which this entity is assigned (if AssignmentStatus is 'assigned'), the User to which the system suggests assignment (if AssignmentStatus is 'manual'), or null if none assigned. Only one of AssignedUserID or AssignedQueueID should be non null.
cc_claim.AssignmentDate = Time when entity last assigned
cc_claim.AssignmentStatus = Typelist describing assignment status.
cc_claim.BenefitsStatusDcsn = Indicates if the benefits decision has been made yet.
cc_claim.Catastrophe = Associated catastrophe.
cc_claim.ClaimantDenorm = Claimant FK denorm.
cc_claim.ClaimantRprtdDate = Workers' Comp only. Date when the claimant reported incident to insured (employer).
cc_claim.ClaimNumber = The external identifier of the claim.
cc_claim.ClaimSource = Information about how Claim was entered into the System.
cc_claim.ClaimTier = The tier of this claim, used to decide how to rate the claim metrics.
cc_claim.ClaimWorkComp = Claim's worker's compensation data
cc_claim.CloseDate = Date and time when this entity was closed. (Not applicable to all assignable entities)
cc_claim.ClosedOutcome = The outcome reached when closing the claim.
cc_claim.ComputerSecurity = Whether computer security issues were involved.
cc_claim.ConcurrentEmp = Did the employee have concurrent employment.
cc_claim.CoverageInQuestion = Whether the claim is covered by the claimant's policies.
cc_claim.CreateTime = Timestamp when the object was created
cc_claim.CreateUser = User who created the object
cc_claim.Currency = The currency for the claim, copied from the policy.
cc_claim.CurrentConditions = Current conditions
cc_claim.DateCompDcsnDue = The date the compensability Decision (for entire claim) was Due.
cc_claim.DateCompDcsnMade = The date the compensability Decision (for entire claim) was Made.
cc_claim.DateEligibleForArchive = The date and time that this claim will become eligible for archiving. While this field is null or set to a date in the future, this claim is not selected by the archive batch process. (Note that being passed over by the archive batch process is different from being 'skipped' or 'excluded'.)
cc_claim.DateFormGivenToEmp = The date the work comp form was given to an employee.
cc_claim.DateFormRetByEmp = The date the work comp form was returned by an employee.
cc_claim.DateRptdToAgent = The date the agent was notified about the claim.
cc_claim.DateRptdToEmployer = The date the claim was reported to the employer.
cc_claim.DateRptdToInsured = The date the insured was notified about the claim.
cc_claim.DeathDate = Date of death (if injury type is death).
cc_claim.Description = Description of the accident or loss.
cc_claim.DiagnosticCnsistnt = Is the diagnostic consistent.
cc_claim.DrugsInvolved = Does the employer question the validity of the claim.
cc_claim.EmployerValidityReason = The reason the employer questions the validity of the claim.
cc_claim.EmploymentInjury = Workers' Comp only. Whether the injury occurred in course of employment.
cc_claim.EmpQusValidity = Does the employer question the validity of the claim.
cc_claim.EmpSentMPNNotice = Date that the Employer sent out the MPN Notification.
cc_claim.ExaminationDate = Date of the Examination.
cc_claim.ExposureBegan = Workers' Comp only. Date when the exposure began.
cc_claim.ExposureEnded = Workers' Comp only. Date when the exposure ended.
cc_claim.Fault = Insured's probable percentage of fault.
cc_claim.FaultRating = Indicates in the insured is at fault.
cc_claim.FireDeptInfo = Reports, incident number, and other information from the fire department.
cc_claim.FirstNoticeSuit = Boolean field to indicate suit at the time of the first notice.
cc_claim.Flagged = This claim's status as a flagged claim.
cc_claim.FlaggedDate = The date and time the claim was initially flagged.  When the flag is unset, this date is set to null and will be set to a new date if a new reason for flagging the claim is found later.
cc_claim.FlaggedReason = The reason this claim is flagged.
cc_claim.FurtherTreatment = Is further treatment required.
cc_claim.HazardousWaste = Boolean field to mark a claim as involving hazardous waste.
cc_claim.HospitalDate = Date admitted to the hospital.
cc_claim.HospitalDays = Estimated Days in hospital.
cc_claim.HowReported = How the claim was reported.
cc_claim.IncidentReport = True if this is an incident report only and the claim will not be processed.
cc_claim.InjuredOnPremises = Was the employee injured on the premesis.
cc_claim.InjuredRegularJob = Was the employee injured while doing his or her regular job.
cc_claim.InjWkrInMPN = Date that the injured Worker moved to MPN.
cc_claim.InsuredDenorm = Insured FK denorm.
cc_claim.InsuredPremises = True if the incident occurred on the employer's premises.
cc_claim.InsurerSentMPNNotice = Date that Insurer sent out the MPN Notification.
cc_claim.ISOEnabled = Is this field enabled for ISO.
cc_claim.ISOKnown = Has a search request for this object been successfully received by ISO?
cc_claim.ISOReceiveDate = The last time a response was received from ISO for this object. 
cc_claim.ISOSendDate = The last time a search request was sent to ISO. 
cc_claim.ISOStatus = Status of exposure with ISO - for example checked, not of interest.
cc_claim.JurisdictionState = The state of jurisdiction. This indicates jurisdiction that covers the loss, which may differ from the state in which the loss occurred. The Jurisdiction must be associated with JurisdictionType.TC_INSURANCE.
cc_claim.LargeLossNotificationStatus = The status of large loss notices.
cc_claim.LitigationStatus = The status of the litigation.
cc_claim.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_claim.LOBCode = Line of Business code; typically related to the policy.
cc_claim.LocationCode = Workers' Comp only. Location at the employer's facilities where the accident occurred.
cc_claim.LocationOfTheft = the Location where the property was stolen.
cc_claim.LockingColumn = Meaningless column for locking
cc_claim.LossCause = General cause of loss; dependent on loss type.
cc_claim.LossDate = The date on which the loss occurred.
cc_claim.LossLocation = Location of the loss.
cc_claim.LossLocationCode = Location Code for the Loss Location.
cc_claim.LossLocationSpatialDenorm = 
cc_claim.LossType = High level claim type (for example, Auto or Property).
cc_claim.MainContactType = Relationship of the main contact to the insured.
cc_claim.ManifestationDate = The manifestation date.
cc_claim.MMIdate = Date Maximum Medical Improvement was reached.
cc_claim.ModifiedDutyAvail = Is Modified Duty Available at Work.
cc_claim.Mold = Boolean field to mark a claim as involving mold.
cc_claim.OtherRecovStatus = The Other Recoverable status for a claim.
cc_claim.PermissionRequired = If non-null, this is an additional permission that users are required to have to view or work on this claim. This field is used to restrict access to sensitive or private claims; for example, those involving an employee or that are under litigation.
cc_claim.PoliceDeptInfo = Reports, incident number, and other information from the police deptartment.
cc_claim.Policy = The policy associated with this claim.
cc_claim.PreexDisblty = Whether the injured person had a pre-existing disability.
cc_claim.PreviousGroup = Group to which this entity was previously assigned.
cc_claim.PreviousQueue = Queue to which this entity was previously assigned.
cc_claim.PreviousUser = User to which this entity was previously assigned.
cc_claim.Progress = Description of the progress of an open claim.
cc_claim.PTPinMPN = Is Primary Treating Physician in MPN?
cc_claim.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claim.PurgeDate = Date at which the claim should be purged. Configurations can use this field to decide when to mark the claim for purge, and there are sample Claim Closed and Claim Reopened rules to set it. It is not used by the internal purge logic.
cc_claim.ReinsuranceFlaggedStatus = The reinsurance flagged status for a claim.
cc_claim.ReinsuranceReportable = True if this claim has exceeded the Reinsurance Reporting Threshold
cc_claim.ReOpenDate = Date claim was reopened.
cc_claim.ReopenedReason = The reason for reopening the claim.
cc_claim.ReportedByType = Relationship of the person who reported the claim to the insured.
cc_claim.ReportedDate = Date on which the loss was reported.
cc_claim.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_claim.SafetyEquipProv = Was safety equipment provided.
cc_claim.SafetyEquipUsed = Was safety equipment used.
cc_claim.SalvageStatus = The salvage status for a claim.
cc_claim.Segment = Segmentation type of the claim. Both the claim and the exposure may be segmented.
cc_claim.ShowMedicalFirstInfo = Show Medical First info section.
cc_claim.SIEscalateSIU = Escalate to SIU team.
cc_claim.SIEscalateSIUdate = Date escalated to SIU team.
cc_claim.SIScore = Special Investigations Score.
cc_claim.SIULifeCycleState = Current state of SIU trigger rule processing for this Claim.
cc_claim.SIUStatus = The SIU status for a claim
cc_claim.State = Internal state of the claim.
cc_claim.StateAckNumber = Acknowledgment number of the state file for this claim.
cc_claim.StateFileNumber = Number of the state file for this claim.
cc_claim.StatuteDate = Date at which the statute of limitations expires for this claim.
cc_claim.StorageBarCodeNum = Storage Bar Code Number.
cc_claim.StorageBoxNum = Storage Box Number.
cc_claim.StorageCategory = Storage Category.
cc_claim.StorageDate = Date file shipped to storage facility.
cc_claim.StorageLocationState = Storage Location State.
cc_claim.StorageType = Storage Type.
cc_claim.StorageVolumes = Storage Volumes.
cc_claim.Strategy = Segmentation type of the claim. Both the claim and the exposure may be segmented.
cc_claim.SupplementalWorkloadWeight = 
cc_claim.TreatedPatientBfr = Has the patient been treated before.
cc_claim.UpdateTime = Timestamp when the object was last updated
cc_claim.UpdateUser = User who last updated the object
cc_claim.ValidationLevel = Validation level that this object passed (if any) before it was stored.
cc_claim.Weather = Weather conditions at the time of accident.
cc_claim.WeatherRelated = Is related to weather
cc_claim.WorkloadUpdated = Last time user workload was calculated and updated
cc_claim.WorkloadWeight = 
cc_claim.Access = The access control objects for this claim.
cc_claim.Activities = The activities for this claim.
cc_claim.ClaimIndicators = Indicators related to this claim.
cc_claim.ClaimISOMatchReports = ISO match reports for this claim.
cc_claim.ClaimMetrics = Metrics related to this claim.
cc_claim.ClaimSynchStates = The sync states related to this claim.
cc_claim.ConcurrentEmpl = Details of concurrent employment for workers' comp claims.
cc_claim.Contacts = The contacts involved with this claim. Including indirectly involved, like Exposures contacts.
cc_claim.ContribFactors = 
cc_claim.Deductibles = Deductibles associated with this claim.
cc_claim.Documents = The documents associated with this claim; for example, FNOL accord form or police report. Warning: do not rely on the contents of this array when the IDocumentMetadataSource plugin is enabled; use DocumentsUtil.getAllDocumentsForClaim instead.
cc_claim.DrugsPrescribed = 
cc_claim.Evaluations = The original cost estimate followed by any modifications to that estimate.
cc_claim.Exposures = The exposures related to this claim. Note: if triggersValidation is false, exposure metrics will not be run automatically.
cc_claim.History = The history events related to this claim.
cc_claim.Incidents = Descriptions of incidents related to this claim. Note: In Gosu, it's preferred to use Claim.VehicleIncidentsOnly and similar properties for each Incident subtype. See the Application Guide.
cc_claim.Matters = The legal matters related to this claim.
cc_claim.MedicalContactStatus = 
cc_claim.MedicalTreatments = 
cc_claim.MetroReports = Details of reports associated with claim.
cc_claim.Negotiations = The negotiations related to this claim.
cc_claim.Notes = The notes particular to this claim. Notes can also be associated with a particular exposure.
cc_claim.Officials = Details of officials associated with claim.
cc_claim.OtherBenefits = Details of other benefits for workers comp claim.
cc_claim.ReserveLines = ReserveLines relating to this claim.
cc_claim.RIAgreementGroups = The reinsurance agreement groups for this claim.
cc_claim.RICodings = RICodings relating to this claim.
cc_claim.RoleAssignments = The user role assignments for this claim.
cc_claim.ServiceRequests = Service requests associated with this claim. Note: if triggersValidation is false, service request metrics will not be run automatically.
cc_claim.SIAnswerSet = Link to Answer set for SIU
cc_claim.SITriggers = The triggers for Special Investigations linked to this Claim
cc_claim.Text = Large text fields associated with claim.
cc_claim.Transactions = Transactions relating to this claim.  For rules, it is much better to use one of the getXXXIterator() methods and for the UI it is much better to use one of the getXXXQuery() methods to retrieve all transactions or a specific subtype of Transactions for the claim.
cc_claim.Workflows = Set of workflows associated with this Claim.

cc_claimaccess = 
        Records claim-level permission for users and groups. Claim access can be granted to a User, Group, SecurityZone,
        and to anyone. The AccessType defines what level of access is permitted.
      
    

cc_claimaccess.ID = Internally managed primary key
cc_claimaccess.Anyone = Whether this permission should be granted to everyone.  If true then GroupID, UserID, and SecurityZoneID should be null.
cc_claimaccess.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_claimaccess.Claim = A foreign key to the claim.
cc_claimaccess.Group = The permitted group.  Exactly one of GroupID, UserID, and SecurityZoneID should be non-null.
cc_claimaccess.Permission = The type of permission being granted.
cc_claimaccess.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claimaccess.SecurityZone = The permitted security zone.  Exactly one of GroupID, UserID, and SecurityZoneID should be non-null.
cc_claimaccess.User = The permitted user.  Exactly one of GroupID, UserID, and SecurityZoneID should be non-null.

cc_claimagglimitrpt = Represents denormalized aggregate limit used calculations (i.e., the amount of the limit that has been used to date) for a
    claim as related to a given aggregate limit and optionally, for a coverageline.
  

cc_claimagglimitrpt.ID = Internally managed primary key
cc_claimagglimitrpt.AggLimitCalcCriteria = Exclusions for limit used calculations
cc_claimagglimitrpt.ClaimInfo = ClaimInfo with which the aggregate limit is associated.
cc_claimagglimitrpt.CoverageLine = The associated coverage line.
cc_claimagglimitrpt.CreateTime = Timestamp when the object was created
cc_claimagglimitrpt.CreateUser = User who created the object
cc_claimagglimitrpt.ErodingPaymentTotal = The total amount of eroding payment transactions from this claim that apply to the aggregate limit.
cc_claimagglimitrpt.FutureErodingPaymentTotal = The total amount of future eroding payment transactions from this claim that apply to the aggregate limit.
cc_claimagglimitrpt.FutureNonErodingPaymentTotal = The total amount of future non-eroding payment transactions transactions from this claim that apply to the aggregate limit.
cc_claimagglimitrpt.LimitType = Aggregate limit type: by loss date or by reported date
cc_claimagglimitrpt.LimitUsed = The amount of the limit that has been used that is tracked within ClaimCenter.
cc_claimagglimitrpt.NonErodingPaymentTotal = The total amount of non-eroding payment transactions from this claim that apply to the aggregate limit.
cc_claimagglimitrpt.PolicyPeriod = PolicyPeriod with which the aggregate limit is associated. This property exists because CoverageLine may be null; when CoverageLine is not null, it must equal CoverageLine.PolicyPeriodID
cc_claimagglimitrpt.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claimagglimitrpt.RecoveryReserveTotal = The total amount of recovery reserve transactions from this claim that apply to the aggregate limit.
cc_claimagglimitrpt.RecoveryTotal = The total amount of recovery transactions from this claim that apply to the aggregate limit.
cc_claimagglimitrpt.ReserveTotal = The total amount of reserve transactions from this claim that apply to the aggregate limit.
cc_claimagglimitrpt.UpdateTime = Timestamp when the object was last updated
cc_claimagglimitrpt.UpdateUser = User who last updated the object
cc_claimagglimitrpt.Valid = Indicates if the limit used is up-to-date.
cc_claimagglimitrpt.ValueType = Aggregate type: limit or deductible.

cc_claimassoc = <p>
In a Claim purge, an Association will only be purged if it has no remaining Claims in it.      
      
    

cc_claimassoc.ID = Internally managed primary key
cc_claimassoc.ClaimAssocType = Type of the association among the claims.
cc_claimassoc.CreateTime = Timestamp when the object was created
cc_claimassoc.CreateUser = User who created the object
cc_claimassoc.Description = Description of the association.
cc_claimassoc.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_claimassoc.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claimassoc.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_claimassoc.Title = A brief title for the association.
cc_claimassoc.UpdateTime = Timestamp when the object was last updated
cc_claimassoc.UpdateUser = User who last updated the object
cc_claimassoc.ClaimsInAssoc = The claims belonging to this association.

cc_claimcontact = 
        Links a contact to a claim. This entity also contains an array to the roles played by the contact on the claim.
        Changes to the related Contact or the Roles array triggers validation.
     

    

cc_claimcontact.ID = Internally managed primary key
cc_claimcontact.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_claimcontact.BenefitEndDate = Benefit end date
cc_claimcontact.BenefitEndReason = Reason benefits ended (deprecated in favor of BenefitEndReasonType)
cc_claimcontact.BenefitEndReasonType = Reason benefits ended - typelist
cc_claimcontact.Claim = Claim with which the contact is associated.
cc_claimcontact.ClaimantFlag = Denorm field indicating whether or not this ClaimContact has the role of claimant.
cc_claimcontact.Contact = Contact associated with the claim or exposure.
cc_claimcontact.ContactNameDenorm = denormalization of contact name, to speed up search for claim by contact name
cc_claimcontact.ContactProhibited = Indicates whether contact is prohibited with this contact.
cc_claimcontact.ContactValidFrom = Start Date when this Contact is valid on this claim 
cc_claimcontact.ContactValidTo = Date when this Contact is no longer valid on this claim
cc_claimcontact.CreateTime = Timestamp when the object was created
cc_claimcontact.CreateUser = User who created the object
cc_claimcontact.DependentType = Type of dependent - spouse, child etc.
cc_claimcontact.EssentialServiceType = Type essential service provided by contact
cc_claimcontact.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_claimcontact.PersonFirstNameDenorm = denormalization of person first name, to speed up search for claim by person name
cc_claimcontact.PersonLastNameDenorm = denormalization of person last name, to speed up search for claim by person name
cc_claimcontact.Policy = Policy with which the contact is associated.
cc_claimcontact.ProviderType = Provider type
cc_claimcontact.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claimcontact.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_claimcontact.Service = The service provided by contact
cc_claimcontact.UpdateTime = Timestamp when the object was last updated
cc_claimcontact.UpdateUser = User who last updated the object
cc_claimcontact.Roles = The roles that this claimcontact has.

cc_claimcontactrole = 
        Links claim contacts with a role on the claim. The ClaimContactRole tracks which Incident and Exposure (if any)
        corresponds with the contact.
      
    

cc_claimcontactrole.ID = Internally managed primary key
cc_claimcontactrole.Active = True if this contact is still active in its role for this claim or exposure.
cc_claimcontactrole.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_claimcontactrole.ClaimContact = The claimcontact with the given role.
cc_claimcontactrole.Comments = Comments about this role on the claimcontact.
cc_claimcontactrole.CoveredPartyType = The type of covered party.
cc_claimcontactrole.CreateTime = Timestamp when the object was created
cc_claimcontactrole.CreateUser = User who created the object
cc_claimcontactrole.Evaluation = The evaluation with which the contact is associated, if any.
cc_claimcontactrole.Exposure = The exposure with which the contact is associated, if any.
cc_claimcontactrole.Incident = The incident with which the contact is associated, if any.
cc_claimcontactrole.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_claimcontactrole.Matter = The legal matter with which the contact is associated, if any.
cc_claimcontactrole.Negotiation = The negotiation with which the contact is associated, if any.
cc_claimcontactrole.PartyNumber = Number of the party in the list of parties.
cc_claimcontactrole.Policy = The policy with which the contact is associated, if any.
cc_claimcontactrole.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claimcontactrole.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_claimcontactrole.Role = The role of the contact in relation to the claim, exposure, or matter.
cc_claimcontactrole.UpdateTime = Timestamp when the object was last updated
cc_claimcontactrole.UpdateUser = User who last updated the object
cc_claimcontactrole.WitnessPerspective = WitnessPerspective
cc_claimcontactrole.WitnessPosition = Where was the witness when the accident happened?
cc_claimcontactrole.WitnessStatementInd = Indicator for whether witness gave statement or not

cc_claimexception = 
        Records the action of the claim exception monitor. Each Claim in the system has, at most, one ClaimException instance
        indicating the last time the claim exception rules ran on the claim.
       
    

cc_claimexception.ID = Internally managed primary key
cc_claimexception.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_claimexception.Claim = A foreign key to the claim.
cc_claimexception.ExCheckTime = The last time at which claim exception rules were run on the claim.
cc_claimexception.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_claimisomatchreport = 
      Details of a match for a Claim returned by the Insurance Office Services (ISO) ClaimSearch service.
      If ISO ClaimSearch integration is enabled then descriptions of new or changed Claims are sent to the
      ISO ClaimSearch service to see if any suspiciously similar claims have been filed at other companies.
      If ISO ClaimSearch returns a "match report", indicating that one or more similar claims have been
      filed, then the report is added to the claim as a document and the most important information from
      each reported match is stored in an ISOMatchReport entity.
    

cc_claimisomatchreport.ID = Internally managed primary key
cc_claimisomatchreport.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_claimisomatchreport.Claim = The related claim.
cc_claimisomatchreport.ClaimNumber = Claim number of matching claim.
cc_claimisomatchreport.CreateTime = Timestamp when the object was created
cc_claimisomatchreport.CreateUser = User who created the object
cc_claimisomatchreport.DateOfLoss = Loss date of matching claim.
cc_claimisomatchreport.InsurerAddress1 = 1st line of insuring company address.
cc_claimisomatchreport.InsurerAddress2 = 2nd line of insuring company address.
cc_claimisomatchreport.InsurerAddress3 = 3rd line of insuring company address.
cc_claimisomatchreport.InsurerAddressCity = City of insuring company address.
cc_claimisomatchreport.InsurerAddressPostalCode = Postal code of insuring company address.
cc_claimisomatchreport.InsurerAddressState = State of insuring company address.
cc_claimisomatchreport.InsurerPhone = Phone number of insuring company.
cc_claimisomatchreport.InsuringCompany = Insuring company of matching claim.
cc_claimisomatchreport.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_claimisomatchreport.MatchReasons = Reasons why claim/exposure matched at ISO.
cc_claimisomatchreport.PolicyNumber = Policy number of matching claim.
cc_claimisomatchreport.PolicyType = Policy type of matching claim.
cc_claimisomatchreport.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claimisomatchreport.ReceivedDate = Time match report was received.
cc_claimisomatchreport.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_claimisomatchreport.UpdateTime = Timestamp when the object was last updated
cc_claimisomatchreport.UpdateUser = User who last updated the object

cc_claiminassoc = 
Links a {@link Claim} with a {@link ClaimAssociation}. Each ClaimAssociation will contain two or more Claims, via ClaimInAssociation entities.
       
     

cc_claiminassoc.ID = Internally managed primary key
cc_claiminassoc.ClaimAssociation = ClaimAssociation which contains the Claim.
cc_claiminassoc.ClaimInfo = ClaimInfo that belongs to the ClaimAssociation.
cc_claiminassoc.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_claiminassoc.PrimaryClaim = True if the given Claim is the primary Claim of the ClaimAssociation.
cc_claiminassoc.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_claimindicator = Claim 

cc_claimindicator.ID = Internally managed primary key
cc_claimindicator.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_claimindicator.Claim = Claim to which this indicator is related.
cc_claimindicator.CreateTime = Timestamp when the object was created
cc_claimindicator.CreateUser = User who created the object
cc_claimindicator.IsOn = Is this indicator on?
cc_claimindicator.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_claimindicator.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claimindicator.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_claimindicator.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_claimindicator.UpdateTime = Timestamp when the object was last updated
cc_claimindicator.UpdateUser = User who last updated the object
cc_claimindicator.WhenOn = Time at which this indicator was set to on, or null if indicator off
cc_claimindicator.NetTotalIncurred = Net Total Incurred

cc_claimindicatortrigger = 
        A type of automated handler trigger whose execution behavior is based on a specified ClaimIndicator and a value for that indicator.  For example, the trigger might be setup so that it will only execute when the FatalityIndicator for a Claim changes to a value of TRUE (i.e., someone associated with the Claim has died).
    

cc_claimindicatortrigger.ID = Internally managed primary key
cc_claimindicatortrigger.AutomatedHandler = 
cc_claimindicatortrigger.ClaimIndicator = The Claim Indicator that can cause this trigger to execute
cc_claimindicatortrigger.CreateTime = Timestamp when the object was created
cc_claimindicatortrigger.CreateUser = User who created the object
cc_claimindicatortrigger.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claimindicatortrigger.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_claimindicatortrigger.TriggeringValue = The value on which to execute this trigger.  If the specified ClaimIndicator changes to this value for a given Claim then this trigger should execute
cc_claimindicatortrigger.UpdateTime = Timestamp when the object was last updated
cc_claimindicatortrigger.UpdateUser = User who last updated the object

cc_claiminfo = 
The stub of the claim that is left behind after the claim is archived. It contains minimal (summary) information about the claim; for example, claim number and loss location. It is also included in claim searches. Because this table is not archived, it has the potential to grow very large; care must be taken not to put too much data in it (for example, a blob) when extending it.
  

cc_claiminfo.ID = Internally managed primary key
cc_claiminfo.Adjuster = Assigned user on Claim
cc_claiminfo.ArchiveDate = When archiving was attempted on the root. Null if we never attempted to archive it.
cc_claiminfo.ArchiveFailure = Short version of the reason for a failure to archive
cc_claiminfo.ArchiveFailureDetails = Full details of archive failure
cc_claiminfo.ArchiveSchemaInfo = Schema version at which the root was archived or null if it was not archived
cc_claiminfo.ArchiveState = The archive state of the graph
cc_claiminfo.AssignedGroup = Assigned group on Claim
cc_claiminfo.Claim = Claim
cc_claiminfo.ClaimNumber = The external identifier of the claim.
cc_claiminfo.CoverageLineMatchDataInfoValid = True for archived claims which have an accurate CoverageLineMatchDataInfo array, false otherwise
cc_claiminfo.CreateTime = Timestamp when the object was created
cc_claiminfo.CreateUser = User who created the object
cc_claiminfo.Currency = The currency for the claim, copied from the claim when the claim is archived. Always null for active claims. May also be null for pre 8.0 archived claims
cc_claiminfo.ExcludedFromArchive = Indicate if this entity should be excluded from archiving
cc_claiminfo.ExcludeReason = Reason for excluding or skipping the entity from archiving. If the ExcludeFromArchive bit is set, this gives the reason for excluding. Else, if this is not null, it is the reason for skipping.
cc_claiminfo.JurisdictionState = The state of jurisdiction. Denormed from claim.JurisdictionState
cc_claiminfo.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_claiminfo.LossDate = Cached LossDate on Claim
cc_claiminfo.LossLocationCode = Location Code denormed from claim.LossLocationCode
cc_claiminfo.NoticeDate = Cached ReportedDate on Claim
cc_claiminfo.PolicyNumber = Number of the policy (generally a string).
cc_claiminfo.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claiminfo.PurgeDate = Date at which the claim should be purged. Configurations can use this field to decide when to mark the claim for purge, and there are sample Claim Closed and Claim Reopened rules to set it. It is not used by the internal purge logic.
cc_claiminfo.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_claiminfo.RootPublicID = The public ID of the root.
cc_claiminfo.UpdateTime = Timestamp when the object was last updated
cc_claiminfo.UpdateUser = User who last updated the object
cc_claiminfo.Access = The access control objects for this claim info.
cc_claiminfo.ClaimAggregateLimitRpts = Denormalized data for this claim per policyperiod.
cc_claiminfo.ClaimInAssociations = All the ClaimInAssociation entities for the Claim.
cc_claiminfo.Contacts = all the cached contacts (insured and claimant) for the archived claim
cc_claiminfo.CoverageLineMatchData = Contains the coverage specifications for which at least one transaction exists on the archived claim. This is used to prevent future aggregate limits from being applied to coverage specifications where an archived claim's transaction would contribute, since it would no longer be possible to calculate the contribution of the archived claim.
cc_claiminfo.PeriodPolicies = Array of PeriodPolicy beans associated with this ClaimInfo - only used internally for getting the PolicyPeriods off a Claim/Policy

cc_claiminfoaccess = Records information about users and groups that are allowed to access an archived claim.

cc_claiminfoaccess.ID = Internally managed primary key
cc_claiminfoaccess.Anyone = Whether this permission should be granted to everyone.  If true then GroupID, UserID, and SecurityZoneID should be null.
cc_claiminfoaccess.ClaimInfo = A foreign key to the claim info.
cc_claiminfoaccess.Group = The permitted group.  Exactly one of GroupID, UserID, and SecurityZoneID should be non-null.
cc_claiminfoaccess.Permission = The type of permission being granted.
cc_claiminfoaccess.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claiminfoaccess.SecurityZone = The permitted security zone.  Exactly one of GroupID, UserID, and SecurityZoneID should be non-null.
cc_claiminfoaccess.User = The permitted user.  Exactly one of GroupID, UserID, and SecurityZoneID should be non-null.

cc_claimmetric = Metrics related to a claim

cc_claimmetric.ID = Internally managed primary key
cc_claimmetric.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_claimmetric.Claim = Claim to which this metric is related.
cc_claimmetric.ClaimMetricCategory = Category of Claim Metric.
cc_claimmetric.CreateTime = Timestamp when the object was created
cc_claimmetric.CreateUser = User who created the object
cc_claimmetric.MetricLimitDenorm = The metric limit for the metric, denormalized from the claim's inital claim metric limits array.
cc_claimmetric.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claimmetric.ReachRedTime = Time the red limit was or will be reached
cc_claimmetric.ReachYellowTime = Time the yellow limit was or will be reached.
cc_claimmetric.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_claimmetric.UpdateTime = Timestamp when the object was last updated
cc_claimmetric.UpdateUser = User who last updated the object
cc_claimmetric.ActivitySkipped = Did the user explicitly skip the initial contact with insured activity?
cc_claimmetric.DecimalValue = Decimal field to store the value.
cc_claimmetric.IntegerValue = Integer field to store the value.
cc_claimmetric.MoneyValue = Money field to store the money value.
cc_claimmetric.NextOverdueTime = Time next activity will become overdue.
cc_claimmetric.PercentValue = Percent field to store the value.
cc_claimmetric.InitialReserve = Initial Reserve Amount of the Claim.
cc_claimmetric.TotalReserveChange = Total Reserve Amount change
cc_claimmetric.IntegerValue = Integer field to store the value.
cc_claimmetric.IsOpen = The value of an open time based metric is now - start time, once closed it has a fixed integer value
cc_claimmetric.Skipped = True if the metric is closed because the normal closing event was skipped.
cc_claimmetric.StartTime = Starting time of the metric.

cc_claimmetriclimit = Limits for metrics related to a claim

cc_claimmetriclimit.ID = Internally managed primary key
cc_claimmetriclimit.AscendingLimitOrder = Boolean field to indicate the direction of comparison for value validation 
cc_claimmetriclimit.ClaimMetricCategory = Category of this claim metric limit, corresponds to category of metric.
cc_claimmetriclimit.ClaimMetricType = Type of claim metric to which this limit applies.
cc_claimmetriclimit.ClaimTier = Claim tier to which this limit applies, or null if this is a default limit
cc_claimmetriclimit.CreatedGeneration = Generation number at which this limit was created
cc_claimmetriclimit.CreateTime = Timestamp when the object was created
cc_claimmetriclimit.CreateUser = User who created the object
cc_claimmetriclimit.Currency = Currency for this limit, for non money based limits this is always the default currency.
cc_claimmetriclimit.MetricUnit = Units for this type of metric.
cc_claimmetriclimit.PolicyTypeMetricLimits = Back pointer to policy type metric limits object that owns this limit.
cc_claimmetriclimit.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claimmetriclimit.RetiredDate = Date at which this limit was retired, or null if still active.
cc_claimmetriclimit.RetiredGeneration = Generation number at which this limit was retired, or null if still active
cc_claimmetriclimit.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_claimmetriclimit.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_claimmetriclimit.UpdateTime = Timestamp when the object was last updated
cc_claimmetriclimit.UpdateUser = User who last updated the object
cc_claimmetriclimit.DecimalRedValue = Decimal field to store the red value.
cc_claimmetriclimit.DecimalTargetValue = Decimal field to store the target value.
cc_claimmetriclimit.DecimalYellowValue = Decimal field to store the yellow value.
cc_claimmetriclimit.IntegerRedValue = Integer field to store the red value.
cc_claimmetriclimit.IntegerTargetValue = Integer field to store the target value.
cc_claimmetriclimit.IntegerYellowValue = Integer field to store the yellow value.
cc_claimmetriclimit.MoneyRedValue = Money field to store the red value.
cc_claimmetriclimit.MoneyTargetValue = Money field to store the target value.
cc_claimmetriclimit.MoneyYellowValue = Money field to store the yellow value.
cc_claimmetriclimit.PercentRedValue = Percent field to store the red value.
cc_claimmetriclimit.PercentTargetValue = Percent field to store the target value.
cc_claimmetriclimit.PercentYellowValue = Percent field to store the yellow value.

cc_claimmetricrecalctime =     Keeps track of the next time a claim's metrics should be recalculated, plus maintain a generation
    number for the claim metric limits

  

cc_claimmetricrecalctime.ID = Internally managed primary key
cc_claimmetricrecalctime.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_claimmetricrecalctime.Claim = Claim that owns this ClaimMetricRecalculationTime object.
cc_claimmetricrecalctime.CreateTime = Timestamp when the object was created
cc_claimmetricrecalctime.CreateUser = User who created the object
cc_claimmetricrecalctime.LockingColumn = Meaningless column for locking
cc_claimmetricrecalctime.MetricLimitGeneration = Generation number, used to identify the limits for this claim's metrics
cc_claimmetricrecalctime.NextRecalculationTime = The time when the claim metrics should next be recalculated.
cc_claimmetricrecalctime.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claimmetricrecalctime.UpdateTime = Timestamp when the object was last updated
cc_claimmetricrecalctime.UpdateUser = User who last updated the object

cc_claimrpt = Calculated financial values for claims.

cc_claimrpt.ID = Internally managed primary key
cc_claimrpt.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_claimrpt.AvailableReserves = The available reserves on a claim.
cc_claimrpt.AvailableReservesReporting = The available reserves on a claim, in Reporting/Default Currency.
cc_claimrpt.Claim = The claim that the calculations are on.
cc_claimrpt.CreateTime = Timestamp when the object was created
cc_claimrpt.CreateUser = User who created the object
cc_claimrpt.FuturePayments = The future payments total.
cc_claimrpt.FuturePaymentsReporting = The future payments total on a claim, in Reporting/Default Currency.
cc_claimrpt.OpenRecoveryReserves = The open recovery reserves on the claim.
cc_claimrpt.OpenRecoveryReservesReporting = The open recovery reserves on a claim, in Reporting/Default Currency.
cc_claimrpt.OpenReserves = The open reserves.
cc_claimrpt.OpenReservesReporting = The open reserves on a claim, in Reporting/Default Currency.
cc_claimrpt.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claimrpt.RemainingReserves = The remaining reserves on a claim.
cc_claimrpt.RemainingReservesReporting = The remaining reserves on a claim, in Reporting/Default Currency.
cc_claimrpt.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_claimrpt.TotalPayments = The total payments.
cc_claimrpt.TotalPaymentsReporting = The total payments on a claim, in Reporting/Default Currency.
cc_claimrpt.TotalRecoveries = The total recoveries on a claim.
cc_claimrpt.TotalRecoveriesReporting = The total recoveries on a claim, in Reporting/Default Currency.
cc_claimrpt.UpdateTime = Timestamp when the object was last updated
cc_claimrpt.UpdateUser = User who last updated the object

cc_claimsnapshot = 
        Captures the first notice of loss (FNOL) data for a Claim. A ClaimSnapshot stores all the data for an FNOL as text string.
        This text contains an XML description. The format of the XML is version-dependent -- meaning there may be XML structure
        differences between ClaimCenter versions.
      
    

cc_claimsnapshot.ID = Internally managed primary key
cc_claimsnapshot.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_claimsnapshot.Claim = Main Claim object whose snapshot is being stored.
cc_claimsnapshot.ClaimData = The ClaimData object, stored as XML.
cc_claimsnapshot.Compressed = Indicates whether or not the claim data is compressed.
cc_claimsnapshot.CreateTime = Timestamp when the object was created
cc_claimsnapshot.CreateUser = User who created the object
cc_claimsnapshot.EncryptionVersion = The version of encryption
cc_claimsnapshot.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claimsnapshot.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_claimsnapshot.SnapshotDate = Date on which this snapshot was created.
cc_claimsnapshot.UpdateTime = Timestamp when the object was last updated
cc_claimsnapshot.UpdateUser = User who last updated the object

cc_claimsynchst = <p>Represents the synchronization state of a <code>Claim</code> with respect to a particular <code>MessageSink</code>.
As part of the work of integrating Guidewire application with other external and/or legacy systems, <code>MessageSink</code>
objects are set up to receive messages and update those systems to reflect the new state of the <code>Claim</code> in the system.</p>
<p>
Due to the asynchronous nature of messaging, those messages may not be transmitted immeditately, so the <code>ClaimSynchState</code>
entity exists to track whether the external system represented by a particular <code>MessageSink</code> can be considered to
be up-to-date with the system changes.</p><p>
See {@link com.guidewire.pl.system.typelist.tl.SynchState} for the available synchronization states.
</p>
@see Claim#getClaimSynchStates
      
    

cc_claimsynchst.ID = Internally managed primary key
cc_claimsynchst.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_claimsynchst.Claim = The Claim to which the synchronization state applies.
cc_claimsynchst.MessageSink = Identifies the message sink to which the synchronization state applies.
cc_claimsynchst.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claimsynchst.SynchState = The synchronization state of the given Claim with respect to the given message sink.

cc_claimtext = 
        Stores long text descriptions associated with a Claim. For example, a medical diagnosis for a Workmen's Compensation
        claim is type of ClaimText. Changes to these text descriptions triggers validation.
      
    

cc_claimtext.ID = Internally managed primary key
cc_claimtext.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_claimtext.Claim = Related claim.
cc_claimtext.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_claimtext.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_claimtext.Text = Text field contents
cc_claimtext.TextType = Meaning of the text field.

cc_validationworkitem = 
        Represents a unit of validation work pending for a claim. Claims are bulk-validated using the distributed work
        queue. A ClaimValidationWorkItem entity is created for each Claim to be validated and the queue worker threads
        process work items as they become available.
      
    

cc_validationworkitem.ID = Internally managed primary key
cc_validationworkitem.Attempts = 
cc_validationworkitem.AvailableSince = The time after which the work item can be tried. Must be null on failed work items
cc_validationworkitem.CheckedOutBy = 
cc_validationworkitem.Claim = The claim to be validated.
cc_validationworkitem.CreationTime = 
cc_validationworkitem.Exception = Stack trace of the exception
cc_validationworkitem.LastUpdateTime = 
cc_validationworkitem.Priority = 
cc_validationworkitem.ProcessHistoryID = The writer batch job that created this workitem (ProcessHistory).
cc_validationworkitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_validationworkitem.Status = Status of this workitem.

cc_workcomp = 
        Stores worker's compensation information related to a claim.
  

cc_workcomp.ID = Internally managed primary key
cc_workcomp.AccidentPremises = A code to indicate the premises where the accident occurred.
cc_workcomp.ActivityPerformed = Field to describe the specific activity the injured worker was performing.
cc_workcomp.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_workcomp.ClassCodeByLocation = Is Class Code filtered by Location
cc_workcomp.Compensable = Indicates status of the compensability decision
cc_workcomp.CreateTime = Timestamp when the object was created
cc_workcomp.CreateUser = User who created the object
cc_workcomp.DateOfEmployeeRepresentation = Date Claim Administrator Notified of Employee Representation
cc_workcomp.DeathReport = True if this claim has a report of death of the injured worker.
cc_workcomp.DiscontinuedFringeBenefits = The amount of non-salary remuneration which the employer has discontinued as applicable to the calculation of benefits per the jurisdiction.
cc_workcomp.EmployerLiability = True if this claim has a possible Employer's Liability aspect.
cc_workcomp.EquipmentUsed = Field to describe the equipment, materials or chemicals the employee was using when event or exposure occurred.
cc_workcomp.FullDenialEffectiveDate = The date the compensability Decision (for entire claim) was set to Denied.
cc_workcomp.IllnessRelatedToExposure = Is claim being made for illness related to chemical or material exposure?
cc_workcomp.InitialTreatment = Initial Treatment
cc_workcomp.InsuredReportNumber = A number assigned by the insured to identify a specific claim. If this data is included on any FROI/SROI transaction, it should be returned on the transaction’s acknowledgment regardless of whether it is a data element collected by the jurisdiction.
cc_workcomp.JurisdictionClaimNumber = Jurisdiction Claim Number will be filled once received by the Jurisdiction.
cc_workcomp.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_workcomp.MedicalReport = True if this is claim has a report that the injured worker requires Medical treatment.
cc_workcomp.MedRecReleaseAuth = An indicator that the employee's written authorization to release medical records related to the injury is on file.
cc_workcomp.PartialDenialReason = Indicates reason for partial denial
cc_workcomp.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_workcomp.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_workcomp.TimeLossReport = True if this is claim has a report that the injured worker will lose time from work.
cc_workcomp.UpdateTime = Timestamp when the object was last updated
cc_workcomp.UpdateUser = User who last updated the object
cc_workcomp.WaitingPeriodApplied = Should the Waiting Period be applied?
cc_workcomp.FullDenialReasons = Compensability full denial reasons when the claim compensibility was set to denied.
cc_workcomp.WaitingPeriodDetails = Used to track the specific days indicated as the Waiting Period on a WC Claim

cc_claimempdata = null

cc_claimempdata.ID = Internally managed primary key
cc_claimempdata.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_claimempdata.ForeignEntity = 
cc_claimempdata.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_claimempdata.Owner = 
cc_claimempdata.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_classcode = Employment class code (for workers' comp only).

cc_classcode.ID = Internally managed primary key
cc_classcode.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_classcode.Code = Class code.
cc_classcode.Comments = Other notes on the class code.
cc_classcode.CreateTime = Timestamp when the object was created
cc_classcode.CreateUser = User who created the object
cc_classcode.Description = Description of the class code.
cc_classcode.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_classcode.Policy = Policy with which the class code is associated.
cc_classcode.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_classcode.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_classcode.UpdateTime = Timestamp when the object was last updated
cc_classcode.UpdateUser = User who last updated the object

cc_classificationcondition = Filtering condition for classifications

cc_classificationcondition.ID = Internally managed primary key
cc_classificationcondition.CreateTime = Timestamp when the object was created
cc_classificationcondition.CreateUser = User who created the object
cc_classificationcondition.IncludeAll = flag determining if all entities or only selected few are considered by weight filter
cc_classificationcondition.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_classificationcondition.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_classificationcondition.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_classificationcondition.UpdateTime = Timestamp when the object was last updated
cc_classificationcondition.UpdateUser = User who last updated the object
cc_classificationcondition.WorkloadClassification = Classification which this condition is related.
cc_classificationcondition.ConditionFilters = 
cc_classificationcondition.ConditionFilters = 
cc_classificationcondition.ConditionFilters = 
cc_classificationcondition.ConditionFilters = 
cc_classificationcondition.ConditionFilters = 
cc_classificationcondition.ConditionFilters = 

cc_clobcoldatadist = Stores bean version data distributions.

cc_clobcoldatadist.ID = Internally managed primary key
cc_clobcoldatadist.AverageLength = Average length of blob values.
cc_clobcoldatadist.ClobColName = Clob column name.
cc_clobcoldatadist.MaximumLength = Maximum length of blob values.
cc_clobcoldatadist.MinimumLength = Minimum length of blob values.
cc_clobcoldatadist.NumNonNull = Count of # of non null values.
cc_clobcoldatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_clobcoldatadist.TableDataDist = TableDataDist for this object.

cc_clustermemberdata = null

cc_clustermemberdata.ID = Internally managed primary key
cc_clustermemberdata.BgTasksStopped = Time background tasks stopped
cc_clustermemberdata.Build = Build and schema version string
cc_clustermemberdata.ConnectionStarted = Time connection started
cc_clustermemberdata.ConnectionStopped = Time connection stopped
cc_clustermemberdata.Data = Data
cc_clustermemberdata.Env = Env value
cc_clustermemberdata.LastUpdate = Last update
cc_clustermemberdata.LogicalName = Node logical name
cc_clustermemberdata.PlannedShutdownInitiated = Time planned shutdown initiated
cc_clustermemberdata.PlannedShutdownTime = Time shutdown planned
cc_clustermemberdata.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_clustermemberdata.Roles = Server roles
cc_clustermemberdata.RunLevel = Run level
cc_clustermemberdata.ServerId = Server ID
cc_clustermemberdata.ServerStarted = Time server started
cc_clustermemberdata.UserSessions = Number of user sessions
cc_clustermemberdata.Uuid = UUID

cc_concurrentempl = Stores details of an employee's concurrent employment for Workers' Compensation claim.

cc_concurrentempl.ID = Internally managed primary key
cc_concurrentempl.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_concurrentempl.Claim = The foreign key to the claim.
cc_concurrentempl.CompanyName = Name of employer company.
cc_concurrentempl.ContactNumber = Contact number during employment
cc_concurrentempl.CreateTime = Timestamp when the object was created
cc_concurrentempl.CreateUser = User who created the object
cc_concurrentempl.EndDate = End date of employment
cc_concurrentempl.FullTime = Full time employment?
cc_concurrentempl.JobTitle = Job title.
cc_concurrentempl.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_concurrentempl.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_concurrentempl.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_concurrentempl.StartDate = Start date of employment
cc_concurrentempl.UpdateTime = Timestamp when the object was last updated
cc_concurrentempl.UpdateUser = User who last updated the object
cc_concurrentempl.WeeklyWage = Weekly wage during employment

cc_conditionfilter = Condition Filter

cc_conditionfilter.ID = Internally managed primary key
cc_conditionfilter.Condition = Classification condition associated with this filter
cc_conditionfilter.CreateTime = Timestamp when the object was created
cc_conditionfilter.CreateUser = User who created the object
cc_conditionfilter.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_conditionfilter.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_conditionfilter.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_conditionfilter.UpdateTime = Timestamp when the object was last updated
cc_conditionfilter.UpdateUser = User who last updated the object
cc_conditionfilter.CustomerServiceTier = Classification condition filter by Service Tier
cc_conditionfilter.CoverageSubType = The coverage subtype
cc_conditionfilter.CoverageType = The coverage type
cc_conditionfilter.LossPartyType = The loss party; generally either first or third-party loss.
cc_conditionfilter.IncidentSeverity = Classification condition filter by Incident Severity
cc_conditionfilter.Jurisdiction = Classification condition filter by Jurisdiction. The Jurisdiction must be associated with JurisdictionType.TC_INSURANCE.
cc_conditionfilter.LossCause = LossCause
cc_conditionfilter.Segment = Classification condition filter by Segment

cc_checkerworkitem = Queue of Consistency Checks to run. This is a system-internal entity.

cc_checkerworkitem.ID = Internally managed primary key
cc_checkerworkitem.Attempts = 
cc_checkerworkitem.AvailableSince = The time after which the work item can be tried. Must be null on failed work items
cc_checkerworkitem.CheckedOutBy = 
cc_checkerworkitem.CheckType = 
cc_checkerworkitem.CreationTime = 
cc_checkerworkitem.DBConsistCheckRunID = The reference on DBConsistCheckRun
cc_checkerworkitem.Exception = Stack trace of the exception
cc_checkerworkitem.Fingerprint = Fingerprint of SQL, if not null
cc_checkerworkitem.LastUpdateTime = 
cc_checkerworkitem.Priority = 
cc_checkerworkitem.ProcessHistoryID = The writer batch job that created this workitem (ProcessHistory).
cc_checkerworkitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_checkerworkitem.Status = Status of this workitem.
cc_checkerworkitem.TableName = The table on which to run consistency checks
cc_checkerworkitem.WorkDone = The work item is done flag.
cc_checkerworkitem.WorkItemSetID = The work item set that owns this workitem.

cc_contact = 
        Represents a generic contact like a person or a business. The Contact is a primary object in the
        ClaimCenter system that is used in the management of your company's vendors and the
        participants in a Claim. Contact is an abstract supertype with subtypes such as Person, Company, and Place.
        Guidewire provides an initial hierarchy of Contact types that you can extend.
        From a Contact entity you can reach the expected Contact data such as physical address, phone, and fax
        information. (In general, only the Primary Address is used for location-based functionality like
        Assignment and Geocoding/Proximity Search.) Contact and its subtypes can also contain management-related
        information such as social security number, tax ID, organization type , and so forth.
        Within ClaimCenter, users create Contacts that are associated only with a particular Claim. For example,
        an injured party is a typical claim contact. ClaimCenter does not attempt to determine if a contact
        associated with one claim appears elsewhere on another claim. Thus, any claim contact that users create,
        like an auto body shop, can be a duplicate of one or more other claim contacts associated with different
        claims.
        If ClaimCenter is integrated with Guidewire's ContactManager application, your users can create contacts
        and then access them centrally through the linking feature.Your company can have both centrally
        managed contacts, such as a vendor business, and locally managed contacts, such as an injured
        party.
        To support this behavior, ContactManager and ClaimCenter have matching hierarchies of Contact
        entities, which they can keep synchronized. So, for example, an extension made to a ClaimCenter Contact
        entity should also be made to a ContactManager ABContact entity. See the Contact Management Guide
        for more information about the integration between ClaimCenter and ContactManager.
    

cc_contact.ID = Internally managed primary key
cc_contact.AddressBookUID = Represents the ID of the associated object in Address Book.  Null if the object is not linked to Address Book.
cc_contact.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_contact.AutoSync = A status code to indicate whether this entity allows auto-sync or not. Null means disallow.
cc_contact.CreateTime = Timestamp when the object was created
cc_contact.CreateUser = User who created the object
cc_contact.EmailAddress1 = Primary email address associated with the contact.
cc_contact.EmailAddress2 = Secondary email address associated with the contact.
cc_contact.FaxPhone = Fax number associated with the contact.
cc_contact.FaxPhoneCountry = Fax phone country.
cc_contact.FaxPhoneExtension = Fax phone extension.
cc_contact.HomePhone = Home phone number associated with the contact.
cc_contact.HomePhoneCountry = Home phone country.
cc_contact.HomePhoneExtension = Home phone extension.
cc_contact.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_contact.LoadRelatedContacts = This field is deprecated. It was formerly used to determine whether related contacts should be loaded from the Address Book.
cc_contact.Name = This contact's name.
cc_contact.NameDenorm = denorm field for This contact's name.
cc_contact.NameKanji = This contact's name in kanji (used only for Japanese names and will be null otherwise)
cc_contact.Notes = Notes on this contact.
cc_contact.OrganizationType = Type of organization
cc_contact.PendingLinkMessage = whether the contact link messasge is still pending from ContactManager
cc_contact.PolicySystemId = Identifier for the contact in an external policy system
cc_contact.Preferred = Whether the vendor is a preferred vendor.
cc_contact.PreferredCurrency = The contact's preferred currency.
cc_contact.PrimaryAddress = Primary address associated with the contact.
cc_contact.PrimaryLanguage = The account's preferred language
cc_contact.PrimaryLocale = The account's preferred locale
cc_contact.PrimaryPhone = Primary phone number type for the contact.
cc_contact.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_contact.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_contact.Score = Overall review Score for this Contact
cc_contact.SpecialtyType = Specialty of the doctor
cc_contact.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_contact.TaxID = Tax ID for the contact (SSN or EIN).
cc_contact.TaxStatus = Status of the contact's tax ID; whether it is known or unknown.
cc_contact.UpdateTime = Timestamp when the object was last updated
cc_contact.UpdateUser = User who last updated the object
cc_contact.ValidationLevel = Validation level that this object passed (if any) before it was stored.
cc_contact.VendorNumber = Vendor number for the contact.
cc_contact.VendorType = The company's vendor type.
cc_contact.W9Received = Has W-9 form been received
cc_contact.W9ReceivedDate = W-9 form received date
cc_contact.W9ValidFrom = W-9 valid start date
cc_contact.W9ValidTo = W-9 valid to date
cc_contact.WithholdingRate = The contact's backup withholding rate, or null if backup withholding is not required or is not known to be required.
cc_contact.WorkPhone = Business phone number associated with the contact.
cc_contact.WorkPhoneCountry = Work phone country.
cc_contact.WorkPhoneExtension = Business phone extension.
cc_contact.CategoryScores = List of categories and their average scores, associated with this Contact.
cc_contact.ContactAddresses = Secondary addresses associated with the contact.
cc_contact.EFTRecords = Electronic Funds Transfer data for the contact
cc_contact.OfficialIDs = TaxIDs associated with this contact
cc_contact.Reviews = Reviews for Service Provider Management
cc_contact.SourceRelatedContacts = Contacts that point to this contact.
cc_contact.Tags = List of ContactTags.
cc_contact.TargetRelatedContacts = Contacts that this Contact points to.
cc_contact.AdjudicativeDomain = Adjudicative Domain
cc_contact.AdjudicatorLicense = Adjudicator's business license number.
cc_contact.AttorneyLicense = Attorney's business license number.
cc_contact.AttorneySpecialty = Attorney's specialty
cc_contact.AutoRepairLicense = Auto repair shop business license number
cc_contact.AutoTowingLicense = Auto towing agency business license number
cc_contact.DoctorSpecialty = Doctor's medical specialty
cc_contact.MedicalLicense = Doctor's medical license number.
cc_contact.LawFirmSpecialty = Law firm specialty
cc_contact.VenueType = Type of court.
cc_contact.MedicalOrgSpecialty = Medical specialty
cc_contact.CellPhone = Mobile phone number associated with the contact.
cc_contact.CellPhoneCountry = Mobile phone country.
cc_contact.CellPhoneExtension = Mobile phone extension.
cc_contact.ClaimantIDType = Workers' Comp only. Claimant ID Type
cc_contact.DateOfBirth = Date of birth.
cc_contact.EducationLevel = Workers' Comp only. The highest number of years or equivalency level of formal education completed.
cc_contact.EmployeeSecurityID =  A unique number designated by the jurisdiction to be used in conjunction with or in the place of the Employee ID. If the jurisdiction requires the Employee Security ID, the jurisdiction must return the Employee Security ID in the acknowledgment to promote future reporting of the designated value.
cc_contact.FirstName = First name.
cc_contact.FirstNameDenorm = denorm field for First name.
cc_contact.FirstNameKanji = First name in kanji (used only for Japanese names and will be null otherwise)
cc_contact.FormerName = Person's former name, if any.
cc_contact.Gender = Gender.
cc_contact.GreenCardNumber = Workers' Comp only. Employee Green Card Number
cc_contact.JurisdictionAssignedID = Workers' Comp only. Employee ID Assigned by Jurisdiction
cc_contact.LastName = Last name.
cc_contact.LastNameDenorm = denorm field for Last name.
cc_contact.LastNameKanji = Last name in kanji (used only for Japanese names and will be null otherwise)
cc_contact.LicenseNumber = Driver's license number.
cc_contact.LicenseState = Driver's license jurisdiction.
cc_contact.MaritalStatus = Marital status.
cc_contact.MiddleName = Middle name or initial.
cc_contact.NumDependents = Number of dependents the employee has.
cc_contact.NumDependentsU18 = Number of dependents under 18.
cc_contact.NumDependentsU25 = Number of dependents over 18 and under 25.
cc_contact.Occupation = Occupation.
cc_contact.Particle = Particle, such as 'de', 'von' (used for French names and will be null otherwise)
cc_contact.PassportNumber = Workers' Comp only. Employee Passport Number
cc_contact.Prefix = Prefix for the person's name.
cc_contact.SSNReleaseAuthorized = Workers' Comp only. SSN Release Authorized
cc_contact.Suffix = Suffix for the person's name.
cc_contact.TaxExemptionsEntitled = Workers' Comp only. Tax Exemptions Entitled.
cc_contact.TaxFilingStatus = State-specific field.
cc_contact.VisaNumber = Workers' Comp only. Employee Employment Visa Number
cc_contact.EmployeeNumber = Employee ID number. Applies to user contacts.

cc_contactaddress = <p/>
      This is represented as a many-to-many relationship, although addresses created through the UI will always
      belong uniquely to only one contact.
    

cc_contactaddress.ID = Internally managed primary key
cc_contactaddress.Address = Associated address.
cc_contactaddress.AddressBookUID = The system uses this value when it is integrated with ContactManager and the related contact is linked.  In this case, the ID represents the ID of the corresponding entity in ContactManager. This value is null if the object is not linked.
cc_contactaddress.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_contactaddress.Contact = Associated contact.
cc_contactaddress.ExternalLinkID = The external link ID suggested by CC to CM when linkID is null but has been created in CC. 
cc_contactaddress.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_contactaddress.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_autosyncworkitem = Queue of Contact AddressBookUID to be auto synced. This is a system-internal entity.
     

cc_autosyncworkitem.ID = Internally managed primary key
cc_autosyncworkitem.AddressBookUID = Represents the AddressBookUID to be synced.
cc_autosyncworkitem.Attempts = 
cc_autosyncworkitem.AvailableSince = The time after which the work item can be tried. Must be null on failed work items
cc_autosyncworkitem.CheckedOutBy = 
cc_autosyncworkitem.CreationTime = 
cc_autosyncworkitem.Exception = Stack trace of the exception
cc_autosyncworkitem.LastUpdateTime = 
cc_autosyncworkitem.MaxContactRef = The upper bound for the ID value in the Contact table for this work item
cc_autosyncworkitem.MinContactRef = The lower bound for the ID value in the Contact table for this work item
cc_autosyncworkitem.NewAddressBookUID = Represents the AddressBookUID to replace the contact AddressBookUID with
cc_autosyncworkitem.Priority = 
cc_autosyncworkitem.ProcessHistoryID = The writer batch job that created this workitem (ProcessHistory).
cc_autosyncworkitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_autosyncworkitem.Skip = Should work item be skipped
cc_autosyncworkitem.Status = Status of this workitem.

cc_contactcatsScore = Table linking Contacts to Category Scores

cc_contactcatsScore.ID = Internally managed primary key
cc_contactcatsScore.AddressBookUID = Represents the ID of the associated object in Address Book.  Null if the object is not linked to Address Book.
cc_contactcatsScore.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_contactcatsScore.Contact = Associated Contact.
cc_contactcatsScore.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_contactcatsScore.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_contactcatsScore.ReviewCategory = Category of this Score.
cc_contactcatsScore.Score = 

cc_contactcontact = <p>
      Links <code>Contact</code> objects to other contacts. Each link has a specific relationship. See the <code>ContactRel</code> typelist for
      a list of the possible link relationships. The purpose of this table is to avoid a self-referencing foreign key on
      <code>Contact</code>, and to allow contacts to relate to one another in different ways.</p>
      <p>For example, imagine a <code>ContactContact</code> entity with the following values:</p>
      <ul><li>SourceContactID: ID of Person A</li>
          <li>Relationship: Employer</li>
          <li>RelatedContactID: ID of Company B</li>
      </ul>
      <p>
      Then the relationship between A and B is: Company B is the Employer of Person A.</p>
    

cc_contactcontact.ID = Internally managed primary key
cc_contactcontact.AddressBookUID = The system uses this value when it is integrated with ContactManager and the related contact is linked.  In this case, the ID represents the ID of the corresponding entity in ContactManager. This value is null if the object is not linked.
cc_contactcontact.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_contactcontact.ExternalLinkID = The external link ID suggested by CC to CM when linkID is null but has been created in CC. 
cc_contactcontact.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_contactcontact.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_contactcontact.RelatedContact = "RelatedContactID" is the "Relationship" of "SourceContactID".
cc_contactcontact.Relationship = Relationship between the two contacts.
cc_contactcontact.SourceContact = "SourceContactID" has "RelatedContactID" as "Relationship".

cc_contactfingerprint = ContactFingerprint

cc_contactfingerprint.ID = Internally managed primary key
cc_contactfingerprint.AddressBookFingerprint = Fingerprint allowing for a convertible object to check its last sync status locally.
cc_contactfingerprint.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_contactfingerprint.Contact = 
cc_contactfingerprint.CreateTime = Timestamp when the object was created
cc_contactfingerprint.CreateUser = User who created the object
cc_contactfingerprint.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_contactfingerprint.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_contactfingerprint.UpdateTime = Timestamp when the object was last updated
cc_contactfingerprint.UpdateUser = User who last updated the object

cc_contactinfo = contact denormed fields

cc_contactinfo.ID = Internally managed primary key
cc_contactinfo.ClaimInfo = The contact for the archived claim
cc_contactinfo.CreateTime = Timestamp when the object was created
cc_contactinfo.CreateUser = User who created the object
cc_contactinfo.FirstName = First name on Person.
cc_contactinfo.FirstNameDenorm = denorm field for First name on Person.
cc_contactinfo.FirstNameKanji = First name in kanji (used only for Japanese names and will be null otherwise)
cc_contactinfo.LastName = Last name on Person.
cc_contactinfo.LastNameDenorm = denorm field for Last name on Person.
cc_contactinfo.LastNameKanji = Last name in kanji (used only for Japanese names and will be null otherwise)
cc_contactinfo.MiddleName = Middle name or initial.
cc_contactinfo.Name = This contact's name on Contact or Last name on person.
cc_contactinfo.NameDenorm = denorm field for This contact's name on Contact or Last name on person.
cc_contactinfo.NameKanji = This contact's name in kanji (used only for Japanese names and will be null otherwise)
cc_contactinfo.Particle = Particle, such as 'de', 'von' (used for French names and will be null otherwise)
cc_contactinfo.Prefix = Prefix for the person's name.
cc_contactinfo.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_contactinfo.Role = The role of the contact in relation to the claim, exposure, or matter.
cc_contactinfo.Suffix = Suffix for the person's name.
cc_contactinfo.TaxID = Tax ID for the contact (SSN or EIN) on contact.
cc_contactinfo.UpdateTime = Timestamp when the object was last updated
cc_contactinfo.UpdateUser = User who last updated the object

cc_contactorigvalue = Saves the orig values xml from ContactManager for comparison in FNOL

cc_contactorigvalue.ID = Internally managed primary key
cc_contactorigvalue.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_contactorigvalue.Contact = 
cc_contactorigvalue.CreateTime = Timestamp when the object was created
cc_contactorigvalue.CreateUser = User who created the object
cc_contactorigvalue.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_contactorigvalue.OrigType = the original values XMLElement type for the contact
cc_contactorigvalue.OrigValue = the original values XML from CM saved for the contact
cc_contactorigvalue.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_contactorigvalue.UpdateTime = Timestamp when the object was last updated
cc_contactorigvalue.UpdateUser = User who last updated the object

cc_contactretireworkitem = Queue of Contacts which should be checked to see if they can be retired. Work items are recorded as the ID value of (ClaimCenter) Contact entities. This is a system-internal entity.
    

cc_contactretireworkitem.ID = Internally managed primary key
cc_contactretireworkitem.Attempts = 
cc_contactretireworkitem.AvailableSince = The time after which the work item can be tried. Must be null on failed work items
cc_contactretireworkitem.CheckedOutBy = 
cc_contactretireworkitem.ContactPublicID = The public ID of the Contact we want to retire.
cc_contactretireworkitem.CreationTime = 
cc_contactretireworkitem.Exception = Stack trace of the exception
cc_contactretireworkitem.LastUpdateTime = 
cc_contactretireworkitem.Priority = 
cc_contactretireworkitem.ProcessHistoryID = The writer batch job that created this workitem (ProcessHistory).
cc_contactretireworkitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_contactretireworkitem.Status = Status of this workitem.

cc_contacttag = ContactTag

cc_contacttag.ID = Internally managed primary key
cc_contacttag.AddressBookUID = The system uses this value when it is integrated with ContactManager and the related contact is linked.  In this case, the ID represents the ID of the corresponding entity in ContactManager. This value is null if the object is not linked.
cc_contacttag.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_contacttag.Contact = Contact
cc_contacttag.CreateTime = Timestamp when the object was created
cc_contacttag.CreateUser = User who created the object
cc_contacttag.ExternalLinkID = The external link ID suggested by CC to CM when linkID is null but has been created in CC. 
cc_contacttag.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_contacttag.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_contacttag.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_contacttag.Type = Type of this ContactTag.
cc_contacttag.UpdateTime = Timestamp when the object was last updated
cc_contacttag.UpdateUser = User who last updated the object

cc_contribfactor = 
          Details a variable which played a part in the cause of a loss. ContribFactor entities relate to a single Claim.
        
      

cc_contribfactor.ID = Internally managed primary key
cc_contribfactor.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_contribfactor.Claim = 
cc_contribfactor.ContFactText = When other is selected Text will display to be filled in
cc_contribfactor.CreateTime = Timestamp when the object was created
cc_contribfactor.CreateUser = User who created the object
cc_contribfactor.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_contribfactor.PriContributingFactors = 
cc_contribfactor.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_contribfactor.ResContributingFactors = 
cc_contribfactor.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_contribfactor.SecContributingFactors = 
cc_contribfactor.UpdateTime = Timestamp when the object was last updated
cc_contribfactor.UpdateUser = User who last updated the object

cc_coverageterms = Additional terms and conditions that may be specified on a Coverage.

cc_coverageterms.ID = Internally managed primary key
cc_coverageterms.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_coverageterms.Coverage = Coverage to which the coverage term belongs.
cc_coverageterms.CovTermOrder = Ordering for the cov term
cc_coverageterms.CovTermPattern = Coverage term pattern
cc_coverageterms.CreateTime = Timestamp when the object was created
cc_coverageterms.CreateUser = User who created the object
cc_coverageterms.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_coverageterms.ModelAggregation = Indicates that the CovTerm is applicable to a subset or a subtype of the coverage
cc_coverageterms.ModelRestriction = Indicates at what level of an event that the CovTerm is applicable to such as per claimant or per accident
cc_coverageterms.PolicySystemId = Identifier for the coverage term in an external policy system
cc_coverageterms.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_coverageterms.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_coverageterms.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_coverageterms.UpdateTime = Timestamp when the object was last updated
cc_coverageterms.UpdateUser = User who last updated the object
cc_coverageterms.Code = Classification code
cc_coverageterms.Description = Classification description
cc_coverageterms.FinancialAmount = Financial amount
cc_coverageterms.NumericValue = Numeric value
cc_coverageterms.Units = Coverage term units

cc_coverage = 
Abstract superclass describing a specific coverage on a policy. Contains
information about deductibles, limits, and effective dates of the coverage. A
policy may have multiple coverages.
    

cc_coverage.ID = Internally managed primary key
cc_coverage.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_coverage.CreateTime = Timestamp when the object was created
cc_coverage.CreateUser = User who created the object
cc_coverage.Currency = The currency of the coverage. Once set, this value can be updated only when CoverageMethods.allowCurrencyChange() returns true.
cc_coverage.Deductible = Deductible for this coverage.
cc_coverage.EffectiveDate = Date on which the coverage is effective.
cc_coverage.ExpirationDate = Date on which the coverage is expired.
cc_coverage.ExposureLimit = Dollar limit per exposure.
cc_coverage.IncidentLimit = Dollar limit per incident.
cc_coverage.LimitsIndicator = Whether a coverage type can be combined.
cc_coverage.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_coverage.Notes = Additional notes on this coverage.
cc_coverage.Policy = Policy to which the coverage belongs.
cc_coverage.PolicySystemId = Identifier for the coverage in an external policy system
cc_coverage.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_coverage.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_coverage.State = The state in which this coverage is applicable, if state-specific.
cc_coverage.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_coverage.Type = Type of coverage.
cc_coverage.UpdateTime = Timestamp when the object was last updated
cc_coverage.UpdateUser = User who last updated the object
cc_coverage.CovTerms = Additional terms and conditions associated with this Coverage.
cc_coverage.Coinsurance = Co-insurance percentage.
cc_coverage.CoverageBasis = Coverage basis.
cc_coverage.RiskUnit = RiskUnit associated with the coverage.
cc_coverage.ClaimAggLimit = The per incident dollar limit for all PIP coverage.
cc_coverage.NonmedAggLimit = The dollar limit for all PIP Non-Medical coverage.
cc_coverage.PersonAggLimit = The per person dollar limit for all PIP coverage.
cc_coverage.ReplaceAggLimit = The dollar limit for all PIP Lost Wage and Replacement Services coverage.

cc_coverageline = A representation of a coverage based on the coverage's subtype, type, and any associated exposure unit.

cc_coverageline.ID = Internally managed primary key
cc_coverageline.CoverageSubtype = The subclass type of the Coverage, e.g., PolicyCoverage, VehicleCoverage, or PropertyCoverage. This is unrelated to the CoverageSubtype typelist.
cc_coverageline.CoverageType = Coverage type.
cc_coverageline.CreateTime = Timestamp when the object was created
cc_coverageline.CreateUser = User who created the object
cc_coverageline.ExposureUnitNumber = Number of the risk unit for the coverage on the policy.
cc_coverageline.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_coverageline.LOBCoverageSubtype = The CoverageSubtype (from the LOB) that an exposure must have in order to match this CoverageLine
cc_coverageline.PolicyPeriod = PolicyPeriod with which this CoverageLine is associated. It should be the same PolicyPeriod that is referred to by the AggregateLimits that are linked to this CoverageLine (through CoverageLineLimit entities).
cc_coverageline.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_coverageline.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_coverageline.RUPolicySystemId = Identifier for the covered risk unit in an external policy system.  Only applies to those CoverageLines which point to a VehicleCoverage, or PropertyCoverage, or any coverage which extends from RUCoverage and therefore has a RiskUnit with (possibly) a policySystemID.
cc_coverageline.UpdateTime = Timestamp when the object was last updated
cc_coverageline.UpdateUser = User who last updated the object
cc_coverageline.CoverageLineLimits = Coverage line limits that join this coverage line to an aggregate limit. A single coverage line can be shared by more than one aggregate limit

cc_coveragelimit = Links coverages to aggregate limits.

cc_coveragelimit.ID = Internally managed primary key
cc_coveragelimit.AggregateLimit = The associated aggregate limit.
cc_coveragelimit.CoverageLine = The associated coverage line.
cc_coveragelimit.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_coveragelimit.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_coveragelinematchdatainfo = Preserves a coverage specification for which at least one transaction exists on the archived claim

cc_coveragelinematchdatainfo.ID = Internally managed primary key
cc_coveragelinematchdatainfo.ClaimInfo = The archived claim
cc_coveragelinematchdatainfo.CoverageIntSubtype = The subclass type of the Coverage, e.g., PolicyCoverage, VehicleCoverage, or PropertyCoverage. This is unrelated to the CoverageSubtype typelist.  Also known as CoverageIntSubtype
cc_coveragelinematchdatainfo.CoverageType = Coverage type.
cc_coveragelinematchdatainfo.CreateTime = Timestamp when the object was created
cc_coveragelinematchdatainfo.CreateUser = User who created the object
cc_coveragelinematchdatainfo.LOBCoverageSubtype = The CoverageSubtype; This is drawn from the CoverageSubtype typelist.
cc_coveragelinematchdatainfo.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_coveragelinematchdatainfo.RiskUnitNumber = Number of the risk unit for the coverage on the policy.
cc_coveragelinematchdatainfo.RUPolicySystemId = Identifier for the covered risk unit in an external policy system.  Only applies to those CoverageLines which point to a VehicleCoverage, or PropertyCoverage, or any coverage which extends from RUCoverage and therefore has a RiskUnit with (possibly) a policySystemID.
cc_coveragelinematchdatainfo.UpdateTime = Timestamp when the object was last updated
cc_coveragelinematchdatainfo.UpdateUser = User who last updated the object

cc_credential = 
      Maintains a user's system level-security identification. Each user has a corresponding Credential object. This entity
      maintains information related to authorization and authentication on the system. A Credential holds both the user's
      password and controls whether or not the user is active or not. This entity also tracks login attempts.
      
    

cc_credential.ID = Internally managed primary key
cc_credential.Active = Whether this credential is active. Inactive credentials are not allowed to log in.
cc_credential.CreateTime = Timestamp when the object was created
cc_credential.CreateUser = User who created the object
cc_credential.FailedAttempts = The number of consecutive failed login attempts, or 0 if the last login attempt was successful.
cc_credential.FailedTime = The time the last failed login attempt was made, or null if the last login attempt was successful.
cc_credential.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_credential.LockDate = The time at which this credential was locked, or null if the credential is not locked.  A user cannot log in if their credential was locked within the lockout interval, which is paramaterizeable.
cc_credential.Password = User password.
cc_credential.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_credential.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_credential.UpdateTime = Timestamp when the object was last updated
cc_credential.UpdateUser = User who last updated the object
cc_credential.UserName = User login name.
cc_credential.UserNameDenorm = denorm field for User login name.

cc_exprval = null

cc_exprval.ID = Internally managed primary key
cc_exprval.BooleanValue = 
cc_exprval.CreateTime = Timestamp when the object was created
cc_exprval.CreateUser = User who created the object
cc_exprval.DateTimeValue = 
cc_exprval.DecimalValue = 
cc_exprval.EnumType = 
cc_exprval.EnumValue = 
cc_exprval.IntegerValue = 
cc_exprval.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_exprval.LockingColumn = Meaningless column for locking
cc_exprval.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_exprval.RangeFlag = Flag for range values
cc_exprval.StringValue = 
cc_exprval.UpdateTime = Timestamp when the object was last updated
cc_exprval.UpdateUser = User who last updated the object
cc_exprval.ValueOwner = 

cc_customddcolumns = Stores ordered column names for custom data distribution request.

cc_customddcolumns.ID = Internally managed primary key
cc_customddcolumns.ColumnName = Column name.
cc_customddcolumns.ColumnOrder = 1-based ordering of columnname with CDDR.
cc_customddcolumns.CustomDataDistRequest = CustomDataDistRequest for this object.
cc_customddcolumns.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_customddcolumns.ReturnTypeClassName = Return type class name.

cc_customddresults = Stores results of custom data distribution request.

cc_customddresults.ID = Internally managed primary key
cc_customddresults.ColumnOrder = 1-based ordering of column of result within CDDR results.
cc_customddresults.CustomDataDistRequest = CustomDDRColumnName for this object.
cc_customddresults.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_customddresults.ResultValue = Result value.
cc_customddresults.RowOrder = 1-based ordering of row of result within CDDR results.

cc_customdatadistreq = Stores custom data distribution request.

cc_customdatadistreq.ID = Internally managed primary key
cc_customdatadistreq.Description = Description.
cc_customdatadistreq.DistType = Data distribution type
cc_customdatadistreq.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_customdatadistreq.Query = Query.
cc_customdatadistreq.TableDataDist = TableDataDist for this object.
cc_customdatadistreq.CustomDDColumns = Collection of CustomDDColumns linked to this CustomDataDistRequest.
cc_customdatadistreq.CustomDDResults = Collection of CustomDDResults linked to this CustomDataDistRequest.

cc_dbconsistcheckqueryexec = Stores instrumented queries from consistency checker.

cc_dbconsistcheckqueryexec.ID = Internally managed primary key
cc_dbconsistcheckqueryexec.ConsistencyCheckType = Type of consistency check
cc_dbconsistcheckqueryexec.DBConsistCheckRun = DBConsistCheckRun for this object.
cc_dbconsistcheckqueryexec.Description = Description.
cc_dbconsistcheckqueryexec.Duration = Elapsed time in seconds
cc_dbconsistcheckqueryexec.EndTime = End time of query execution.
cc_dbconsistcheckqueryexec.Fingerprint = Fingerprint of query, if query-based
cc_dbconsistcheckqueryexec.NumRows = # of rows failing check
cc_dbconsistcheckqueryexec.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_dbconsistcheckqueryexec.QueryText = Query.
cc_dbconsistcheckqueryexec.QueryToIdentifyRows = Query to identify rows.
cc_dbconsistcheckqueryexec.SQLFailureMsg = SQL failure stack trace
cc_dbconsistcheckqueryexec.StartTime = Start time of query execution.
cc_dbconsistcheckqueryexec.TableName = Table name

cc_dbconsistcheckrun = Stores consistency checker info in the database.

cc_dbconsistcheckrun.ID = Internally managed primary key
cc_dbconsistcheckrun.Description = Description.
cc_dbconsistcheckrun.Duration = Elapsed time in seconds
cc_dbconsistcheckrun.EndTime = End time of consistency check process.
cc_dbconsistcheckrun.ExtensionsSchemaVersion = Extensions version number at time of check
cc_dbconsistcheckrun.MajorSchemaVersion = Major Schema Version at time of check 
cc_dbconsistcheckrun.MinorSchemaVersion = Minor Schema Version at time of check 
cc_dbconsistcheckrun.NumberOfThreads = Number of threads used to run this job
cc_dbconsistcheckrun.PlatformMajorSchemaVersion = Platform Major Schema Version at time of check 
cc_dbconsistcheckrun.PlatformMinorSchemaVersion = Platform Minor Schema Version at time of check 
cc_dbconsistcheckrun.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_dbconsistcheckrun.StartTime = Start time of consistency check process.
cc_dbconsistcheckrun.TotalNumChecks = Total number of checks in this run
cc_dbconsistcheckrun.DBConsistCheckQueryExecs = Collection of DBConsistCheckQueryExecs linked to this DBConsistCheckExec.

cc_dbperfreport = Stores zipped database performance reports in the database.

cc_dbperfreport.ID = Internally managed primary key
cc_dbperfreport.Description = Description.
cc_dbperfreport.EndTime = End time of data distribution process.
cc_dbperfreport.ErrorMessages = 
cc_dbperfreport.PerfDownload = 
cc_dbperfreport.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_dbperfreport.StartTime = Start time of data distribution process.
cc_dbperfreport.Status = 0 for STARTED, 1 for SUCCESSFULLY_COMPLETED, 2 for FAILED

cc_dbstatsworkitem = Queue of statistics to run. This is a system-internal entity.

cc_dbstatsworkitem.ID = Internally managed primary key
cc_dbstatsworkitem.Attempts = 
cc_dbstatsworkitem.AvailableSince = The time after which the work item can be tried. Must be null on failed work items
cc_dbstatsworkitem.CheckedOutBy = 
cc_dbstatsworkitem.CreationTime = 
cc_dbstatsworkitem.Data = Serialized DBStatisticsTableWrapper
cc_dbstatsworkitem.DBUpdateStatsID = The reference on DatabaseUpdateStats
cc_dbstatsworkitem.Exception = Stack trace of the exception
cc_dbstatsworkitem.LastUpdateTime = 
cc_dbstatsworkitem.Priority = 
cc_dbstatsworkitem.ProcessHistoryID = The writer batch job that created this workitem (ProcessHistory).
cc_dbstatsworkitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_dbstatsworkitem.Status = Status of this workitem.
cc_dbstatsworkitem.WorkDone = The work item is done flag.
cc_dbstatsworkitem.WorkItemSetID = The work item set that owns this workitem.

cc_dashboardstats = 
        Maintains statistics for claim activity and financial data within ClaimCenter.
      
    

cc_dashboardstats.ID = Internally managed primary key
cc_dashboardstats.ClaimCostsInPeriod = Claim costs paid in this period.
cc_dashboardstats.ClaimCostsOnClosed = Claim costs paid on claims closed in this period.
cc_dashboardstats.ClaimCostsPaid = Claim costs paid on open claims.
cc_dashboardstats.ClosedClaims = Number of claims closed in period.
cc_dashboardstats.ClosedExposures = Number of exposures closed in period.
cc_dashboardstats.CloseTime = Total of days from CreateDate to CloseDate for all claims closed in period.
cc_dashboardstats.CoverageType = CoverageType this statistic is for.
cc_dashboardstats.ExpensesInPeriod = Expenses paid in this period.
cc_dashboardstats.ExpensesOnClosed = Expenses paid on claims closed in this period.
cc_dashboardstats.ExpensesPaid = Expenses paid on open claims.
cc_dashboardstats.Flagged = Number of claims with Flagged = isFlagged.
cc_dashboardstats.Group = Group this statistic is for.
cc_dashboardstats.Handlers = Number of users in each group as the primary owner of at least one claim.
cc_dashboardstats.Litigated = Number of litigated claims.
cc_dashboardstats.LOBCode = LOB this statistic is for.
cc_dashboardstats.LossType = LossType this statistic is for.
cc_dashboardstats.NewClaims = Number of new claims opened in period.
cc_dashboardstats.NewExposures = Number of new exposures opened in period.
cc_dashboardstats.NewLitigation = Number of litigated claims in period.
cc_dashboardstats.NewNoticeOnly = Number of new claims opened in period.
cc_dashboardstats.NoticeOnly = Number of claims with IncidentReport = true.
cc_dashboardstats.OpenClaims = Number of open claims.
cc_dashboardstats.OpenExposures = Number of open exposures.
cc_dashboardstats.OpenReserves = Open reserve amount for open claims.
cc_dashboardstats.OverIncurredLimit = Number of claims that have incurred over a certain amount of money.
cc_dashboardstats.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_dashboardstats.RecoveredInPeriod = Recoveries made in this period.
cc_dashboardstats.ReopenedClaims = Number of claims reopened in period.
cc_dashboardstats.StatType = Whether this stat is for a group, LOB, losstype, or coveragetype.
cc_dashboardstats.TotalIncurredNet = Net total incurred for open claims.
cc_dashboardstats.TtlIncNetMinusOpenRecReserves = Net total incurred minus open recovery reserves for open claims.

cc_datachange = The change to production data.

cc_datachange.ID = Internally managed primary key
cc_datachange.CreateDate = Date the gosu was added.
cc_datachange.CreateUser = The user who created the gosu.
cc_datachange.Description = Description of the change requested.
cc_datachange.ExecuteDate = The time the gosu was executed.
cc_datachange.ExecuteUser = The user who executed the gosu.
cc_datachange.ExternalReference = An external reference for tracking change requests.
cc_datachange.Gosu = The gosu to execute.
cc_datachange.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_datachange.Result = The result of executing the gosu.
cc_datachange.Status = 

cc_datadistqueryexec = Stores instrumented queries from data distribution.

cc_datadistqueryexec.ID = Internally managed primary key
cc_datadistqueryexec.DatabaseDataDist = DatabaseDataDist for this object.
cc_datadistqueryexec.Description = Description.
cc_datadistqueryexec.Duration = Elapsed time in seconds
cc_datadistqueryexec.EndTime = End time of query execution.
cc_datadistqueryexec.Fingerprint = Fingerprint of query, if query-based
cc_datadistqueryexec.NumRows = # of rows returned by query
cc_datadistqueryexec.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_datadistqueryexec.QueryText = Query.
cc_datadistqueryexec.StartTime = Start time of query execution.
cc_datadistqueryexec.TableName = Table name for query, if query-based
cc_datadistqueryexec.ThreadName = Thread name.

cc_datageninfo = Stores metadata for database generation info.

cc_datageninfo.ID = Internally managed primary key
cc_datageninfo.Action = the action type this data-gen performed
cc_datageninfo.BuildVersion = 
cc_datageninfo.Description = Info logged by the generation process.
cc_datageninfo.PerformDate = Time this generation happened.
cc_datageninfo.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_datageninfo.Status = 
cc_datageninfo.Details = Detailed description.

cc_datageninfodetail = Details for data gen.

cc_datageninfodetail.ID = Internally managed primary key
cc_datageninfodetail.DataGenInfo = Parent.
cc_datageninfodetail.Description = Line for detailed description.
cc_datageninfodetail.DisplayOrder = display order within parent
cc_datageninfodetail.NumIndents = # of tabs for readability
cc_datageninfodetail.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_databasedatadist = Stores data distribution info in the database.

cc_databasedatadist.ID = Internally managed primary key
cc_databasedatadist.AdHocDistsCollected = Ad hoc data distributions collected
cc_databasedatadist.AllTablesCollected = All tables data distributions collected.  If false, a subset was specified.
cc_databasedatadist.AppSpecificDistsCollected = Application specific data distributions collected.
cc_databasedatadist.ArrayDistsCollected = Array distributions collected.
cc_databasedatadist.AssignableDistsByDateCollected = Assignable data distributions by date collected.
cc_databasedatadist.AssignableForKeyDistsCollected = Assignable Foreign Key distributions collected.
cc_databasedatadist.BeanDistsCollected = Bean distributions collected.
cc_databasedatadist.BlobDistsCollected = Blob distributions collected.
cc_databasedatadist.BooleanColDistsCollected = Boolean column data distributions collected
cc_databasedatadist.ClobDistsCollected = Clob distributions collected.
cc_databasedatadist.Description = Description.
cc_databasedatadist.EndTime = End time of data distribution process.
cc_databasedatadist.ForKeyDistsCollected = ForeignKey distributions collected.
cc_databasedatadist.MajorSchemaVersion = Major Schema Version at time of collection 
cc_databasedatadist.MinorSchemaVersion = Minor Schema Version at time of collection 
cc_databasedatadist.NumThreads = Number of threads configured to collect data distribution
cc_databasedatadist.PlatformMajorSchemaVersion = Platform Major Schema Version at time of collection 
cc_databasedatadist.PlatformMinorSchemaVersion = Platform Minor Schema Version at time of collection 
cc_databasedatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_databasedatadist.StagingTableDistsCollected = Staging table data distributions collected
cc_databasedatadist.StartTime = Start time of data distribution process.
cc_databasedatadist.TypeKeyDistsCollected = TypeKey  distributions collected.
cc_databasedatadist.TypeListTableDistsCollected = Typelist table data distributions collected
cc_databasedatadist.DataDistQueryExecs = Collection of DataDistQueryExecs linked to this DatabaseDataDist.
cc_databasedatadist.TableDataDists = Collection of TableDataDists linked to this DatabaseDataDist.

cc_databaseupdatestats = Stores update statistics info in the database.

cc_databaseupdatestats.ID = Internally managed primary key
cc_databaseupdatestats.Description = Description.
cc_databaseupdatestats.EndTime = End time of update statistics process.
cc_databaseupdatestats.ExtensionsSchemaVersion = Extensions Schema Version at time of collection 
cc_databaseupdatestats.Incremental = Whether update is incremental.
cc_databaseupdatestats.incrementalThresholdPercent = incremental threshold percent.
cc_databaseupdatestats.MajorSchemaVersion = Major Schema Version at time of collection 
cc_databaseupdatestats.MinorSchemaVersion = Minor Schema Version at time of collection 
cc_databaseupdatestats.PlatformMajorSchemaVersion = Platform Major Schema Version at time of collection 
cc_databaseupdatestats.PlatformMinorSchemaVersion = Platform Minor Schema Version at time of collection 
cc_databaseupdatestats.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_databaseupdatestats.RunnerType = Type of process running the operation.
cc_databaseupdatestats.StartTime = Start time of update statistics process.
cc_databaseupdatestats.updateStatisticsSQL = Query used to determine if threshold exceeded.
cc_databaseupdatestats.TableUpdateStats = Collection of TableUpdateStats linked to this DatabaseUpdateStats.

cc_dateanalysisdatadist = Stores date analysis data distribution.

cc_dateanalysisdatadist.ID = Internally managed primary key
cc_dateanalysisdatadist.AvgRowsPerDate = Average number of rows per date.
cc_dateanalysisdatadist.DatetimeColumnName = Name of datetime column.
cc_dateanalysisdatadist.MaxRowsPerDate = Maximum number of rows per date.
cc_dateanalysisdatadist.MinRowsPerDate = Minimum number of rows per date.
cc_dateanalysisdatadist.mnth = Month
cc_dateanalysisdatadist.NumDistinctDates = Number of distinct non-null dates.
cc_dateanalysisdatadist.NumNonNullNonLoadableDates = Number of non-null, non-loadable rows.
cc_dateanalysisdatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_dateanalysisdatadist.TableDataDist = TableDataDist for this object.
cc_dateanalysisdatadist.yr = Year

cc_datebinneddddatebin = Stores value bins and date bin array for date binned distribution.

cc_datebinneddddatebin.ID = Internally managed primary key
cc_datebinneddddatebin.Count = Count of items in this date bin
cc_datebinneddddatebin.EndDays = Last day in days +/- date of distribution for this date bin, must be negative or zero if StartDays is negative
cc_datebinneddddatebin.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_datebinneddddatebin.StartDays = First day in days +/- date of distribution for this date bin, must be positive or zero if EndDays is positive
cc_datebinneddddatebin.Value = DateBinnedDDValue for this object.

cc_datebinnedddvalue = Stores value bins and date bin array for date binned distribution.

cc_datebinnedddvalue.ID = Internally managed primary key
cc_datebinnedddvalue.AddlValue = Additional column value.
cc_datebinnedddvalue.DateBinnedDataDist = TypeKeyDataDist for this object.
cc_datebinnedddvalue.MaximumDate = Maximum date and time for this date column and value bin
cc_datebinnedddvalue.MinimumDate = Minimum date and time for this date column and value bin
cc_datebinnedddvalue.NullValues = Count of items in this value bin with null date
cc_datebinnedddvalue.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_datebinnedddvalue.Value = Main column value.
cc_datebinnedddvalue.DateBins = Date bins for this value

cc_datebinneddatadist = Stores the distribution of items by date bins sizes for a given value column, date column pair.

cc_datebinneddatadist.ID = Internally managed primary key
cc_datebinneddatadist.AddlColumnName = Additional value column name (optional)
cc_datebinneddatadist.DataType = Data type of primary column in value bins.
cc_datebinneddatadist.DateColumnName = Date column name.
cc_datebinneddatadist.Description = Description.
cc_datebinneddatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_datebinneddatadist.TableDataDist = TableDataDist for this object.
cc_datebinneddatadist.ValueColumnName = Main value column name.
cc_datebinneddatadist.ValueBins = Value of MainColumn and Addlcolumn (these must be bounded)

cc_datespandatadist = Stores maximum and minimum dates for each date columnn of a table.

cc_datespandatadist.ID = Internally managed primary key
cc_datespandatadist.DateColName = Date column name.
cc_datespandatadist.MaxDate = Latest date stored.
cc_datespandatadist.MinDate = Earliest date stored.
cc_datespandatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_datespandatadist.TableDataDist = TableDataDist for this object.

cc_dbmsreport = Stores DBMS reports as zipped objects

cc_dbmsreport.ID = Internally managed primary key
cc_dbmsreport.CaptureDate = The datetime this was captured.
cc_dbmsreport.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_dbmsreport.ZippedReport = 

cc_deductible = A deductible represent the amount to be subtracted from a payment before making out a check. This amount is normally derived from the deductible amount defined on the policy.
    

cc_deductible.ID = Internally managed primary key
cc_deductible.Amount = Deductible amount to be applied to a payment.
cc_deductible.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_deductible.Claim = The claim on which this deductible was created.
cc_deductible.Coverage = The coverage, if any, whose deductible this entity represents.
cc_deductible.CreateTime = Timestamp when the object was created
cc_deductible.CreateUser = User who created the object
cc_deductible.Currency = 
cc_deductible.EditReason = Reason for editing (override or waive) the deductible.
cc_deductible.Overridden = Specifies whether this deductible has been overriden.
cc_deductible.Paid = Specifies whether this deductible has been paid.
cc_deductible.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_deductible.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_deductible.UpdateTime = Timestamp when the object was last updated
cc_deductible.UpdateUser = User who last updated the object
cc_deductible.Waived = Specifies whether this deductible has been waived.
cc_deductible.TransactionLineItems = The TransactionLineItems applied to this deductible.

cc_deduction = A deduction from a check, usually for tax purposes.

cc_deduction.ID = Internally managed primary key
cc_deduction.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_deduction.Check = Check to which the deduction belongs.
cc_deduction.ClaimAmount = Amount of the deduction in the claim currency.
cc_deduction.Comments = Description of the deduction.
cc_deduction.CreateTime = Timestamp when the object was created
cc_deduction.CreateUser = User who created the object
cc_deduction.DeductionType = Type of deduction.
cc_deduction.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_deduction.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_deduction.ReportingAmount = Amount of the deduction in the reporting currency).
cc_deduction.ReservingAmount = Amount of the deduction in the reserving currency.
cc_deduction.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_deduction.TransactionAmount = Amount of the deduction in the transaction/check currency.
cc_deduction.UpdateTime = Timestamp when the object was last updated
cc_deduction.UpdateUser = User who last updated the object

cc_bizdeployedruletag = Records a fact that the RuleVersion is/was deployed on the particular system.

cc_bizdeployedruletag.ID = Internally managed primary key
cc_bizdeployedruletag.Deployed = 
cc_bizdeployedruletag.DeployedByUserName = 
cc_bizdeployedruletag.DeploymentId = 
cc_bizdeployedruletag.GlobalRuleID = 
cc_bizdeployedruletag.Importing = 
cc_bizdeployedruletag.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bizdeployedruletag.RuleVersion = 
cc_bizdeployedruletag.VersionNumber = 

cc_destinationlease = null

cc_destinationlease.ID = Internally managed primary key
cc_destinationlease.Acquired = 
cc_destinationlease.Created = 
cc_destinationlease.Exclusivity = 
cc_destinationlease.Expired = 
cc_destinationlease.ExpireRequested = 
cc_destinationlease.FailoverState = 
cc_destinationlease.InitialArguments = 
cc_destinationlease.LeaseOwner = 
cc_destinationlease.LockingColumn = Meaningless column for locking
cc_destinationlease.Name = 
cc_destinationlease.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_destinationlease.Released = 
cc_destinationlease.RetryFailover = 
cc_destinationlease.TransferRequested = 
cc_destinationlease.TransferTarget = 
cc_destinationlease.UniqueIdLSB = 
cc_destinationlease.UniqueIdMSB = 

cc_destinationleasehistory = null

cc_destinationleasehistory.ID = Internally managed primary key
cc_destinationleasehistory.Acquired = 
cc_destinationleasehistory.Created = 
cc_destinationleasehistory.Expired = 
cc_destinationleasehistory.ExpireRequested = 
cc_destinationleasehistory.LeaseOwner = 
cc_destinationleasehistory.LockingColumn = Meaningless column for locking
cc_destinationleasehistory.Name = 
cc_destinationleasehistory.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_destinationleasehistory.ReplacementIdLSB = 
cc_destinationleasehistory.ReplacementIdMSB = 
cc_destinationleasehistory.Terminated = 
cc_destinationleasehistory.TerminationMessage = 
cc_destinationleasehistory.TerminationReason = 
cc_destinationleasehistory.TransferRequested = 
cc_destinationleasehistory.TransferTarget = 
cc_destinationleasehistory.UniqueIdLSB = 
cc_destinationleasehistory.UniqueIdMSB = 

cc_document = <p>
        Represents a physical or electronic document. This entity only contains information about the referenced document,
        known as metadata, not the actual document contents. Use <code>IDocumentContentSource</code> to retrieve and store
        document contents.  Multiple <code>Document</code> entities may have the same value for the <code>docUID</code>
        field. This means simply that the <code>Document</code> entities represent the same physical document, for example,
        a document that applies to multiple claims.
        </p><p>
        Note that <code>Document</code> entities may or may not be stored in the database. You can implement a plugin
        interface, {@link com.guidewire.pl.plugin.document.IDocumentMetadataSource}, to retrieve document metadata from
        an external document management system (DMS). If you do not implement and register this interface, the system stores
        the <code>Document</code> entities in the database in the normal manner.
        </p><p>
        It is important to coordinate customizations of this entity with those of the <code>DocumentSearchCriteria</code>
        and <code>DocumentSearchResult</code> entities, so that users will be able to search for documents based on the
        most appropriate fields and select from the results.
        </p><p>
        The system retrieves the documents' contents (as referenced by <code>Document</code> entities) through the
        {@link com.guidewire.pl.plugin.document.IDocumentContentSource} plugin interface. This interface connects a Guidewire
        application to a DMS. The DMS property on the <code>Document</code> entity indicates whether the contents of the
        document are stored in the document management system; if not, then the entity merely denotes the existence of a
        physical document and no electronic access is available. If the contents do exist in the DMS, then the <code>DocUID</code>
        property must be a key that uniquely identifies the contents which should be displayed for a particular
        <code>Document</code> entity.
        </p><p>
        You can control access to particular <code>Document</code> entities through the <code>SecurityType</code> property.
        Use this property in conjunction with the security settings in <code>security-config.xml</code>. See the
        Administration Guide for more details.
        </p>
      
    

cc_document.ID = Internally managed primary key
cc_document.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_document.Author = Name of the person who created the document.
cc_document.AuthorDenorm = denorm field for Name of the person who created the document.
cc_document.Claim = Associated claim.
cc_document.ClaimContact = Associated claim contact. Note that only one of Exposure, Matter, and ClaimContact may be set.
cc_document.CreateTime = Timestamp when the object was created
cc_document.CreateUser = User who created the object
cc_document.DateCreated = Date and time the document was created.
cc_document.DateModified = Date and time the document was last modified.
cc_document.Description = Description of the document.
cc_document.DMS = Whether this document has content stored in a Document Management System.
cc_document.DocUID = The Unique Identifier (UID) for this document.     The format of this UID is specific to the deployed Document Management System (DMS), and is passed to the configured IDocumentContentSource implementation.
cc_document.DocumentIdentifier = Short human-readable identifier for the document, often used as an extra storage location for form codes, when name and documenttype are inadequate.
cc_document.DocumentIdentifierDenorm = denorm field for Short human-readable identifier for the document, often used as an extra storage location for form codes, when name and documenttype are inadequate.
cc_document.Exposure = Associated exposure. Note that only one of Exposure, Matter, and ClaimContact may be set.
cc_document.Inbound = Whether the document is an inbound, outbound, or stationary (null) document
cc_document.Language = The language in which this document is created.
cc_document.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_document.Matter = Associated matter. Note that only one of Exposure, Matter, and ClaimContact may be set.
cc_document.MimeType = The MIME type of this document; for example, application/msword for a Microsoft Word document.
cc_document.Name = Human-readable name of the document.
cc_document.NameDenorm = denorm field for Human-readable name of the document.
cc_document.Obsolete = If true, the information in the document can no longer be relied upon to be up-to-date and relevant. This is often used instead of deletion to preserve history.
cc_document.PendingDocUID = The document is pending, and it's pending storage has Unique Identifier (UID).     The format of this UID is specific to the IDCS implementation.
cc_document.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_document.Recipient = Name of the intended recipient of the document (if any).
cc_document.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_document.Section = The section to which this document belongs, if any.
cc_document.SecurityType = Type of document used for access-restriction purposes, in conjunction with the information in security-config.xml.
cc_document.Status = The current status of the document, if any.
cc_document.Type = The specific type of the document, if any.
cc_document.UpdateTime = Timestamp when the object was last updated
cc_document.UpdateUser = User who last updated the object
cc_document.ServiceRequestDocumentLinks = The ServiceRequestDocumentLinks linking ServiceRequests to this Document. This must be empty if any of the other 'related to' fields are set

cc_drugprescribed = 
        Maintains medication information related to a Workmen's Compensation claim. This entity tracks the Contact
        prescribing the drug, the drug name, and expiration on the prescription.
      
    

cc_drugprescribed.ID = Internally managed primary key
cc_drugprescribed.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_drugprescribed.Claim = Fkey to Claim entity.
cc_drugprescribed.ClaimContact = Fkey to ClaimContact entity.
cc_drugprescribed.CreateTime = Timestamp when the object was created
cc_drugprescribed.CreateUser = User who created the object
cc_drugprescribed.DatePrescribed = Date drug was prescribed.
cc_drugprescribed.DateScriptExpires = Date drug prescription expires.
cc_drugprescribed.DrugName = Name of drug prescribed.
cc_drugprescribed.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_drugprescribed.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_drugprescribed.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_drugprescribed.UpdateTime = Timestamp when the object was last updated
cc_drugprescribed.UpdateUser = User who last updated the object

cc_dwellingroomdamage = Room damage information for Dwellings

cc_dwellingroomdamage.ID = Internally managed primary key
cc_dwellingroomdamage.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_dwellingroomdamage.CreateTime = Timestamp when the object was created
cc_dwellingroomdamage.CreateUser = User who created the object
cc_dwellingroomdamage.Incident = The DwellingIncident this room is related to.
cc_dwellingroomdamage.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_dwellingroomdamage.NumberOfRooms = Count of the particular room type damaged. For instance 2 of a certain kind of room
cc_dwellingroomdamage.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_dwellingroomdamage.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_dwellingroomdamage.RoomType = Room types. For instance, living room, bedroom.
cc_dwellingroomdamage.UpdateTime = Timestamp when the object was last updated
cc_dwellingroomdamage.UpdateUser = User who last updated the object

cc_dynact = null

cc_dynact.ID = Internally managed primary key
cc_dynact.Action = 
cc_dynact.Category = 
cc_dynact.CreateTime = Timestamp when the object was created
cc_dynact.CreateUser = User who created the object
cc_dynact.Description = The description for the dynamic action
cc_dynact.EffectiveDate = 
cc_dynact.Enabled = 
cc_dynact.ExpirationDate = 
cc_dynact.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_dynact.LockingColumn = Meaningless column for locking
cc_dynact.Name = The name for the dynamic action
cc_dynact.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_dynact.RootEntity = The root entity for the dynamic action
cc_dynact.UpdateTime = Timestamp when the object was last updated
cc_dynact.UpdateUser = User who last updated the object
cc_dynact.Criteria = The ANDed criteria for determining whether or not to execute the Action

cc_dynamic_assign = 
        Maintains round-robin assignment state for a particular fingerprint. The fingerprint is generated
        from some entity (such as a UserSearchCriteria) which determines the set of users to be chosen
        via round-robin. This is an internal class which should only be used by the internals of the
        assignment engine.
      
    

cc_dynamic_assign.ID = Internally managed primary key
cc_dynamic_assign.CreateTime = Timestamp when the object was created
cc_dynamic_assign.CreateUser = User who created the object
cc_dynamic_assign.Fingerprint = The fingerprint this state is tracking.
cc_dynamic_assign.GroupOnly = Flag indicating whether the row represents a Group assignment only, or a Group and User assignment
cc_dynamic_assign.LastActivityGrp = The id of the last group that was assigned an activity.
cc_dynamic_assign.LastActivityUser = The id of the last user that was assigned an activity.
cc_dynamic_assign.LastClaimGrp = The id of the last group that was assigned a claim.
cc_dynamic_assign.LastClaimUser = The id of the last user that was assigned a claim.
cc_dynamic_assign.LastExposureGrp = The id of the last group that was assigned an exposure.
cc_dynamic_assign.LastExposureUser = The id of the last user that was assigned an exposure.
cc_dynamic_assign.LastMatterGrp = The id of the last group that was assigned a matter.
cc_dynamic_assign.LastMatterUser = The id of the last user that was assigned a matter.
cc_dynamic_assign.LastReviewGrp = The id of the last group that was assigned an assignment review activity.
cc_dynamic_assign.LastReviewUser = The id of the last user that was assigned an assignment review activity.
cc_dynamic_assign.LastServiceRequestGrp = The id of the last group that was assigned a service request.
cc_dynamic_assign.LastServiceRequestUser = The id of the last user that was assigned a service request.
cc_dynamic_assign.LastSubrogationGrp = The id of the last group that was assigned a subrogation.
cc_dynamic_assign.LastSubrogationUser = The id of the last user that was assigned a subrogation.
cc_dynamic_assign.LockingColumn = Meaningless column for locking
cc_dynamic_assign.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_dynamic_assign.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_dynamic_assign.UpdateTime = Timestamp when the object was last updated
cc_dynamic_assign.UpdateUser = User who last updated the object

cc_eftdata = Electronic funds transfer or EFT refers to the computer-based systems used to perform financial transactions electronically.
    

cc_eftdata.ID = Internally managed primary key
cc_eftdata.AccountName = The name on the account
cc_eftdata.AddressBookUID = The system uses this value when it is integrated with ContactManager and the related contact is linked.  In this case, the ID represents the ID of the corresponding entity in ContactManager. This value is null if the object is not linked.
cc_eftdata.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_eftdata.BankAccountNumber = The bank account number
cc_eftdata.BankAccountType = The type of bank accout e.g. checking, savings etc
cc_eftdata.BankName = The name of the bank
cc_eftdata.BankRoutingNumber = The routing number is a nine digit bank code used in the United States
cc_eftdata.Contact = Contact this EFT record relates to
cc_eftdata.CreateTime = Timestamp when the object was created
cc_eftdata.CreateUser = User who created the object
cc_eftdata.ExternalLinkID = The external link ID suggested by CC to CM when linkID is null but has been created in CC. 
cc_eftdata.IsPrimary = Indicates if this is the primary EFT record for the contact
cc_eftdata.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_eftdata.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_eftdata.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_eftdata.UpdateTime = Timestamp when the object was last updated
cc_eftdata.UpdateUser = User who last updated the object

cc_employmentdata = Employment information for an exposure on a workers' comp claim.

cc_employmentdata.ID = Internally managed primary key
cc_employmentdata.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_employmentdata.Claim = The Claim that owns this EmploymentData
cc_employmentdata.ClassCode = Classification of employee, based on state codes or NCCI codes.
cc_employmentdata.CreateTime = Timestamp when the object was created
cc_employmentdata.CreateUser = User who created the object
cc_employmentdata.DaysWorkedWeek = Text description of the days the employee normally works. For example, Monday-Friday or MWF.
cc_employmentdata.DepartmentCode = Code of department in which employee was working.
cc_employmentdata.EmploymentStatus = Status of employment.
cc_employmentdata.HireDate = Employee's date of hire.
cc_employmentdata.HireState = State in which the employee was hired.
cc_employmentdata.InjuryStartTime = Start time on day of injury.
cc_employmentdata.LastWorkedDate = Date employee last worked.
cc_employmentdata.LastYearIncome = Income in the last calendar year.
cc_employmentdata.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_employmentdata.NumDaysWorked = Number of days worked per week.
cc_employmentdata.NumHoursWorked = Number of hours worked per day.
cc_employmentdata.Occupation = Description of the employee's job.
cc_employmentdata.OvertimeRate = Overtime wage rate.
cc_employmentdata.PaidFull = Whether the employee was paid full wages for the day of injury or last day worked.
cc_employmentdata.PayPeriod = Pay period of employee.
cc_employmentdata.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_employmentdata.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_employmentdata.ScndInjryFnd = Whether second injury fund benefits apply.
cc_employmentdata.ScndInjryFndAmnt = Amount of second injury fund benefits.
cc_employmentdata.ScndInjryFndDate = Date of initial notice to second injury fund.
cc_employmentdata.SSBenefits = Whether Social Security benefits apply.
cc_employmentdata.SSBenefitsAmnt = Amount of Social Security benefits.
cc_employmentdata.UpdateTime = Timestamp when the object was last updated
cc_employmentdata.UpdateUser = User who last updated the object
cc_employmentdata.WageAmount = Amount of wages per pay period pre-injury.
cc_employmentdata.WageAmountPostInjury = Amount of wages per pay period post-injury.
cc_employmentdata.WagePaymentCont = Whether claimant's salary was continued.
cc_employmentdata.WorkStatusChanges = Periods of time employee returned to work.

cc_encryptedcolumnregistry = Stores metadata for each encrypted column in the database.

cc_encryptedcolumnregistry.ColumnName = Name of the column
cc_encryptedcolumnregistry.TableName = Name of the table.

cc_endorsement = 
Relates a legal form (endorsement) to the policy.  The actual form is not stored
in this entity, only description of it and its form number, which should
identify a specific form.
    

cc_endorsement.ID = Internally managed primary key
cc_endorsement.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_endorsement.Comments = Other notes on the endorsement.
cc_endorsement.CreateTime = Timestamp when the object was created
cc_endorsement.CreateUser = User who created the object
cc_endorsement.Description = Description of the endorsement.
cc_endorsement.EffectiveDate = Date on which the endorsement is effective.
cc_endorsement.ExpirationDate = Date on which the endorsement expires.
cc_endorsement.FormNumber = Date and version of the legal document.
cc_endorsement.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_endorsement.Policy = Policy with which the endorsement is associated.
cc_endorsement.PolicySystemId = Identifier for the endorsement in an external policy system
cc_endorsement.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_endorsement.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_endorsement.UpdateTime = Timestamp when the object was last updated
cc_endorsement.UpdateUser = User who last updated the object

cc_evaluation = 
        Represents the liabilities and damages in a Claim's plan of action. A plan of action is an agreement between
        parties that concludes a discussion of outstanding liabilities. The Evaluation object brings together
        key contacts and financial data related to a claim.
      
    

cc_evaluation.ID = Internally managed primary key
cc_evaluation.Amount = Total evaluation amount.
cc_evaluation.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_evaluation.Claim = Related claim.
cc_evaluation.ClaimantLiability = Claimant's liability percentage.
cc_evaluation.ClaimContact = Related claimant (either a person or a company).
cc_evaluation.ClmtOutOfPocket = Claimant out of pocket cost.
cc_evaluation.CreateTime = Timestamp when the object was created
cc_evaluation.CreateUser = User who created the object
cc_evaluation.Diagnostic = Diagnostic cost - for example, x-ray.
cc_evaluation.Exposure = Related exposure.
cc_evaluation.FutureMedical = Future medical cost.
cc_evaluation.High = High non-economic cost estimate.
cc_evaluation.HospitalER = Hospital/Emergency Room cost.
cc_evaluation.InsuredLiability = Insured's liability percentage.
cc_evaluation.Likely = Likely non-economic cost estimate.
cc_evaluation.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_evaluation.Low = Low non-economic cost estimate.
cc_evaluation.Matter = Related matter.
cc_evaluation.MedicalEquipment = Medical equipment cost.
cc_evaluation.Name = Then name or subject of this evaluation.
cc_evaluation.Other = Other damages cost.
cc_evaluation.OtherLiability = Other party's liability percentage.
cc_evaluation.PhysicalTherapy = Physical therapy cost.
cc_evaluation.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_evaluation.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_evaluation.ServiceRequest = Associated service request
cc_evaluation.TreatingPhysician = Treating physician cost.
cc_evaluation.UpdateTime = Timestamp when the object was last updated
cc_evaluation.UpdateUser = User who last updated the object

cc_exchangerate = A rate for converting one currency to another.

cc_exchangerate.ID = Internally managed primary key
cc_exchangerate.BaseCurrency = From Currency. The Currency this ExchangeRate converts from.
cc_exchangerate.CreateTime = Timestamp when the object was created
cc_exchangerate.CreateUser = User who created the object
cc_exchangerate.ExchangeRateSet = The ExchangeRateSet this ExchangeRate belongs to.
cc_exchangerate.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_exchangerate.NormalizedRate = BaseUnits of BaseCurrency = NormalizedRate * 10^-RateScale * PriceUnits of PriceCurrency.
cc_exchangerate.PriceCurrency = To Currency. The Currency this ExchangeRate converts to.
cc_exchangerate.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_exchangerate.RateScale = Amount by which NormalizedRate was scaled. ExchangeRates are stored as a normalized value plus a scale so that exact floating-point exchange rates can be stored in fixed-width database columnns.
cc_exchangerate.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_exchangerate.UpdateTime = Timestamp when the object was last updated
cc_exchangerate.UpdateUser = User who last updated the object

cc_exchangerateset = A collection of exchange rates.

cc_exchangerateset.ID = Internally managed primary key
cc_exchangerateset.CreateTime = Timestamp when the object was created
cc_exchangerateset.CreateUser = User who created the object
cc_exchangerateset.Description = A longer description of the rate set.
cc_exchangerateset.EffectiveDate = The date and time this rate set becomes effective.
cc_exchangerateset.ExpireDate = The date and time this rate set is no longer effective.
cc_exchangerateset.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_exchangerateset.MarketRates = True if this rate set should be included in search for latest market rates.
cc_exchangerateset.Name = The name of the rate set.
cc_exchangerateset.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_exchangerateset.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_exchangerateset.UpdateTime = Timestamp when the object was last updated
cc_exchangerateset.UpdateUser = User who last updated the object
cc_exchangerateset.ExchangeRates = ExchangeRates in this ExchangeRateSet.

cc_exposure = 
      A discrete piece of a claim that involves a single type of loss (for example,
      vehicle damage or bodily injury) to a specific claimant. Contains data to
      describe the exposure and to track the current status of the exposure. Many
      exposure fields are specific to certain types of exposures and will be left
      blank on other types.
    

cc_exposure.ID = Internally managed primary key
cc_exposure.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_exposure.AssignedByUser = User who assigned this entity.
cc_exposure.AssignedGroup = Group to which this entity is assigned; null if none assigned
cc_exposure.AssignedQueue = Either the Queue to which this entity is assigned (if AssignmentStatus is 'assigned'), the Queue to which the system suggests assignment (if AssignmentStatus is 'manual'), or null if none assigned. Only one of AssignedUserID or AssignedQueueID should be non null.
cc_exposure.AssignedUser = Either the User to which this entity is assigned (if AssignmentStatus is 'assigned'), the User to which the system suggests assignment (if AssignmentStatus is 'manual'), or null if none assigned. Only one of AssignedUserID or AssignedQueueID should be non null.
cc_exposure.AssignmentDate = Time when entity last assigned
cc_exposure.AssignmentStatus = Typelist describing assignment status.
cc_exposure.AverageWeeklyWages = Average weekly wages; this calculation differs by state.
cc_exposure.BreakIn = Whether there is evidence of a break-in.
cc_exposure.Claim = The Claim for this Exposure.
cc_exposure.ClaimantDenorm = The claimant for the exposure, denormalized from the claim's contact array.
cc_exposure.ClaimantType = Categorizes the claimant relative to policyholder.
cc_exposure.ClaimOrder = Order of the exposure on the claim.
cc_exposure.CloseDate = Date and time when this entity was closed. (Not applicable to all assignable entities)
cc_exposure.ClosedOutcome = Outcome reached when closing the exposure.
cc_exposure.CompBenefits = Compensation benefits details.
cc_exposure.ContactPermitted = Whether contact is permitted with the claimant.
cc_exposure.Coverage = The specific coverage for this exposure.
cc_exposure.CoverageSubType = The coverage subtype.
cc_exposure.CreateTime = Timestamp when the object was created
cc_exposure.CreateUser = User who created the object
cc_exposure.CurrentConditions = Current conditions.
cc_exposure.DaysInWeek = Days in week used for benefit calculation.
cc_exposure.DeathBenefits = Death benefits details.
cc_exposure.DepreciatedValue = Depreciated value of property or vehicle.
cc_exposure.DiagnosticCnsistnt = Whether the diagnostic is consistent.
cc_exposure.DisBenefits = Disability benefits details.
cc_exposure.ExaminationDate = Date of the Examination.
cc_exposure.ExposureLimitReached = Whether the exposure's exposure limit has been exceeded.
cc_exposure.ExposureTier = The tier of this exposure, used to decide how to rate the exposure metrics.
cc_exposure.ExposureType = Types of exposure.
cc_exposure.FurtherTreatment = Whether further treatment is required.
cc_exposure.HospitalDate = Date admitted to the hospital.
cc_exposure.HospitalDays = Estimated days in hospital.
cc_exposure.Incident = Incident that caused this exposure.
cc_exposure.IncidentLimitReached = Whether the exposure's incident limit has been exceeded.
cc_exposure.ISOKnown = Has a search request for this object been successfully received by ISO?
cc_exposure.ISOReceiveDate = The last time a response was received from ISO for this object. 
cc_exposure.ISOSendDate = The last time a search request was sent to ISO. 
cc_exposure.ISOStatus = Status of exposure with ISO - for example checked, not of interest.
cc_exposure.JurisdictionState = State of jurisdiction, if different than location of loss. The Jurisdiction must be associated with JurisdictionType.TC_INSURANCE.
cc_exposure.LastDayWorked = Last day worked.
cc_exposure.LifePensionBenefits = Life Pension benefits details.
cc_exposure.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_exposure.Locked = Whether the property or vehicle was properly locked.
cc_exposure.LossCategory = Detailed category of the exposure.
cc_exposure.LossParty = The loss party; generally either first- or third-party loss.
cc_exposure.LostPropertyType = ISO category of lost property, for theft losses.
cc_exposure.MetricLimitGeneration = Generation number, used to identify the limits for this exposure's metrics
cc_exposure.NewEmpData = Information about a new job that the claimant has taken.
cc_exposure.OtherCoverage = True if the claimant has additional coverage.
cc_exposure.OtherCoverageInfo = Information regarding additional coverage.
cc_exposure.OtherCovgChoice = Whether there is other coverage.
cc_exposure.PIPClaimAggLimitReached = Whether the exposure's PIP Claim Aggregate limit has been exceeded.
cc_exposure.PIPDeathBenefits = Death benefits details.
cc_exposure.PIPESSLimitReached = Whether the exposure's PIP Replacement Services Aggregate limit has been exceeded.
cc_exposure.PIPNonMedAggLimitReached = Whether the exposure's PIP Non Medical Aggregate limit has been exceeded.
cc_exposure.PIPPersonAggLimitReached = Whether the exposure's PIP Per Person Aggregate limit has been exceeded.
cc_exposure.PIPVocBenefits = Vocational rehab benefits details.
cc_exposure.PPDBenefits = PPD benefits details.
cc_exposure.PreviousGroup = Group to which this entity was previously assigned.
cc_exposure.PreviousQueue = Queue to which this entity was previously assigned.
cc_exposure.PreviousUser = User to which this entity was previously assigned.
cc_exposure.PrimaryCoverage = Coverage Type of the coverage on this exposure.
cc_exposure.PriorEmpData = Information about the job the claimant had at the time of injury.
cc_exposure.Progress = Description of the progress of an open exposure.
cc_exposure.PTDBenefits = PTD benefits details.
cc_exposure.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_exposure.ReOpenDate = The last time an exposure was reopened. 
cc_exposure.ReopenedReason = The reason for reopening the exposure.
cc_exposure.ReplacementValue = Replacement value of the property or vehicle.
cc_exposure.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_exposure.RIAgreementGroup = Reinsurance group associated with this exposure.
cc_exposure.RIGroupSetExternally = Whether the reinsurance association was determined by an external system.
cc_exposure.RSBenefits = Replacement services benefits details.
cc_exposure.SecurityLevel = The security level of this exposure.
cc_exposure.Segment = Segmentation type of the exposure. Both the claim and exposure may be segmented.
cc_exposure.SettleDate = Date of settlement.
cc_exposure.SettleMethod = Method of settlement.
cc_exposure.SSBenefit = Whether Social Security benefits are being collected.
cc_exposure.SSDIBenefits = Social security disability benefits details.
cc_exposure.SSDIEligible = Whether the exposure is eligible for SSDI.
cc_exposure.State = Internal state of the exposure.
cc_exposure.StatLine = Statistical line associated with this exposure.
cc_exposure.Strategy = Strategy type of the exposure. Both the claim and exposure may define a strategy.
cc_exposure.SupplementalWorkloadWeight = 
cc_exposure.TempLocation = Temporary location of policy holder. This is for a homeowners claim.
cc_exposure.TPDBenefits = TPD benefits details.
cc_exposure.TreatedPatientBfr = Whether the the patient has been treated before.
cc_exposure.TTDBenefits = TTD benefits details.
cc_exposure.UpdateTime = Timestamp when the object was last updated
cc_exposure.UpdateUser = User who last updated the object
cc_exposure.ValidationLevel = Validation level the exposure has passed (if any).
cc_exposure.VocBenefits = Vocational benefits details.
cc_exposure.WageBenefit = Whether wage benefites are being collected.
cc_exposure.WageStmtRecd = Wage Statement received date.
cc_exposure.WageStmtSent = Wage Statement sent date.
cc_exposure.WCBenefit = Whether Workers Compensation benefits are being collected.
cc_exposure.WCBenefits = Workers' comp benefits details.
cc_exposure.WCPreexDisblty = Whether the injured person had a pre-existing disability.
cc_exposure.WCPreexDisbltyInfo = Information about the pre-existing disability.
cc_exposure.WorkloadUpdated = Last time user workload was calculated and updated
cc_exposure.WorkloadWeight = 
cc_exposure.Activities = 
cc_exposure.BenefitPeriods = Periods of time when employee received benefits.
cc_exposure.Documents = The documents associated with this exposure; for example, FNOL accord form or police report.
cc_exposure.ExposureISOMatchReports = ISO match reports for this exposure.
cc_exposure.ExposureMetrics = Metrics related to this exposure.
cc_exposure.ExposureSynchStates = Sync states related to this exposure.
cc_exposure.IMEPerformed = Independent medical examinations performed.
cc_exposure.MedicalActions = Key medical-related dates.
cc_exposure.Notes = Notes particular to this exposure. Notes can also be associated with the claim in general.
cc_exposure.OtherCoverageDet = Details of other coverage.
cc_exposure.ReserveLines = ReserveLines relating to this exposure.
cc_exposure.RoleAssignments = The user role assignments for this exposure.
cc_exposure.Roles = The contacts and their roles associated with this exposure.
cc_exposure.ServiceRequests = Service requests associated with this exposure.
cc_exposure.Settlements = Settlements with the employee.
cc_exposure.Text = Large text fields associated with exposure.
cc_exposure.Transactions = All financial transactions relating to this exposure.  For rules, it is much better to use one of the getXXXIterator() methods and for the UI it is much better to use one of the getXXXQuery() methods to retrieve all transactions or a specific subtype of Transactions for the exposure.

cc_exposureisomatchreport = 
      Details of a match for an Exposure returned by the Insurance Office Services (ISO) ClaimSearch service.
      If ISO ClaimSearch integration is enabled then descriptions of new or changed Exposures are sent to the
      ISO ClaimSearch service to see if any suspiciously similar claims have been filed at other companies.
      If ISO ClaimSearch returns a "match report", indicating that one or more similar claims have been
      filed, then the report is added to the claim as a document and the most important information from
      each reported match is stored in an ISOMatchReport entity.
    

cc_exposureisomatchreport.ID = Internally managed primary key
cc_exposureisomatchreport.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_exposureisomatchreport.ClaimNumber = Claim number of matching claim.
cc_exposureisomatchreport.CreateTime = Timestamp when the object was created
cc_exposureisomatchreport.CreateUser = User who created the object
cc_exposureisomatchreport.DateOfLoss = Loss date of matching claim.
cc_exposureisomatchreport.Exposure = The related exposure.
cc_exposureisomatchreport.InsurerAddress1 = 1st line of insuring company address.
cc_exposureisomatchreport.InsurerAddress2 = 2nd line of insuring company address.
cc_exposureisomatchreport.InsurerAddress3 = 3rd line of insuring company address.
cc_exposureisomatchreport.InsurerAddressCity = City of insuring company address.
cc_exposureisomatchreport.InsurerAddressPostalCode = Postal code of insuring company address.
cc_exposureisomatchreport.InsurerAddressState = State of insuring company address.
cc_exposureisomatchreport.InsurerPhone = Phone number of insuring company.
cc_exposureisomatchreport.InsuringCompany = Insuring company of matching claim.
cc_exposureisomatchreport.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_exposureisomatchreport.MatchReasons = Reasons why claim/exposure matched at ISO.
cc_exposureisomatchreport.PolicyNumber = Policy number of matching claim.
cc_exposureisomatchreport.PolicyType = Policy type of matching claim.
cc_exposureisomatchreport.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_exposureisomatchreport.ReceivedDate = Time match report was received.
cc_exposureisomatchreport.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_exposureisomatchreport.UpdateTime = Timestamp when the object was last updated
cc_exposureisomatchreport.UpdateUser = User who last updated the object

cc_exposuremetric = Metrics related to a exposure

cc_exposuremetric.ID = Internally managed primary key
cc_exposuremetric.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_exposuremetric.CreateTime = Timestamp when the object was created
cc_exposuremetric.CreateUser = User who created the object
cc_exposuremetric.Exposure = Exposure to which this metric is related.
cc_exposuremetric.MetricLimitDenorm = The metric limit for the exposure metric, denormalized from the claim's inital exposure metric limits array.
cc_exposuremetric.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_exposuremetric.ReachRedTime = Time the red limit was or will be reached
cc_exposuremetric.ReachYellowTime = Time the yellow limit was or will be reached.
cc_exposuremetric.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_exposuremetric.UpdateTime = Timestamp when the object was last updated
cc_exposuremetric.UpdateUser = User who last updated the object
cc_exposuremetric.ActivitySkipped = Did the user explicitly skip the initial contact with claimant activity?
cc_exposuremetric.DecimalValue = Decimal field to store the value.
cc_exposuremetric.IntegerValue = Integer field to store the value.
cc_exposuremetric.MoneyValue = Money field to store the money value.
cc_exposuremetric.PercentValue = Percent field to store the value.
cc_exposuremetric.IntegerValue = Integer field to store the value.
cc_exposuremetric.IsOpen = The value of an open time based metric is now - start time, once closed it has a fixed integer value
cc_exposuremetric.Skipped = True if the metric is closed because the normal closing event was skipped.
cc_exposuremetric.StartTime = Starting time of the metric.

cc_expmetriclimit = Limits for metrics related to an exposure

cc_expmetriclimit.ID = Internally managed primary key
cc_expmetriclimit.AscendingLimitOrder = Boolean field to indicate the direction of comparison for value validation 
cc_expmetriclimit.CreatedGeneration = Generation number at which this limit was created
cc_expmetriclimit.CreateTime = Timestamp when the object was created
cc_expmetriclimit.CreateUser = User who created the object
cc_expmetriclimit.Currency = Currency for this limit, for non money based limits this is always the default currency.
cc_expmetriclimit.ExposureMetricType = Type of exposure metric to which this limit applies.
cc_expmetriclimit.ExposureTier = Exposure tier to which this limit applies, or null if this is a default limit
cc_expmetriclimit.MetricUnit = Units for this type of metric.
cc_expmetriclimit.PolicyTypeMetricLimits = Back pointer to policy type metric limits object that owns this limit.
cc_expmetriclimit.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_expmetriclimit.RetiredDate = Date at which this limit was retired, or null if still active.
cc_expmetriclimit.RetiredGeneration = Generation number at which this limit was retired, or null if still active
cc_expmetriclimit.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_expmetriclimit.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_expmetriclimit.UpdateTime = Timestamp when the object was last updated
cc_expmetriclimit.UpdateUser = User who last updated the object
cc_expmetriclimit.DecimalRedValue = Decimal field to store the red value.
cc_expmetriclimit.DecimalTargetValue = Decimal field to store the target value.
cc_expmetriclimit.DecimalYellowValue = Decimal field to store the yellow value.
cc_expmetriclimit.IntegerRedValue = Integer field to store the red value.
cc_expmetriclimit.IntegerTargetValue = Integer field to store the target value.
cc_expmetriclimit.IntegerYellowValue = Integer field to store the yellow value.
cc_expmetriclimit.MoneyRedValue = Money field to store the red value.
cc_expmetriclimit.MoneyTargetValue = Money field to store the target value.
cc_expmetriclimit.MoneyYellowValue = Money field to store the yellow value.
cc_expmetriclimit.PercentRedValue = Percent field to store the red value.
cc_expmetriclimit.PercentTargetValue = Percent field to store the target value.
cc_expmetriclimit.PercentYellowValue = Percent field to store the yellow value.

cc_exposurerpt = 
      Denormalized financial calculations for exposures.  These values are kept
      up-to-date as financials are recorded in the system.  They can be recalculated
      if necessary through a batch process when the server is in maintenance mode.
    

cc_exposurerpt.ID = Internally managed primary key
cc_exposurerpt.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_exposurerpt.AvailableReserves = The available reserves on an exposure.
cc_exposurerpt.AvailableReservesReporting = The available reserves on an exposure, in Reporting/Default Currency.
cc_exposurerpt.Claim = The exposure's claim.
cc_exposurerpt.CreateTime = Timestamp when the object was created
cc_exposurerpt.CreateUser = User who created the object
cc_exposurerpt.Exposure = The exposure that the calculations are on.
cc_exposurerpt.FuturePayments = The total of awaiting submission payments scheduled to be sent after today.
cc_exposurerpt.FuturePaymentsReporting = The total of awaiting submission payments scheduled to be sent after today, in Reporting/Default Currency.
cc_exposurerpt.OpenRecoveryReserves = The open recovery reserves on an exposure.
cc_exposurerpt.OpenRecoveryReservesReporting = The open recovery reserves on a claim, in Reporting/Default Currency.
cc_exposurerpt.OpenReserves = The open reserves.
cc_exposurerpt.OpenReservesReporting = The open reserves on an exposure, in Reporting/Default Currency.
cc_exposurerpt.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_exposurerpt.RemainingReserves = The remaining reserves on an exposure.
cc_exposurerpt.RemainingReservesReporting = The remaining reserves on an exposure, in Reporting/Default Currency.
cc_exposurerpt.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_exposurerpt.TotalPayments = The total payments.
cc_exposurerpt.TotalPaymentsReporting = The total payments on an exposure, in Reporting/Default Currency.
cc_exposurerpt.TotalRecoveries = The total recoveries on an exposure.
cc_exposurerpt.TotalRecoveriesReporting = The total recoveries on a claim, in Reporting/Default Currency.
cc_exposurerpt.UpdateTime = Timestamp when the object was last updated
cc_exposurerpt.UpdateUser = User who last updated the object

cc_exposuresynchst = <p>
Represents the synchronization state of an <code>Exposure</code> with respect to a particular
<code>MessageSink</code>. As part of the work of integrating your Guidewire application with other external and/or legacy
systems, <code>MessageSink</code> entities will be set up to receive messages and update those systems to reflect the
new state of the <code>Exposure</code> in the system.</p><p>
Due to the asynchronous nature of messaging, those messages may not be transmitted immeditately, so the <code>ExposureSynchState</code>
entity exists to track whether the external system represented by a particular <code>MessageSink</code> can be considered to
be up-to-date with the system changes.</p>
<p>See {@link com.guidewire.pl.system.typelist.tl.SynchState} for the available synchronization states.</p>
@see Exposure#getExposureSynchStates
      
    

cc_exposuresynchst.ID = Internally managed primary key
cc_exposuresynchst.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_exposuresynchst.Exposure = The Exposure to which the synchronization state applies.
cc_exposuresynchst.MessageSink = Identifies the message sink to which the synchronization state applies.
cc_exposuresynchst.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_exposuresynchst.SynchState = The synchronization state of the given Exposure with respect to the given message sink.

cc_exposuretext = A text field related to an exposure.

cc_exposuretext.ID = Internally managed primary key
cc_exposuretext.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_exposuretext.Exposure = Related exposure.
cc_exposuretext.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_exposuretext.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_exposuretext.Text = The text associated with the exposure.
cc_exposuretext.TextType = Meaning of the text field.

cc_bizexprfragment = Fragment of an expression in a Business Rule

cc_bizexprfragment.ID = Internally managed primary key
cc_bizexprfragment.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bizexprfragment.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_bizexprfragment.CodeText = 
cc_bizexprfragment.AdditionalSymbolName = 
cc_bizexprfragment.RuleCondition = 
cc_bizexprfragment.DateValue = 
cc_bizexprfragment.TemplateText = 
cc_bizexprfragment.Elements = 
cc_bizexprfragment.GenerateArray = Whether or not this represents an array instead of a list
cc_bizexprfragment.FullPropertyDenorm = 
cc_bizexprfragment.GenerateOriginalValue = Whether or not this should generate code that produces the original value of this property
cc_bizexprfragment.PropertyName = 
cc_bizexprfragment.RootObjectExpression = 
cc_bizexprfragment.Code = 
cc_bizexprfragment.ListName = 

cc_filtexprfragjoin = null

cc_filtexprfragjoin.ID = Internally managed primary key
cc_filtexprfragjoin.FilteredIterableExpressionFragment = 
cc_filtexprfragjoin.IterableExpression = 
cc_filtexprfragjoin.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_financialthresholdtrigger = 
    A type of automated handler trigger whose execution behavior is based on a specific financial amount reaching, exceeding or falling below a specified threshold value.
  

cc_financialthresholdtrigger.ID = Internally managed primary key
cc_financialthresholdtrigger.AutomatedHandler = 
cc_financialthresholdtrigger.CreateTime = Timestamp when the object was created
cc_financialthresholdtrigger.CreateUser = User who created the object
cc_financialthresholdtrigger.Currency = The Currency of ThresholdAmount; this value must equal a Claim's Currency for that Claim to match this trigger.
cc_financialthresholdtrigger.FinancialThreshold = The financial threshold that can cause this trigger to execute
cc_financialthresholdtrigger.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_financialthresholdtrigger.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_financialthresholdtrigger.ThresholdAmount = Monetary amount for the threshold that must be exceeded to trigger the event
cc_financialthresholdtrigger.TriggeringCause = Specifies which exact occurrence takes place to cause this Trigger to fire
cc_financialthresholdtrigger.UpdateTime = Timestamp when the object was last updated
cc_financialthresholdtrigger.UpdateUser = User who last updated the object

cc_frptupgrade = Temp table used to recalculate from the batch process.

cc_frptupgrade.Claim = Claim id.
cc_frptupgrade.ErdngUnappPmtsRprtng = All pending-approval eroding payments
cc_frptupgrade.ErodingUnapprvdPmts = All pending-approval eroding payments
cc_frptupgrade.Exposure = Exposure id.
cc_frptupgrade.ForExAdjustments = All foreign exchange adjustments to payments
cc_frptupgrade.ForExAdjustmentsRprtng = All foreign exchange adjustments to payments
cc_frptupgrade.FtrErodngPmtsRprtng = All FutureDated eroding payments
cc_frptupgrade.FtrNonErodngPmtsRprtng = All FutureDated non-eroding payments
cc_frptupgrade.FutureErodingPmts = All FutureDated eroding payments
cc_frptupgrade.FutureNonErodingPmts = All FutureDated non-eroding payments
cc_frptupgrade.TotalErodingPmts = All awaiting-submission and committed eroding payments
cc_frptupgrade.TotalNonErodingPmts = All awaiting-submission and committed non-eroding payments
cc_frptupgrade.TotalPayments = All (eroding and non-eroding) awaiting-submission and committed payments
cc_frptupgrade.TotalPaymentsRprtng = All (eroding and non-eroding) awaiting-submission and committed payments
cc_frptupgrade.TotalRecoveries = All committed recoveries
cc_frptupgrade.TotalRecoveriesRprtng = All committed recoveries
cc_frptupgrade.TotalRecoveryReserves = All committed recovery-reserves
cc_frptupgrade.TotalRecReservesRprtng = All committed recovery-reserves
cc_frptupgrade.TotalReserves = All awaiting-submission and commited reserves
cc_frptupgrade.TotalReservesRprtng = All awaiting-submission and commited reserves
cc_frptupgrade.TotlErdngPmtsRprtng = All awaiting-submission and committed eroding payments
cc_frptupgrade.TotlNonErdngPmtsRprtng = All awaiting-submission and committed non-eroding payments

cc_forkeydatadist = Stores foreign key data distribution.

cc_forkeydatadist.ID = Internally managed primary key
cc_forkeydatadist.ForeignKeyEntityName = Name of foreign key entity
cc_forkeydatadist.ForeignKeyName = Name of foreign key.
cc_forkeydatadist.ForeignKeyTableName = Name of table of foreign key
cc_forkeydatadist.NumNonNull = Count of # of non null values.
cc_forkeydatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_forkeydatadist.RatioFKtoPKValues = Ratio of non-null foreign key values to primary key values.
cc_forkeydatadist.TableDataDist = TableDataDist for this object.

cc_fulldenialreason = Compensability Full Denial Reason Codes

cc_fulldenialreason.ID = Internally managed primary key
cc_fulldenialreason.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_fulldenialreason.ClaimWorkComp = Associated Workers Comp Claim Info
cc_fulldenialreason.CreateTime = Timestamp when the object was created
cc_fulldenialreason.CreateUser = User who created the object
cc_fulldenialreason.FullDenialReasonCode = Denial reason code for the compensability decision
cc_fulldenialreason.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_fulldenialreason.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_fulldenialreason.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_fulldenialreason.UpdateTime = Timestamp when the object was last updated
cc_fulldenialreason.UpdateUser = User who last updated the object

cc_genericgroupcolumndatadist = Stores column names for the generic value-group data distribution.

cc_genericgroupcolumndatadist.ID = Internally managed primary key
cc_genericgroupcolumndatadist.ColumnName = Name of column.
cc_genericgroupcolumndatadist.GenericGroupDataDist = GenericGroupDataDist for this object.
cc_genericgroupcolumndatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_genericgroupcountdatadist = Stores value=group size and the number of groups of that size for the generic group data distribution.

cc_genericgroupcountdatadist.ID = Internally managed primary key
cc_genericgroupcountdatadist.GenericGroupDataDist = GenericGroupDataDist for this object.
cc_genericgroupcountdatadist.GroupSize = Size of the group of duplicate values on this this column group and table.
cc_genericgroupcountdatadist.GroupSizeCount = Number of groups for this size for this table.
cc_genericgroupcountdatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_genericgroupdatadist = Stores the distribution of value-group sizes for generic column data.

cc_genericgroupdatadist.ID = Internally managed primary key
cc_genericgroupdatadist.Description = Description.
cc_genericgroupdatadist.ExtendedDescription = Extended description.
cc_genericgroupdatadist.OptionalPredicate = Optional predicate.
cc_genericgroupdatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_genericgroupdatadist.TableDataDist = TableDataDist for this object.
cc_genericgroupdatadist.GenericGroupColumnNameDataDists = Collection of GenericGroupColumnNameDataDists linked to this ArrayDataDist.
cc_genericgroupdatadist.GenericGroupCountDataDists = Collection of GenericGroupCountDataDists linked to this ArrayDataDist.

cc_geocodeworkitem = Queue of Addresses to be geocoded. Work items are recorded as the ID value of Address entities. This is a system-internal entity.
    

cc_geocodeworkitem.ID = Internally managed primary key
cc_geocodeworkitem.Address = Address to be geocoded.
cc_geocodeworkitem.Attempts = 
cc_geocodeworkitem.AvailableSince = The time after which the work item can be tried. Must be null on failed work items
cc_geocodeworkitem.CheckedOutBy = 
cc_geocodeworkitem.CreationTime = 
cc_geocodeworkitem.Exception = Stack trace of the exception
cc_geocodeworkitem.LastUpdateTime = 
cc_geocodeworkitem.Priority = 
cc_geocodeworkitem.ProcessHistoryID = The writer batch job that created this workitem (ProcessHistory).
cc_geocodeworkitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_geocodeworkitem.Status = Status of this workitem.

cc_group = Groups of users.

cc_group.ID = Internally managed primary key
cc_group.CreateTime = Timestamp when the object was created
cc_group.CreateUser = User who created the object
cc_group.GroupType = Type of group (describes its function).
cc_group.LoadFactor = Percentage value of normal workload to be given to this group. This is used for round-robin assignment.
cc_group.Name = The group name; this must be unique.
cc_group.NameKanji = The group name in Kanji. Used only for Japanese and will be null otherwise.
cc_group.Organization = The Organization that this group belongs to.
cc_group.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_group.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_group.SecurityZone = Security zone to which the group belongs.
cc_group.Supervisor = Supervisor of the group.
cc_group.UpdateTime = Timestamp when the object was last updated
cc_group.UpdateUser = User who last updated the object
cc_group.ValidationLevel = Validation level that this object passed (if any) before it was stored.
cc_group.WorldVisible = If true, this group is visible to all users, regardless of what groups they belong to.
cc_group.AssignableQueues = Assignment queues associated with this group.
cc_group.Name_L10N_ARRAY = 
cc_group.Regions = Regions associated with this group.
cc_group.Users = Users belonging to this group.

cc_group_assign = 
        Maintains round-robin assignment state for a particular group or for a particular group and all
        its subgroups. This is an internal class which should only be used by the internals of the
        assignment engine.
      
    

cc_group_assign.ID = Internally managed primary key
cc_group_assign.ActivityLoad = The current load of the group for activities.
cc_group_assign.ClaimLoad = The current load of the group for claims.
cc_group_assign.CreateTime = Timestamp when the object was created
cc_group_assign.CreateUser = User who created the object
cc_group_assign.ExposureLoad = The current load of the group for exposures.
cc_group_assign.Group = The group this state is tracking.
cc_group_assign.GroupType = The group type this state is tracking.
cc_group_assign.IncludeSubGroups = Is this assignment state for just this group, or does it include the sub groups as well.
cc_group_assign.LastActivityGrp = The id of the last group that was assigned an activity.
cc_group_assign.LastActivityUser = The id of the last user that was assigned an activity.
cc_group_assign.LastClaimGrp = The id of the last group that was assigned a claim.
cc_group_assign.LastClaimUser = The id of the last user that was assigned a claim.
cc_group_assign.LastExposureGrp = The id of the last group that was assigned an exposure.
cc_group_assign.LastExposureUser = The id of the last user that was assigned an exposure.
cc_group_assign.LastMatterGrp = The id of the last group that was assigned a matter.
cc_group_assign.LastMatterUser = The id of the last user that was assigned a matter.
cc_group_assign.LastReviewGrp = The id of the last group that was assigned an assignment review activity.
cc_group_assign.LastReviewUser = The id of the last user that was assigned an assignment review activity.
cc_group_assign.LastServiceRequestGrp = The id of the last group that was assigned a service request.
cc_group_assign.LastServiceRequestUser = The id of the last user that was assigned a service request.
cc_group_assign.LastSubrogationGrp = The id of the last group that was assigned a subrogation.
cc_group_assign.LastSubrogationUser = The id of the last user that was assigned a subrogation.
cc_group_assign.LockingColumn = Meaningless column for locking
cc_group_assign.MatterLoad = The current load of the group for matters.
cc_group_assign.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_group_assign.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_group_assign.ReviewLoad = The current load of the group for assignment review activities.
cc_group_assign.ServiceRequestLoad = The current load of the group for service requests.
cc_group_assign.SubrogationLoad = The current load of the group for subrogations.
cc_group_assign.UpdateTime = Timestamp when the object was last updated
cc_group_assign.UpdateUser = User who last updated the object
cc_group_assign.Users = Users belonging to this group.

cc_groupregion = Joins a group to one or more regions.

cc_groupregion.ID = Internally managed primary key
cc_groupregion.Group = Associated group.
cc_groupregion.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_groupregion.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_groupregion.Region = Associated region.

cc_groupuser = 
        Links a user to a group. The GroupUser entity also stores data used by the system when making assignments by
        workload. The system creates this object each time a user is added to a group.
        
    

cc_groupuser.ID = Internally managed primary key
cc_groupuser.Group = The associated group.
cc_groupuser.GroupUserWorkload = Assigned workload information for this group user
cc_groupuser.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_groupuser.LoadFactor = Percentage value of normal workload to be given to this user in this group. This is used for round-robin assignment.
cc_groupuser.LoadFactorType = Type of load factor privileges the user has.
cc_groupuser.Manager = Flag indicating whether the user has permission to see activity within the group.
cc_groupuser.Member = Flag indicating whether the user is a working member of the group (for purposes of work assignment, for example), as opposed to simply being associated with the group as a manager or other auxiliary person.
cc_groupuser.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_groupuser.TextField1 = General-purpose text field.
cc_groupuser.TextField2 = General-purpose text field.
cc_groupuser.TextField3 = General-purpose text field.
cc_groupuser.User = The associated user.

cc_groupuser_assign = 
        Joins a GroupAssignmentState entity to one or more Users. Also stores per user load information
        for round-robin assignment. This is an internal class which should only be used by the internals
        of the assignment engine.
      
    

cc_groupuser_assign.ID = Internally managed primary key
cc_groupuser_assign.ActivityLoad = The current load of the user for activities.
cc_groupuser_assign.ClaimLoad = The current load of the user for claims.
cc_groupuser_assign.ExposureLoad = The current load of the user for exposures.
cc_groupuser_assign.Group = The associated group.   This property is deprecated for its misleading name, please use GroupAssignmentState property
cc_groupuser_assign.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_groupuser_assign.MatterLoad = The current load of the user for matters.
cc_groupuser_assign.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_groupuser_assign.ReviewLoad = The current load of the user for assignment review activities.
cc_groupuser_assign.ServiceRequestLoad = The current load of the user for service requests.
cc_groupuser_assign.SubrogationLoad = The current load of the user for subrogations.
cc_groupuser_assign.User = The associated user.

cc_groupuserworkload = Tracks the amount of workload assigned to a group user

cc_groupuserworkload.ID = Internally managed primary key
cc_groupuserworkload.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_groupuserworkload.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_groupuserworkload.Workload = Total workload assigned to group user
cc_groupuserworkload.WorkloadUpdated = Last time user workload was calculated and updated

cc_group_name_l10n = null

cc_group_name_l10n.ID = Internally managed primary key
cc_group_name_l10n.Language = 
cc_group_name_l10n.Owner = 
cc_group_name_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_group_name_l10n.Value = 

cc_history = 
        Represents a claim event. Each History entity represents a single claim-related event. The event
        may or may not have a related exposure or matter. A rule that results in a History event can
        provide a rule ID that is stored with the event. The set of History events related to an individual
        claim represent an event audit trail for that claim.
      
    

cc_history.ID = Internally managed primary key
cc_history.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_history.BulkInvoice = Associated bulk invoice. Optional.
cc_history.Claim = Associated claim.
cc_history.CustomType = Customer-defined history event type. This is used to support rules that execute only once per claim.
cc_history.Description = Description of the history event.
cc_history.EventTimestamp = Timestamp when the event occurred.
cc_history.Exposure = Associated exposure. Optional.
cc_history.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_history.Matter = Associated matter. Optional.
cc_history.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_history.RuleUID = The unique id of the rule that caused this history event to be created. Optional.
cc_history.Subrogation = 
cc_history.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_history.TransactionSet = Associated transaction set. Optional.
cc_history.Type = Type of claim or exposure event.
cc_history.User = User who created this history event. Optional.

cc_holiday = List of holidays.

cc_holiday.ID = Internally managed primary key
cc_holiday.AppliesToAllZones = True if this holiday applies to all zones (in which case HolidayZones should be empty). If false and HolidayZones has elements, this holiday applies to those zones.  If false and HolidayZones is empty, this holiday doesn't apply anywhere.
cc_holiday.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_holiday.Name = The name of a holiday in the business calendar.
cc_holiday.OccurrenceDate = The date of a holiday in the business calendar.
cc_holiday.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_holiday.HolidayTags = The tags that observe this holiday.
cc_holiday.HolidayZones = The zones that observe this holiday.
cc_holiday.Name_L10N_ARRAY = 

cc_holiday_tag = A tag that observes a certain holiday.

cc_holiday_tag.ID = Internally managed primary key
cc_holiday_tag.Holiday = The holiday.
cc_holiday_tag.HolidayTagCode = The code for this holiday tag.
cc_holiday_tag.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_holiday_tag.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_holiday_zone = A zone that observes a certain holiday.

cc_holiday_zone.ID = Internally managed primary key
cc_holiday_zone.Code = The code for this zone, this is the value that should be used for zone lookups.
cc_holiday_zone.Country = Country of this holiday zone.
cc_holiday_zone.Holiday = The holiday.
cc_holiday_zone.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_holiday_zone.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_holiday_zone.ZoneType = Type of this holiday zone.

cc_holiday_nam_l10n = null

cc_holiday_nam_l10n.ID = Internally managed primary key
cc_holiday_nam_l10n.Language = 
cc_holiday_nam_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_holiday_nam_l10n.Owner = 
cc_holiday_nam_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_holiday_nam_l10n.Value = 

cc_houranalysisdatadist = Stores hour analysis data distribution.

cc_houranalysisdatadist.ID = Internally managed primary key
cc_houranalysisdatadist.AvgRowsPerHour = Average number of rows per hour.
cc_houranalysisdatadist.DatetimeColumnName = Name of datetime column.
cc_houranalysisdatadist.MaxRowsPerHour = Maximum number of rows per hour.
cc_houranalysisdatadist.MinRowsPerHour = Minimum number of rows per hour.
cc_houranalysisdatadist.mnth = Month
cc_houranalysisdatadist.NumDistinctDates = Number of distinct hours in month.
cc_houranalysisdatadist.NumDistinctHoursInDay = Number of distinct hours in day.
cc_houranalysisdatadist.NumNonNullNonLoadableDates = Number of non-null, non-loadable rows.
cc_houranalysisdatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_houranalysisdatadist.TableDataDist = TableDataDist for this object.
cc_houranalysisdatadist.yr = Year

cc_icdcode = 
        Represents a collection of valid ICD codes (International Statistical Classification of
        Diseases and Related Health Problems) used for medical diagnoses on an injury incident.

    

cc_icdcode.ID = Internally managed primary key
cc_icdcode.AvailabilityDate = The date this code becomes available
cc_icdcode.BodySystem = Broad classification of diagnosis types
cc_icdcode.Chronic = Is the condition chronic
cc_icdcode.Code = ICD 9 or 10 Code
cc_icdcode.CodeDesc = ICD code description
cc_icdcode.CreateTime = Timestamp when the object was created
cc_icdcode.CreateUser = User who created the object
cc_icdcode.ExpiryDate = The date this code expires
cc_icdcode.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_icdcode.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_icdcode.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_icdcode.UpdateTime = Timestamp when the object was last updated
cc_icdcode.UpdateUser = User who last updated the object
cc_icdcode.CodeDesc_L10N_ARRAY = 

cc_icdcod_desc_i18n = null

cc_icdcod_desc_i18n.ID = Internally managed primary key
cc_icdcod_desc_i18n.Language = 
cc_icdcod_desc_i18n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_icdcod_desc_i18n.Owner = 
cc_icdcod_desc_i18n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_icdcod_desc_i18n.Value = 

cc_IMEPerformed = Independent medical examination performed.

cc_IMEPerformed.ID = Internally managed primary key
cc_IMEPerformed.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_IMEPerformed.CreateTime = Timestamp when the object was created
cc_IMEPerformed.CreateUser = User who created the object
cc_IMEPerformed.Exposure = The related Exposure.
cc_IMEPerformed.IMEDate = The date the independent medical examination was performed.
cc_IMEPerformed.IMEType = The type of independent medical examination.
cc_IMEPerformed.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_IMEPerformed.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_IMEPerformed.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_IMEPerformed.UpdateTime = Timestamp when the object was last updated
cc_IMEPerformed.UpdateUser = User who last updated the object

cc_inboundhistory = History of inbound calls: soap and startable plugins

cc_inboundhistory.ID = Internally managed primary key
cc_inboundhistory.CompleteDate = The date this call completed.
cc_inboundhistory.ProfilerData = Raw Profiler data
cc_inboundhistory.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_inboundhistory.StartDate = The date this call started.
cc_inboundhistory.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_inboundhistory.OperationName = The name of the operation.
cc_inboundhistory.ServerName = The name of the server receiving the request.
cc_inboundhistory.ServiceName = The name of the service.
cc_inboundhistory.PluginName = The name of the plugin.

cc_incident = Report of an incident related to a claim.

cc_incident.ID = Internally managed primary key
cc_incident.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_incident.AssessmentCloseDate = Date when this Assessment is complete
cc_incident.AssessmentComment = Assessment Comment
cc_incident.AssessmentName = The name or subject of this negotiation.
cc_incident.AssessmentStatus = AssessmentStatus
cc_incident.AssessmentTargetCloseDate = Date when this Assessment is expected to be complete
cc_incident.AssessmentType = AssessmentType
cc_incident.Claim = Claim to which this incident is related.
cc_incident.CreateTime = Timestamp when the object was created
cc_incident.CreateUser = User who created the object
cc_incident.Description = General description of the incident.
cc_incident.IncludeContentLineItems = Boolean field to indicate if assessmentcontentitems are utilized
cc_incident.IncludeLineItems = Boolean field to indicate if assessmentitems are utilized
cc_incident.InternalUser = Internal User
cc_incident.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_incident.LossEstimate = Estimated cost of the loss.
cc_incident.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_incident.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_incident.Severity = Severity of the loss.
cc_incident.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_incident.UpdateTime = Timestamp when the object was last updated
cc_incident.UpdateUser = User who last updated the object
cc_incident.ContentItemLine = A list of line items for this assessment.
cc_incident.Exposures = A list of exposures for this incident
cc_incident.ItemLine = A list of line items for this assessment.
cc_incident.Roles = The contacts and their roles associated with this incident.
cc_incident.ServiceRequests = Service requests associated with this incident.
cc_incident.SourceLine = A source for this assessment.
cc_incident.BaggageMissingFrom = The date/time the baggage was discovered to be missing
cc_incident.BaggageRecoveredOn = The date/time the baggage was recovered
cc_incident.BaggageType = Type of baggage
cc_incident.CarrierCompensated = Indicates if the carrier compensated the claimant for the baggage loss or delay
cc_incident.CarrierCompensatedAmount = Amount the carrier compensated for the baggage loss or delay
cc_incident.DelayOnly = Indicates if this is a delay only loss
cc_incident.RelatedTripRU = Related trip
cc_incident.DamagedAreaSize = Size of the damaged area in sq. feet, sq. meters or other units of measurement
cc_incident.DebrisRemovalInd = Debris Removal Service requested.  Deprecated: No longer used in the base configuration.  The equivalent of a true value for this field in 8.0 is the presence of a ServiceRequest with the 'Property - Emergency services - Debris removal' service.
cc_incident.DwellingRoomDamages = Information about rooms damaged as a result of the incident.
cc_incident.EMSInd = Emergency Management Service requested.  Deprecated: No longer used in the base configuration.  The equivalent of a true value for this field in 8.0 is the presence of a ServiceRequest with the 'Home services - Emergency services - Make safe' service.
cc_incident.FireProtectionAvailable = Is fire protection available
cc_incident.MaterialsDamaged = Materials damaged as a result of the incident, for instance, floor, walls etc.
cc_incident.NumberOfPeopleOnPolicy = Number of people on the policy
cc_incident.PropertySize = Size of the property in sq. feet, sq. meters or other units of measurement
cc_incident.YearBuilt = Year the property was built
cc_incident.YearsInHome = Number of years the insured has owned the home
cc_incident.AlarmType = Alarm Type for property
cc_incident.ClassType = Property attribute class type for Building details
cc_incident.ExtWallMat = External Wall material at scene.
cc_incident.FireProtDetails = dummy field for fire details
cc_incident.HazardInvolved = Was Hazardous Waste Involved?
cc_incident.LossArea = Loss Area of Property
cc_incident.MoldInvolved = Was Mold Involved?
cc_incident.NumSprinkler = Number of Sprinklers at Scene
cc_incident.NumSprinkOper = Number of sprinklers that were operated
cc_incident.NumStories = Number of Stories in the building/property
cc_incident.OccupancyType = Where the property in question is occupied.
cc_incident.Property = The property involved in the incident.
cc_incident.RoofMaterial = Roof Deck Materials for property
cc_incident.SprinklerType = Sprinkler type for property
cc_incident.SprinkRetServ = Sprinklers returned to service.
cc_incident.AmbulanceUsed = Ambulance arrived during the loss or not.
cc_incident.BodyParts = Details of body parts injured.
cc_incident.ClaimIncident = True for the one InjuryIncident per claim that holds injury fields formerly on Claim, for Workers Comp.
cc_incident.DetailedInjuryType = Detailed Injury category.
cc_incident.DisabledDueToAccident = For non-WC, to characterize the disability.
cc_incident.GeneralInjuryType = High-level categorization of the injury.
cc_incident.Impairment = Percentage impairment.
cc_incident.InjuryDiagnoses = All ICD codes associated with this incident
cc_incident.LostWages = True if the injured person lost wages as a result of the injury.
cc_incident.MedicalTreatmentType = Type of treatment received.
cc_incident.ReturnToModWorkActual = If true, the field, ReturnToModWorkDate, is actual; if false, then date is projected 
cc_incident.ReturnToModWorkDate = the Return to Modified Work date for this claim, if ReturnToModWorkActual is true, this date is actual, otherwise it is projected 
cc_incident.ReturnToModWorkValid = True indicates that Modified Duty is applicable for this injured person and will be tracked
cc_incident.ReturnToWorkActual = If true, the field, ReturnToWorkDate, is actual; if false, then date is projected 
cc_incident.ReturnToWorkDate = the Return to Work date for this claim, if ReturnToWorkActual is true, this date is actual, otherwise it is projected 
cc_incident.ReturnToWorkValid = True indicates that Return to Work will be tracked for this person
cc_incident.StartDate = The date for which the insured started staying at the lodging provider.
cc_incident.LocationAddress = Location address of the incident. Previous fields that made up this address described as 'Location of the Exposed Vehicle'.
cc_incident.LossDesc = Loss occurred if Other is selected Description needed.
cc_incident.LossOccured = Where Loss occurred
cc_incident.FencesDamaged = Whether fences were damaged
cc_incident.PropertyContentsScheduledItems = Affected scheduled items, selected from the high value property items listed on the policy
cc_incident.AlreadyRepaired = Has the item been repaired already?
cc_incident.AppraisalFirstAppointment = Scheduled time for the Appraisal from First Notice.  Deprecated: No longer used in the base configuration.  The equivalent of this field in 8.0 is the RequestedQuoteCompletionDate of a ServiceRequest with the 'Property - Inspection - Appraisal' service.
cc_incident.DescOther = Other Description
cc_incident.EstDamageType = Total estimate of damage for the event, if known, at the time that the loss was reported. 
cc_incident.EstimatesReceived = Have the repair estimates been received
cc_incident.EstRepairCost = Estimated Repair Cost
cc_incident.EstRepairTime = Estimated Repair Time
cc_incident.ExtDamagetxt = extent of damage to property text
cc_incident.InspectionRequired = Is an inspection required? Deprecated: No longer used in the base configuration.  The equivalent of a true value for this field in 8.0 is the presence of a ServiceRequest with the 'Property - Inspection - Appraisal' service.
cc_incident.LodgingProviders = Lodging providers for this incident
cc_incident.LossofUse = Whether there has been loss of use
cc_incident.MealsDays = Number of days of meals
cc_incident.MealsPeople = Number of people requiring meals
cc_incident.MealsRate = Daily rate of meals
cc_incident.PropertyDesc = Description of property
cc_incident.TypeofProperty = 
cc_incident.WhenToView = Possible dates when the damage may be viewed.  Deprecated: No longer used in the base configuration.  The equivalent of this field in 8.0 is the RequestedQuoteCompletionDate of a ServiceRequest with the 'Property - Inspection - Appraisal' service.
cc_incident.TripAccommodations = All trip accommodations associated with this policy
cc_incident.TripRU = Related risk unit for this incident
cc_incident.TripSegments = All trip segments associated with this policy
cc_incident.AffdvCmplInd = Affidavit completed Indicator
cc_incident.AirbagsDeployed = Whether or not airbags deployed
cc_incident.AirbagsMissing = Airbags Missing?
cc_incident.AntiThftInd = Vehicle equipped with anti-theft device Indicator
cc_incident.Appraisal = Indicator for Appraisal
cc_incident.BodyShopSelected = Indicator for Body Shop information
cc_incident.CitationIssued = An indicator if there are citations.
cc_incident.Citations = 
cc_incident.Collision = Whether vehicle was involved in a collision?
cc_incident.CollisionPoint = Point of first impact.
cc_incident.ComponentsMissing = Major Components Missing?
cc_incident.DateSalvageAssigned = Date assignment made to salvage team
cc_incident.DateVehicleRecovered = Whether vehicle has been recovered
cc_incident.DateVehicleSold = Whether vehicle has been sold
cc_incident.DriverRelation = Relationship of the driver to the insured. This is redundant for a first-party loss.
cc_incident.DriverRelToOwner = Relationship of the driver to the vehicle's owner. This is redundant for a first-party loss.
cc_incident.EquipmentFailure = Whether or not equipment failure was involved in the accident
cc_incident.Extrication = Extrication Required?
cc_incident.FireBurnDash = Fire Burn the Dash?
cc_incident.FireBurnEngine = Fire Burn the Engine?
cc_incident.FireBurnWindshield = Fire Burn the Windshield?
cc_incident.FloodSaltWater = Flood Occur Salt Water?
cc_incident.HitAndRun = Boolean field to indicate if a claim involves hit and run
cc_incident.InteriorMissing = Any Of The Interior Missing?
cc_incident.LocationInd = Whether vehicle location is different from insured's address?  Deprecated: No longer used in the base configuration.  The equivalent of this field in 8.0 is the ServiceAddress of a ServiceRequestInstruction with the 'Auto - Inspect / Repair - Auto body' service.
cc_incident.LotNumber = 
cc_incident.Mileage100K = Mileage over 100K?
cc_incident.MinorOnPolicy = If the driver involved in accident is a minor, is he/she listed in the policy?
cc_incident.MovePermission = Whether permission to move the vehicle has been received
cc_incident.OdomRead = Odometer reading
cc_incident.OwnerRetainingSalvage = Boolean field to indicate if Owner will retain the salvaged car or not
cc_incident.OwnersPermission = Whether the vehicle was driven with the owner's permission.
cc_incident.PercentageDrivenByMinor = % of time vehicle used by the minor
cc_incident.PhantomVehicle = Unknown 3rd party vehicle involved or not(e.g. Hit and Run).
cc_incident.RecovClassType = Describes which parts or recovered vehicle were stripped
cc_incident.RecovCondType = Describes which general condition of vehicle upon recovery
cc_incident.RecovDate = Date the vehicle was recovered
cc_incident.RecoveryLocation = The Address at which the recovery was made.
cc_incident.RecovInd = Recovery Indicator
cc_incident.RecovState = State (aka Territory) where the vehicle upon recovery
cc_incident.RentalAgency = Vehicle Rental Agency. Deprecated: No longer used in the base configuration.  The equivalent of this field in 8.0 is the Specialist of a ServiceRequest with the 'Auto - Other - Car rental' service.
cc_incident.RentalBeginDate = Date the vehical rental begins
cc_incident.RentalDailyRate = Vehicle Rental Daily Rate
cc_incident.RentalEndDate = date the vehicle rental ends
cc_incident.RentalRequired = Indicator for vehicle rental requirement.  Deprecated: No longer used in the base configuration.  The equivalent of a true value for this field in 8.0 is the presence of a ServiceRequest with the 'Auto - Other - Car rental' service.
cc_incident.RentalReserveNo = Vehicle rental Reservation Number
cc_incident.RepWhereDisInd = Repaired where disabled indicator.  Deprecated: No longer used in the base configuration.  The equivalent of a true value for this field in 8.0 is the presence of a ServiceRequest with the 'Auto - Inspect / Repair - Auto body' service.
cc_incident.SalvageCompany = 
cc_incident.SalvageNet = Net salvage recovery
cc_incident.SalvagePrep = Vehicle prep fees
cc_incident.SalvageProceeds = Amount vehicle was sold for
cc_incident.SalvageStorage = Salvage storage
cc_incident.SalvageTitle = Title fees
cc_incident.SalvageTow = Towing fee
cc_incident.Speed = Speed of vehicle at impact, in MPH.
cc_incident.StorageAccrInd = 
cc_incident.StorageFclty = 
cc_incident.StorageFeeAmt = 
cc_incident.TotalLoss = Whether the the vehicle is a total loss.
cc_incident.TotalLossPoints = Total Loss Calculated Points
cc_incident.TrafficViolation = Did the vehicle involved in the accident violate traffic?
cc_incident.VehCondType = 
cc_incident.Vehicle = Vehicle associated with the incident.
cc_incident.VehicleACV = Vehicle's actual cash value
cc_incident.VehicleAge10Years = Vehicle Ten Years Old?
cc_incident.VehicleAge5Years = Vehicle Five Years Old?
cc_incident.VehicleDirection = Direction the vehicle was traveling at impact.
cc_incident.VehicleDriveable = Vehicle Driveable?
cc_incident.VehicleLocation = Current location of the vehicle.
cc_incident.VehicleLossParty = The loss party; generally either first- or third-party loss.
cc_incident.VehicleOperable = Indicator to state if a vehicle is operable or not
cc_incident.VehicleParked = Was the vehicle parked at the time of the loss?
cc_incident.VehiclePolStatus = Policy Status of Vehicle
cc_incident.VehicleRollOver = Vehicle Roll Over?
cc_incident.VehicleSubmerged = Vehicle Fully Submerged?
cc_incident.VehicleTitleRecvd = 
cc_incident.VehicleTitleReqd = 
cc_incident.VehicleType = How the vehicle is related to the insured
cc_incident.VehicleUseReason = Reason for vehicle use
cc_incident.VehLockInd = Vehicle locked Indicator
cc_incident.VehStolenInd = Vehicle stolen Indicator
cc_incident.VehTowedInd = Deprecated: No longer used in the base configuration.  The equivalent of a true value for this field in 8.0 is the presence of a ServiceRequest with the 'Auto - Other - Towing service'.
cc_incident.WaterLevelDash = Water Level Reach Dash?
cc_incident.WaterLevelSeats = Water Level Reach Seats?

cc_IncompatibleNewExposure = Allows insurer to determine which coverages are invalid based upon the coverages of existing exposures.  For example, a Collision and a Comprehensive coverage typically are not both applicable for an Auto claim

cc_IncompatibleNewExposure.ID = Internally managed primary key
cc_IncompatibleNewExposure.ExistingExposures = New Coverage Type of the coverage on this exposure.
cc_IncompatibleNewExposure.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_IncompatibleNewExposure.NewExposureCoverage = A coverage for an exposure that may not be appropriate for addition to the claim
cc_IncompatibleNewExposure.PolicyType = Type of policy.
cc_IncompatibleNewExposure.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_injurydiagnosis = Represents a medical diagnosis on an injury incident. Each diagnosis is linked to the associated ICD code.
    

cc_injurydiagnosis.ID = Internally managed primary key
cc_injurydiagnosis.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_injurydiagnosis.Comments = Comments
cc_injurydiagnosis.Compensable = Is this diagnosis compensable
cc_injurydiagnosis.Contact = Provider name
cc_injurydiagnosis.CreateTime = Timestamp when the object was created
cc_injurydiagnosis.CreateUser = User who created the object
cc_injurydiagnosis.DateEnded = The date this diagnosis was ended
cc_injurydiagnosis.DateStarted = The date this diagnosis was started
cc_injurydiagnosis.ICDCode = Key to selected ICD
cc_injurydiagnosis.InjuryIncident = Injury incident this diagnosis is related to
cc_injurydiagnosis.IsPrimary = Indicates if this is the primary diagnosis on the incident
cc_injurydiagnosis.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_injurydiagnosis.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_injurydiagnosis.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_injurydiagnosis.UpdateTime = Timestamp when the object was last updated
cc_injurydiagnosis.UpdateUser = User who last updated the object

cc_instrumentedmessage = Profiler data for each destination

cc_instrumentedmessage.ID = Internally managed primary key
cc_instrumentedmessage.DestinationID = Identifies the message destination.
cc_instrumentedmessage.EndTime = Timestamp when the instance was shutdown.
cc_instrumentedmessage.ProfilerData = Raw Profiler data
cc_instrumentedmessage.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_instrumentedmessage.StartTime = Timestamp when the instance was started.

cc_instrumentedworkexecutor = Instrumentation information for a work queue executor instance.

cc_instrumentedworkexecutor.ID = Internally managed primary key
cc_instrumentedworkexecutor.AppServerName = The app server name.
cc_instrumentedworkexecutor.EndTime = Timestamp when the executor was shutdown.
cc_instrumentedworkexecutor.MaxNumberOfWorkers = Maximum number of parallel workers.
cc_instrumentedworkexecutor.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_instrumentedworkexecutor.StartTime = Timestamp when the executor was started.
cc_instrumentedworkexecutor.StopInitiated = Timestamp when the executor stop was initiated.
cc_instrumentedworkexecutor.WorkQueueID = The related writer batch process, identifying this queue.

cc_instrumentedworkertask = Instrumentation information for a run of a distributed worker instance.

cc_instrumentedworkertask.ID = Internally managed primary key
cc_instrumentedworkertask.Cdcs = The number of exceptions caught during workitem processing.
cc_instrumentedworkertask.ConsecutiveExceptions = Count of the number of consecutive work items that resulted in an exception.
cc_instrumentedworkertask.CustomInstrumentationData = Optional custom instrumentation
cc_instrumentedworkertask.EndTime = Timestamp when the instance was shutdown.
cc_instrumentedworkertask.Exceptions = The number of exceptions caught during workitem processing.
cc_instrumentedworkertask.InstanceNumber = The instance number on this app server.
cc_instrumentedworkertask.InstrumentedWorkExecutorID = Executor instance that created this task.
cc_instrumentedworkertask.ManagementElapsed = The number of milliseconds spent managing the work queue.
cc_instrumentedworkertask.OrphansAdopted = The number of orphaned workitems reclaimed.
cc_instrumentedworkertask.ProcessHistoryID = The writer batch job that created all workitem processed by this run.
cc_instrumentedworkertask.ProfilerData = Raw Profiler data
cc_instrumentedworkertask.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_instrumentedworkertask.RanToCompletion = Whether the worker batch ran to completion, or failed or was interrupted.
cc_instrumentedworkertask.StartTime = Timestamp when the instance was started.
cc_instrumentedworkertask.WorkElapsed = The number of milliseconds spent processing work items.
cc_instrumentedworkertask.WorkitemsCheckedOut = The number of workitems checked out.
cc_instrumentedworkertask.WorkitemsFailed = The number of workitems marked as failed.
cc_instrumentedworkertask.WorkitemsProcessed = The number of workitems processed successfully.
cc_instrumentedworkertask.WorkitemsProcessedAfterCdc = The number of workitems processed after previous attempt failed with CDC.
cc_instrumentedworkertask.WorkitemsProcessedAfterError = The number of workitems processed after previous attempt failed with some kind of error (including CDC).
cc_instrumentedworkertask.WorkitemsSkipped = The number of workitems skipped.

cc_InvalidCoverageForCause = Allows insurer to determine which coverages are invalid based upon Loss Cause. .  For example, a Comprehensive coverage typically is not applicable if the cause of loss is Collision with other Vehicle

cc_InvalidCoverageForCause.ID = Internally managed primary key
cc_InvalidCoverageForCause.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_InvalidCoverageForCause.LOBCode = Line of Business code
cc_InvalidCoverageForCause.LossCause = General cause of loss; dependent on loss type.
cc_InvalidCoverageForCause.LossType = High level claim type (for example, Auto or Property).
cc_InvalidCoverageForCause.PolicyType = Type of policy.
cc_InvalidCoverageForCause.PrimaryCoverage = A coverage for an exposure that may not be appropriate for addition to the claim
cc_InvalidCoverageForCause.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_InvalidCoverageForFault = Allows insurer to determine which coverages are invalid based upon FaultRating.  For example, a Liablity coverage typically is not applicable if a third party is at fault

cc_InvalidCoverageForFault.ID = Internally managed primary key
cc_InvalidCoverageForFault.FaultRating = Indicates fault rating.  For example, the insured is at fault.
cc_InvalidCoverageForFault.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_InvalidCoverageForFault.PolicyType = Type of policy.
cc_InvalidCoverageForFault.PrimaryCoverage = A coverage for an exposure that may not be appropriate for addition to the claim
cc_InvalidCoverageForFault.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_largelossthreshold = This reference table contains the information necessary to determine whether a claim has exceeded the
        large loss threshold notification limit based upon the claim's policy type.
    

cc_largelossthreshold.ID = Internally managed primary key
cc_largelossthreshold.CreateTime = Timestamp when the object was created
cc_largelossthreshold.CreateUser = User who created the object
cc_largelossthreshold.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_largelossthreshold.NotificationType = Type of notification.
cc_largelossthreshold.PolicyType = Type of policy.
cc_largelossthreshold.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_largelossthreshold.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_largelossthreshold.ThresholdValue = Large Loss threshold value.
cc_largelossthreshold.UpdateTime = Timestamp when the object was last updated
cc_largelossthreshold.UpdateUser = User who last updated the object

cc_listexprfragjoin = null

cc_listexprfragjoin.ID = Internally managed primary key
cc_listexprfragjoin.ExpressionFragment = 
cc_listexprfragjoin.ListExpressionFragment = 
cc_listexprfragjoin.OrderNumber = 
cc_listexprfragjoin.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_litstatustypeline = 
            Represents the current state of a legal matter. It also contains the date the
            matter entered the status and the date in which it completed the status.
            
    

cc_litstatustypeline.ID = Internally managed primary key
cc_litstatustypeline.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_litstatustypeline.CompletionDate = Date the matter completed this status.
cc_litstatustypeline.CreateTime = Timestamp when the object was created
cc_litstatustypeline.CreateUser = User who created the object
cc_litstatustypeline.LitigationStatus = The current state of litigation.
cc_litstatustypeline.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_litstatustypeline.Matter = Related matter.
cc_litstatustypeline.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_litstatustypeline.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_litstatustypeline.StartDate = Date the matter entered this status.
cc_litstatustypeline.UpdateTime = Timestamp when the object was last updated
cc_litstatustypeline.UpdateUser = User who last updated the object

cc_loadcallback = Timed loader callbacks.

cc_loadcallback.ID = Internally managed primary key
cc_loadcallback.Description = Description of loader callback.
cc_loadcallback.EndTime = Timestamp when the timing completed.
cc_loadcallback.ExecutionOrder = Order of execution (1-N).
cc_loadcallback.ExecutionTime = Execution time of LoaderCallback.
cc_loadcallback.LoadCommand = Parent.
cc_loadcallback.LoadOperation = Parent.
cc_loadcallback.Name = Name of loader callback.
cc_loadcallback.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_loadcallback.StartTime = Timestamp when the timing began.
cc_loadcallback.CallbackResults = Timed loader callback results.

cc_loadcallbackresult = Timed loader callback results.

cc_loadcallbackresult.ID = Internally managed primary key
cc_loadcallbackresult.AffectedRowCount = Number of rows affected.
cc_loadcallbackresult.EndTime = Timestamp when the timing completed.
cc_loadcallbackresult.ExecutionOrder = Order of execution (1-N).
cc_loadcallbackresult.LoadCallback = Parent.
cc_loadcallbackresult.Name = Name of loader callback result.
cc_loadcallbackresult.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_loadcallbackresult.SQLText = SQL text.
cc_loadcallbackresult.StartTime = Timestamp when the timing began.

cc_loadcommand = Staging table load history.

cc_loadcommand.ID = Internally managed primary key
cc_loadcommand.CallingUser = ID of the user who executed the operation.
cc_loadcommand.CommandType = Type of load command.
cc_loadcommand.Description = Description of the load history event.
cc_loadcommand.EndTime = Timestamp when the timing completed.
cc_loadcommand.ErrorCount = Total number of integrity check errors detected for all affected tables (if applicable).
cc_loadcommand.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_loadcommand.RecreateIndexes = ID of batch process to recreate indexes.
cc_loadcommand.StartTime = Timestamp when the timing began.
cc_loadcommand.Callbacks = Timed loader callbacks.
cc_loadcommand.EncryptTables = Timed loader table columns encryptions.
cc_loadcommand.InsertSelects = Timed loader insert/selects.
cc_loadcommand.IntegrityChecks = Timed loader integrity checks.
cc_loadcommand.ParameterNameValuePairs = Parameter values for command.
cc_loadcommand.RowCounts = Row counts.
cc_loadcommand.Steps = Steps.
cc_loadcommand.UpdateDBStatisticsCommands = UpdateDBStatisticsCommands.

cc_loadencryptchunk = Timings for each chuck of encyrption updates

cc_loadencryptchunk.ID = Internally managed primary key
cc_loadencryptchunk.ChunkSize = Number of statements executed in this chunk
cc_loadencryptchunk.EndTime = Timestamp when the timing completed.
cc_loadencryptchunk.LoadEncryptTable = Parent load encyrption step
cc_loadencryptchunk.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_loadencryptchunk.StartTime = Timestamp when the timing began.

cc_loadencrypttable = Encrypt columns in a staging table

cc_loadencrypttable.ID = Internally managed primary key
cc_loadencrypttable.AffectedRowCount = Total rows read and updated
cc_loadencrypttable.ColumnsToEncrypt = Column(s) being encrypted (comma separated)
cc_loadencrypttable.EndTime = Timestamp when the timing completed.
cc_loadencrypttable.LoadCommand = Parent load command
cc_loadencrypttable.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_loadencrypttable.SelectStmt = Select statement used to read rows
cc_loadencrypttable.SizeOfTimedChuck = Target number of update executions in each chunk
cc_loadencrypttable.StartTime = Timestamp when the timing began.
cc_loadencrypttable.TableName = Name of table being updated
cc_loadencrypttable.UpdateStmt = Update statement used to update rows
cc_loadencrypttable.LoadEncryptChunks = 

cc_loaderror = Errors generated by the loader.

cc_loaderror.ErrorID = Load error ID, to ensure uniqueness.
cc_loaderror.ErrorMessage = Description of the failure.
cc_loaderror.LoadErrorType = Type of load error event.
cc_loaderror.Query = Query run to detect the failure.
cc_loaderror.TableName = Name of the staging table, if applicable.

cc_loaderrorrow = Error rows found by the loader.

cc_loaderrorrow.ErrorID = Virtual foreign key to loaderror table
cc_loaderrorrow.ErrorRowID = Load error row ID, to ensure uniqueness.
cc_loaderrorrow.LUWID = Logical Unit of Work ID, if applicable.
cc_loaderrorrow.RowNumber = Row number, if applicable.

cc_loadexclusion = LUWIDs to be excluded by the loader.

cc_loadexclusion.LUWID = Logical Unit of Work ID

cc_loadinsertselect = Timed loader insert/selects.

cc_loadinsertselect.ID = Internally managed primary key
cc_loadinsertselect.AffectedRowCount = Number of rows affected.
cc_loadinsertselect.EndTime = Timestamp when the timing completed.
cc_loadinsertselect.ExecutionOrder = Order of execution (1-N).
cc_loadinsertselect.FKEnablingDuration = Duration of Re-enabling FK.
cc_loadinsertselect.LoadCommand = Denorm FK for unique index.
cc_loadinsertselect.LoadOperation = Parent.
cc_loadinsertselect.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_loadinsertselect.Query = insert/select.
cc_loadinsertselect.StartTime = Timestamp when the timing began.

cc_loadintegritycheck = Timed loader integrity checks.

cc_loadintegritycheck.ID = Internally managed primary key
cc_loadintegritycheck.Description = Description of integrity check.
cc_loadintegritycheck.EndTime = Timestamp when the timing completed.
cc_loadintegritycheck.ExecutionOrder = Order of execution (1-N).
cc_loadintegritycheck.LoadCommand = Denorm FK for unique index.
cc_loadintegritycheck.LoadIntegrityCheckType = Type of loader integrity check.
cc_loadintegritycheck.LoadOperation = Parent.
cc_loadintegritycheck.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_loadintegritycheck.Query = Query from integrity check.
cc_loadintegritycheck.StartTime = Timestamp when the timing began.
cc_loadintegritycheck.ThreadName = Thread name.

cc_loadoperation = Detail of the staging table load history.

cc_loadoperation.ID = Internally managed primary key
cc_loadoperation.AffectedRowCount = Number of rows affected.
cc_loadoperation.EndTime = Timestamp when the timing completed.
cc_loadoperation.ErrorCount = Number of integrity check errors detected (if applicable).
cc_loadoperation.ExecutionOrder = Order of execution (1-N).
cc_loadoperation.HighestID = If associated with a idsgenerated step, contains the end of the id range for the rows being loaded.
cc_loadoperation.LoadStep = Parent step.
cc_loadoperation.LowestID = If associated with a idsgenerated step, contains the start of the id range for the rows being loaded.
cc_loadoperation.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_loadoperation.StartTime = Timestamp when the timing began.
cc_loadoperation.TableName = Affected staging table.
cc_loadoperation.Callbacks = Timed loader callbacks.
cc_loadoperation.InsertSelects = Timed loader insert/selects.
cc_loadoperation.IntegrityChecks = Timed loader integrity checks.
cc_loadoperation.UpdateStatisticsSelects = db update statistics loader selects.

cc_loadparameter = (parameter, value) pairs for load commands.

cc_loadparameter.ID = Internally managed primary key
cc_loadparameter.LoadCommand = Parent.
cc_loadparameter.ParameterName = Parameter name.
cc_loadparameter.ParameterValue = Parameter value.
cc_loadparameter.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_loadrowcount = Row counts for load history.

cc_loadrowcount.ID = Internally managed primary key
cc_loadrowcount.LoadCommand = Parent.
cc_loadrowcount.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_loadrowcount.SourceBlockCount = Number of blocks in source table.
cc_loadrowcount.SourceRowCount = Number of rows in source table.
cc_loadrowcount.SourceTableName = Name of source table.
cc_loadrowcount.StagingBlockCount = Number of blocks in staging table.
cc_loadrowcount.StagingRowCount = Number of rows in staging table.
cc_loadrowcount.StagingTableName = Name of staging table.

cc_loadstep = Steps within a load command.

cc_loadstep.ID = Internally managed primary key
cc_loadstep.EndTime = Timestamp when the timing completed.
cc_loadstep.ExecutionOrder = Order of execution (1-N).
cc_loadstep.LoadCommand = Parent.
cc_loadstep.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_loadstep.StartTime = Timestamp when the timing began.
cc_loadstep.StepType = Type of load step.
cc_loadstep.Operations = Detailed operations.

cc_loadupdatestatisticsselect = Timed loader update statistics selects.

cc_loadupdatestatisticsselect.ID = Internally managed primary key
cc_loadupdatestatisticsselect.EndTime = Timestamp when the timing completed.
cc_loadupdatestatisticsselect.ExecutionOrder = Order of execution (1-N).
cc_loadupdatestatisticsselect.LoadCommand = Denorm FK for unique index.
cc_loadupdatestatisticsselect.LoadOperation = Parent.
cc_loadupdatestatisticsselect.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_loadupdatestatisticsselect.Query = insert/select.
cc_loadupdatestatisticsselect.StartTime = Timestamp when the timing began.
cc_loadupdatestatisticsselect.TableName = Affected staging table.

cc_loadparentstep = null

cc_loadparentstep.ID = Internally managed primary key
cc_loadparentstep.ForeignEntity = 
cc_loadparentstep.Owner = 
cc_loadparentstep.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_locationinfo = location denormed fields

cc_locationinfo.ID = Internally managed primary key
cc_locationinfo.AddressLine1 = First line of original mailing address.
cc_locationinfo.AddressLine1Kanji = First line of mailing address in kanji (used only for Japanese addresses and will be null otherwise)
cc_locationinfo.AddressLine2 = Second line of original mailing address.
cc_locationinfo.AddressLine2Kanji = Second line of mailing address in kanji (used only for Japanese addresses and will be null otherwise)
cc_locationinfo.AddressLine3 = Third line of mailing address.
cc_locationinfo.CEDEX = CEDEX: Special business mail delivery flag (used only for French addresses and will be null otherwise)
cc_locationinfo.CEDEXBureau = CEDEX: Special business mail delivery bureau (used only for French addresses and will be null otherwise)
cc_locationinfo.City = Original City.
cc_locationinfo.CityKanji = City in kanji (used only for Japanese addresses and will be null otherwise)
cc_locationinfo.ClaimInfo = The location for the archived claim
cc_locationinfo.Country = Original Country.
cc_locationinfo.County = Original County.
cc_locationinfo.CreateTime = Timestamp when the object was created
cc_locationinfo.CreateUser = User who created the object
cc_locationinfo.PostalCode = Original Postal code; string to handle Zip+4 and international codes.
cc_locationinfo.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_locationinfo.State = Original State.
cc_locationinfo.UpdateTime = Timestamp when the object was last updated
cc_locationinfo.UpdateUser = User who last updated the object

cc_LodgingProvider = Lodging provider for loss of use

cc_LodgingProvider.ID = Internally managed primary key
cc_LodgingProvider.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_LodgingProvider.Comments = Comments
cc_LodgingProvider.Contact = Lodging provider name
cc_LodgingProvider.CreateTime = Timestamp when the object was created
cc_LodgingProvider.CreateUser = User who created the object
cc_LodgingProvider.EndDate = Lodging end date
cc_LodgingProvider.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_LodgingProvider.LodgingNights = Number of nights of lodging (for backward compatability only)
cc_LodgingProvider.LodgingRate = Lodging cost per night
cc_LodgingProvider.PropertyIncident = PropertyIncident
cc_LodgingProvider.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_LodgingProvider.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_LodgingProvider.StartDate = Lodging start date
cc_LodgingProvider.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_LodgingProvider.UpdateTime = Timestamp when the object was last updated
cc_LodgingProvider.UpdateUser = User who last updated the object

cc_matter = 
            Represents the set of data organized around a single lawsuit or potential lawsuit.
            It contains data fields (such as case number and trail date). A Matter is associated with a single claim. 
            
    

cc_matter.ID = Internally managed primary key
cc_matter.AdDamnumAmount = Ad Damnum Amount
cc_matter.AdDamnumSpecified = Was Ad Damnum specified?
cc_matter.Arbitration = Whether a suit has gone into arbitration.
cc_matter.ArbitrationDate = Current schedule trial date.
cc_matter.ArbitrationRoom = Room number in the arbitration venue.
cc_matter.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_matter.AssignedByUser = User who assigned this entity.
cc_matter.AssignedGroup = Group to which this entity is assigned; null if none assigned
cc_matter.AssignedQueue = Either the Queue to which this entity is assigned (if AssignmentStatus is 'assigned'), the Queue to which the system suggests assignment (if AssignmentStatus is 'manual'), or null if none assigned. Only one of AssignedUserID or AssignedQueueID should be non null.
cc_matter.AssignedUser = Either the User to which this entity is assigned (if AssignmentStatus is 'assigned'), the User to which the system suggests assignment (if AssignmentStatus is 'manual'), or null if none assigned. Only one of AssignedUserID or AssignedQueueID should be non null.
cc_matter.AssignmentDate = Time when entity last assigned
cc_matter.AssignmentStatus = Typelist describing assignment status.
cc_matter.CaseNumber = Official reference number for the lawsuit
cc_matter.Claim = The claim associated with this legal matter.
cc_matter.CloseDate = Date and time when this entity was closed. (Not applicable to all assignable entities)
cc_matter.CourtDistrict = Court jurisdictional district
cc_matter.CourtType = Court type
cc_matter.CreateTime = Timestamp when the object was created
cc_matter.CreateUser = User who created the object
cc_matter.DeclaratoryJgmt = Whether the court has been asked to make a declaratory judgment.
cc_matter.DefenseApptDate = Date the defense counsel was appointed to this matter.
cc_matter.DocketNumber = Court docket number
cc_matter.FileDate = Date the trial was filed in court.
cc_matter.FilingDate = Filing date
cc_matter.FinalLegalCost = The final legal cost.
cc_matter.FinalSettleCost = The final settlement cost.
cc_matter.FinalSettleDate = The actual date of the final settlement (as opposed to the date of the payment).
cc_matter.FirstNotice = Whether the lawsuit was the first notice of the claim.
cc_matter.HearingDate = Current scheduled matter hearing date
cc_matter.HearingRoom = Room number in the hearing venue.
cc_matter.LegalSpecialty = Legal specialty needed for this matter
cc_matter.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_matter.MatterCaseNumber = Case number
cc_matter.MatterType = Type of Matter such as General, Lawsuit, Arbitration, Hearing or Mediation
cc_matter.MediationDate = Date this matter entered mediation.
cc_matter.MediationRoom = Room number in the mediation venue.
cc_matter.MethodServed = Method served
cc_matter.MotionSummaryJgmt = Whether this matter has a motion for summary judgment.
cc_matter.Name = Then name for this matter. Typically of the form 'X vs. Y' once the matter goes to trial.
cc_matter.PreviousGroup = Group to which this entity was previously assigned.
cc_matter.PreviousQueue = Queue to which this entity was previously assigned.
cc_matter.PreviousUser = User to which this entity was previously assigned.
cc_matter.PrimaryCause = Why the lawsuit was brought in the first place.
cc_matter.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_matter.PunitiveAmount = Punitive damages amount
cc_matter.PunitiveDamages = Punitive damages?
cc_matter.ReopenedReason = The reason for reopening the matter.
cc_matter.Resolution = The type of resolution.
cc_matter.ResponseDue = Response Due
cc_matter.ResponseFiled = Response filed
cc_matter.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_matter.RiskType = Describes the overall risk on this matter.
cc_matter.Room = Room number in the venue.
cc_matter.SentToDefenseDate = Date this matter was sent to the defense attorney.
cc_matter.ServiceDate = Service date
cc_matter.StructuredSettle = Whether this matter is a good candidate for structured settlement.
cc_matter.SubrogationSummary = Subrogation information related to this matter.
cc_matter.SubroRelated = Boolean field to mark if Matter related to Subrogation
cc_matter.SuitType = The type of suit.
cc_matter.TrialDate = Current schedule trial date.
cc_matter.UpdateTime = Timestamp when the object was last updated
cc_matter.UpdateUser = User who last updated the object
cc_matter.ValidationLevel = Validation level the matter passed (if any) the last time it was checked.
cc_matter.VenueRating = Rating of venue for this matter
cc_matter.BudgetLines = An array of budget line records
cc_matter.Exposures = The list of exposures to which this matter relates.
cc_matter.Roles = The roles that this claimcontact has.
cc_matter.StatusTypeLines = The progression of status type lines on this matter.

cc_matterexposure = 
            Links an Exposure entity with a Matter entity.
            
    

cc_matterexposure.ID = Internally managed primary key
cc_matterexposure.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_matterexposure.Exposure = Related exposure.
cc_matterexposure.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_matterexposure.Matter = Related matter.
cc_matterexposure.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_maxkey = Maximum keys for each keyable entity type, used by key generator.

cc_maxkey.EntityTableName = Name of table for keyable entity type
cc_maxkey.LockingColumn = Meaningless column for locking
cc_maxkey.MaxKey = Current maximum key for the entity type

cc_medicalaction = Medical action taken related to an exposure.

cc_medicalaction.ID = Internally managed primary key
cc_medicalaction.ActionDate = Date of action.
cc_medicalaction.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_medicalaction.CreateTime = Timestamp when the object was created
cc_medicalaction.CreateUser = User who created the object
cc_medicalaction.Exposure = The related exposure.
cc_medicalaction.FutureActionReq = Type of medical action required in the future.
cc_medicalaction.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_medicalaction.MedicalActionType = Type of action.
cc_medicalaction.NextAppointment = Date of next appointment.
cc_medicalaction.Note = Additional notes on the action.
cc_medicalaction.ProviderName = Name of medical provider.
cc_medicalaction.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_medicalaction.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_medicalaction.UpdateTime = Timestamp when the object was last updated
cc_medicalaction.UpdateUser = User who last updated the object

cc_medicalcontactstatus = 
        Supports Workmen's Compensation claim functionality. The MedicalContactStatus entity tracks contact between a
        claimant and a Contact providing a medical service.
      
    

cc_medicalcontactstatus.ID = Internally managed primary key
cc_medicalcontactstatus.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_medicalcontactstatus.Claim = Foreign key to Claim entity.
cc_medicalcontactstatus.ClaimContact = Foreign key to Contact entity.
cc_medicalcontactstatus.CommunicationDate = Date of contact.
cc_medicalcontactstatus.CreateTime = Timestamp when the object was created
cc_medicalcontactstatus.CreateUser = User who created the object
cc_medicalcontactstatus.InfoSource = Medical information source.
cc_medicalcontactstatus.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_medicalcontactstatus.MedicalTreatmentStatus = Medical treatment status.
cc_medicalcontactstatus.NextFollowUpDate = Date of next follow-up.
cc_medicalcontactstatus.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_medicalcontactstatus.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_medicalcontactstatus.TreatmentOutcome = Medical treatment outcome.
cc_medicalcontactstatus.UpdateTime = Timestamp when the object was last updated
cc_medicalcontactstatus.UpdateUser = User who last updated the object

cc_medicaltreatment = 
        Tracks treatments related to a Workmen's Compensation claim. The MedicalTreatment entity tracks treatment by
        internal classification of diseases (ICD) codes, quantity, and contact delivering the treatment.
      
    

cc_medicaltreatment.ID = Internally managed primary key
cc_medicaltreatment.ActionDate = Date of the medical action.
cc_medicaltreatment.ApprovedTreatment = Approved treatment for injury.
cc_medicaltreatment.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_medicaltreatment.Claim = Foreign key to Claim entity.
cc_medicaltreatment.ClaimContact = Foreign key to ClaimContact entity.
cc_medicaltreatment.CreateTime = Timestamp when the object was created
cc_medicaltreatment.CreateUser = User who created the object
cc_medicaltreatment.ICD1 = ICD-1.
cc_medicaltreatment.ICD2 = ICD-2.
cc_medicaltreatment.ICD3 = ICD-3.
cc_medicaltreatment.ICD4 = ICD-4.
cc_medicaltreatment.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_medicaltreatment.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_medicaltreatment.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_medicaltreatment.TreatmentQuantity = Quantity of treatments approved.
cc_medicaltreatment.UpdateTime = Timestamp when the object was last updated
cc_medicaltreatment.UpdateUser = User who last updated the object

cc_message = <b>getDestinationID</b>.     Messages carry a payload containing the data to be sent to the destination.  Messages are dispatched using a MessageTransport plugin specified in config.xml, which is responsible for sending the message to the receiving system. See the ClaimCenter Integration documentation for more details about the lifecycle of Messages.
      
    

cc_message.ID = Internally managed primary key
cc_message.AckCode = Custom field that may be defined when acknowledging.  This field is deprecated, please define a new custom extension field instead.
cc_message.AckCount = Number of acks received.
cc_message.AfterSendTime = Time of completion of afterSend method.
cc_message.BeforeSendLockedTime = Time of after acquired lock before the call to beforeSend transformations.
cc_message.BeforeSendLockTime = Time of attempting to get lock before the call to beforeSend transformations.
cc_message.BeforeSendTime = Time of completion of beforeSend transformations.
cc_message.Bound = Message Bound/Unbound
cc_message.Claim = Associated claim, if applicable.  If null, then the associated object is a cross-claim object.
cc_message.Contact = Associated contact, if applicable.
cc_message.CreationTime = Time of creating the message.
cc_message.Description = Short description of the message.
cc_message.DestinationID = Identifies the destination to send this message to.
cc_message.DuplicateCount = Number of duplicate errors received.  This field is obsolete, it is not applicable to active messages.
cc_message.ErrorCategory = Type of error if the message is in error.
cc_message.ErrorDescription = Detailed description of error condition (set in the destination).
cc_message.EventName = Name of the event.
cc_message.EventRootKey = Key of event root/cause, encoded as type:id.
cc_message.ISOMessageType = Defines the type of message being sent to ISO
cc_message.KeyMap = A CSV representation of the key->object ID map.
cc_message.LateBound = Whether the payload contains late-bound fields.
cc_message.LockingColumn = Meaningless column for locking
cc_message.MessageCode = Custom field that may be defined during message creation.  This field is deprecated, please define a new custom extension field instead.
cc_message.ObjectKey = Key of template root object/SOO, encoded as type:id.
cc_message.OptionalInt = Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
cc_message.OptionalMoney = Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
cc_message.OptionalString = Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
cc_message.Payload = Contents of the message.
cc_message.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_message.QueryTime = Time of of query selecting message to be processed.
cc_message.RetryCount = Number of times message has been retried.
cc_message.RetryTime = Time in the future at which to retry the message in error, applicable only to retryable error messages.
cc_message.SenderRefID = Optional sender reference set at message send time.
cc_message.SendLockedTime = Time of after acquired lock lock before the sending the message.
cc_message.SendLockTime = Time of attempting to lock before the sending the message.
cc_message.SendOrder = Order in which to send messages.
cc_message.SendTime = Time of completion of sending the message.
cc_message.Status = Message status: 1-Pending send; 2-Pending ack; 3-Error; 4-Retryable error
cc_message.User = The user who created this message.

cc_messagehistory = 
A completed message     
    

cc_messagehistory.ID = Internally managed primary key
cc_messagehistory.AckCode = Custom field that may be defined when acknowledging.  This field is deprecated, please define a new custom extension field instead.
cc_messagehistory.AckCount = Number of acks received.
cc_messagehistory.AckedTime = Time of ack.
cc_messagehistory.AfterSendTime = Time of completion of afterSend method.
cc_messagehistory.BeforeSendLockedTime = Time of after acquired lock before the call to beforeSend transformations.
cc_messagehistory.BeforeSendLockTime = Time of attempting to get lock before the call to beforeSend transformations.
cc_messagehistory.BeforeSendTime = Time of completion of beforeSend transformations.
cc_messagehistory.Bound = Message Bound/Unbound
cc_messagehistory.Claim = Associated claim, if applicable.  If null, then the associated object is a cross-claim object.
cc_messagehistory.Contact = Associated contact, if applicable.
cc_messagehistory.CreationTime = Time of creating the message.
cc_messagehistory.Description = Short description of the message.
cc_messagehistory.DestinationID = Identifies the message destination to send this message to.
cc_messagehistory.DuplicateCount = Number of duplicate errors received.
cc_messagehistory.ErrorCategory = Type of error if the message is in error.
cc_messagehistory.ErrorDescription = Detailed description of error condition (set in the message destination).
cc_messagehistory.EventName = Name of the event.
cc_messagehistory.EventRootKey = Key of event root/cause, encoded as type:id.
cc_messagehistory.ISOMessageType = Defines the type of message being sent to ISO
cc_messagehistory.KeyMap = A CSV representation of the key->object ID map.
cc_messagehistory.LateBound = Whether the payload contains late-bound fields.
cc_messagehistory.LockingColumn = Meaningless column for locking
cc_messagehistory.MessageCode = Custom field that may be defined during message creation.  This field is deprecated, please define a new custom extension field instead.
cc_messagehistory.ObjectKey = Key of template root object, encoded as type:id.
cc_messagehistory.OptionalInt = Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
cc_messagehistory.OptionalMoney = Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
cc_messagehistory.OptionalString = Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
cc_messagehistory.OrigMsgId = Identifies the id of the original message.
cc_messagehistory.Payload = Contents of the message.
cc_messagehistory.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_messagehistory.QueryTime = Time of of query selecting message to be processed.
cc_messagehistory.RetryCount = Number of times message has been retried.
cc_messagehistory.RetryTime = Time in the future at which to retry the message in error, applicable only to retryable error messages.
cc_messagehistory.SenderRefID = Optional sender reference set at message send time.
cc_messagehistory.SendLockedTime = Time of after acquired lock lock before the sending the message.
cc_messagehistory.SendLockTime = Time of attempting to lock before the sending the message.
cc_messagehistory.SendOrder = Order in which to send messages.
cc_messagehistory.SendTime = Time of completion of sending the message.
cc_messagehistory.Status = Message status: 10-Acked; 11-Error cleared; 12-Error retried; 13-Skipped
cc_messagehistory.User = The user who created this message.

cc_messagerequestlease = null

cc_messagerequestlease.ID = Internally managed primary key
cc_messagerequestlease.Acquired = 
cc_messagerequestlease.Created = 
cc_messagerequestlease.Exclusivity = 
cc_messagerequestlease.Expired = 
cc_messagerequestlease.ExpireRequested = 
cc_messagerequestlease.FailoverState = 
cc_messagerequestlease.InitialArguments = 
cc_messagerequestlease.LeaseOwner = 
cc_messagerequestlease.LockingColumn = Meaningless column for locking
cc_messagerequestlease.Name = 
cc_messagerequestlease.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_messagerequestlease.Released = 
cc_messagerequestlease.RetryFailover = 
cc_messagerequestlease.TransferRequested = 
cc_messagerequestlease.TransferTarget = 
cc_messagerequestlease.UniqueIdLSB = 
cc_messagerequestlease.UniqueIdMSB = 

cc_messagerequestleasehistory = null

cc_messagerequestleasehistory.ID = Internally managed primary key
cc_messagerequestleasehistory.Acquired = 
cc_messagerequestleasehistory.Created = 
cc_messagerequestleasehistory.Expired = 
cc_messagerequestleasehistory.ExpireRequested = 
cc_messagerequestleasehistory.LeaseOwner = 
cc_messagerequestleasehistory.LockingColumn = Meaningless column for locking
cc_messagerequestleasehistory.Name = 
cc_messagerequestleasehistory.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_messagerequestleasehistory.ReplacementIdLSB = 
cc_messagerequestleasehistory.ReplacementIdMSB = 
cc_messagerequestleasehistory.Terminated = 
cc_messagerequestleasehistory.TerminationMessage = 
cc_messagerequestleasehistory.TerminationReason = 
cc_messagerequestleasehistory.TransferRequested = 
cc_messagerequestleasehistory.TransferTarget = 
cc_messagerequestleasehistory.UniqueIdLSB = 
cc_messagerequestleasehistory.UniqueIdMSB = 

cc_metroreport = 
            MetroReport entity corresponds to the report obtained from Metropolitan Reporting Bureau. MetroReport
             contains some required data fields for requesting or receiving message from Metropolitan Reporting Bureau
             (such as loss description, sent date and status). It also has a reference to the generated document.
             A MetroReport is associated with a single claim.
            
    

cc_metroreport.ID = Internally managed primary key
cc_metroreport.AgentCity = City of investigating agency
cc_metroreport.AgentName = Name of Investigating Agency that issued the report
cc_metroreport.AgentState = State of investigating Agency.
cc_metroreport.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_metroreport.Claim = The claim associated with this MetroReport.
cc_metroreport.CreateDeferredActivity = Flag to indicate if Deferred Activity should be created or not.
cc_metroreport.CreateHoldActivity = Flag to indicate if Hold Activity should be created or not.
cc_metroreport.CreateTime = Timestamp when the object was created
cc_metroreport.CreateUser = User who created the object
cc_metroreport.DateOfDeath = Date of death for the deceased
cc_metroreport.DateReported = Date Reported
cc_metroreport.DeceasedContact = Contact for the deceased
cc_metroreport.DelayMemoURL = The URL link to the delay memo when the status is deferred
cc_metroreport.Doc = The report document associated with this MetroReport, if it is stored in our database. Most users should use the Document property instead of this one, as this DocID will usually be null if the IDocumentMetadataSource plugin is in use
cc_metroreport.DocumentURL = The URL link to the document provided by Metro
cc_metroreport.ErrorMessage = Error message return from Metro if failed
cc_metroreport.ForceDuplicate = Flag to indicate if a metro report should be requested regardless of a duplicate request.
cc_metroreport.InformationURL = The URL link to the additional information needed from the customer
cc_metroreport.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_metroreport.LossDescription = Loss Description
cc_metroreport.LossType = The type of the Loss (Auto, Property, .. etc)
cc_metroreport.MetroAgency = Investigating Agency Type
cc_metroreport.MetroControlNumber = Metro Control number assigned by Metro Reporting
cc_metroreport.MetroProcessID = Metro process ID - Identifying information for MetroReporting XML Support 
cc_metroreport.MetroReportType = Type of metro reports (Auto Accident, Fire-Home etc)
cc_metroreport.MetroTransactionID = Metro transaction ID - Unique number assigned to this order
cc_metroreport.Name = Name of the metro report
cc_metroreport.OfficerName = The name of officer
cc_metroreport.Precinct = Precinct, troop number or name/badge # of officer
cc_metroreport.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_metroreport.ReceivedDate = The date received the report
cc_metroreport.ReportNumber = Report Number assigned by issuing Police-Fire Agency
cc_metroreport.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_metroreport.SentDate = The date sent out the order file
cc_metroreport.Status = Status of the Official Report
cc_metroreport.ThirdPartyVehicle = The third party vehicle associated with this MetroReport, for auto report types.
cc_metroreport.UpdateTime = Timestamp when the object was last updated
cc_metroreport.UpdateUser = User who last updated the object
cc_metroreport.VehicleIncident = The vehicle associated with this MetroReport, for auto report types.

cc_negotiation = 
        Contains details related to a negotiated settlement for a claim or part of claim. This entity tracks the
        Contacts involved in the negotiation, summarizes basic arguments, and financial figures.
      
    

cc_negotiation.ID = Internally managed primary key
cc_negotiation.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_negotiation.Claim = Related claim.
cc_negotiation.ClaimContact = Related claimant (either a person or a company).
cc_negotiation.CreateTime = Timestamp when the object was created
cc_negotiation.CreateUser = User who created the object
cc_negotiation.Exposure = Related exposure.
cc_negotiation.LiabilityEval = An assessment of the total liability for this negotiation.
cc_negotiation.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_negotiation.Matter = Related matter.
cc_negotiation.MaxOffer = The maximum offer the owner is willing to settle for before rethinking the strategy.
cc_negotiation.Name = The name or subject of this negotiation.
cc_negotiation.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_negotiation.Rationale = The rationale for the proposed target offer.
cc_negotiation.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_negotiation.ServiceRequest = Associated service request
cc_negotiation.TargetOffer = The target amount of negotiated settlement.
cc_negotiation.UpdateTime = Timestamp when the object was last updated
cc_negotiation.UpdateUser = User who last updated the object
cc_negotiation.SettleNegotiation = A list of demands, offers, and couteroffers related to this negotiation.
cc_negotiation.Text = The list of texts related to this negotiation; for example arguments, settlemnet plan, etc.

cc_negotiationline = 
        Represents a single line amount discussed in a Negotiation. A Negotiation contains an array of NegotiationLine
        entities representing the back-and-forth financial values discussed.
      
    

cc_negotiationline.ID = Internally managed primary key
cc_negotiationline.Amount = Amount of the demand, offer, or counteroffer. Not always applicable.
cc_negotiationline.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_negotiationline.CreateTime = Timestamp when the object was created
cc_negotiationline.CreateUser = User who created the object
cc_negotiationline.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_negotiationline.Negotiation = Related negotiation.
cc_negotiationline.NegotiationDate = Date the negotiation line was made.
cc_negotiationline.Note = Notes or comments explaining the reasoning behind this negotiation line.
cc_negotiationline.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_negotiationline.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_negotiationline.Type = The type of this negotiation line.
cc_negotiationline.UpdateTime = Timestamp when the object was last updated
cc_negotiationline.UpdateUser = User who last updated the object

cc_negotiationtext = 
        Stores long text descriptions associated with a Negotiation. Changes to these text descriptions trigger
        validation.
      
    

cc_negotiationtext.ID = Internally managed primary key
cc_negotiationtext.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_negotiationtext.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_negotiationtext.Negotiation = Related negotiation.
cc_negotiationtext.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_negotiationtext.Text = The text corresponding to a negotiation related subject.
cc_negotiationtext.Type = Type of negotiation text.

cc_note = 
            Information entered by a user into a text field in the ClaimCenter interface.
            ClaimCenter associates a note with a specific claim, and may additionally associate
            it with one of the following also: an exposure, a matter, a claimant, or a service request.
    

cc_note.ID = Internally managed primary key
cc_note.Activity = The activity associated with the note.
cc_note.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_note.Author = User who wrote the note.
cc_note.AuthoringDate = Date on which the note was originally authored.  If null, the CreateTime seves this purpose.
cc_note.Body = Body of the note.
cc_note.Claim = Associated claim.
cc_note.ClaimContact = Associated Claim Contact (either a person or a company).
cc_note.Confidential = Whether the note is confidential.
cc_note.CreateTime = Timestamp when the object was created
cc_note.CreateUser = User who created the object
cc_note.Exposure = Associated exposure.
cc_note.Language = The language in which this note is created.
cc_note.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_note.Matter = Associated matter.
cc_note.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_note.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_note.SecurityType = Type of note; used for access-restriction purposes
cc_note.ServiceRequest = Associated service request.
cc_note.Subject = Subject or summary of the note.
cc_note.Topic = Topic to which the note belongs.
cc_note.UpdateTime = Timestamp when the object was last updated
cc_note.UpdateUser = User who last updated the object

cc_nullablecolumndatadist = Stores row count information for selected nullable columns.

cc_nullablecolumndatadist.ID = Internally managed primary key
cc_nullablecolumndatadist.NullableColName = Nullable column name.
cc_nullablecolumndatadist.NumNonnullValues = Number of non-null values.
cc_nullablecolumndatadist.NumValues = Total number of rows. We have this because column could be on a subtype
cc_nullablecolumndatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_nullablecolumndatadist.TableDataDist = TableDataDist for this object.

cc_official = 
        Represents a police officer, fireman, coroner, and so forth associated with a Claim. The details of this entity
        include the official's type, name, and number of the report created.
      
    

cc_official.ID = Internally managed primary key
cc_official.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_official.Claim = The foreign key to the claim.
cc_official.CreateTime = Timestamp when the object was created
cc_official.CreateUser = User who created the object
cc_official.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_official.Name = Name of official.
cc_official.OfficialType = Type of official (fire, police etc).
cc_official.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_official.ReportNumber = Official report number.
cc_official.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_official.UpdateTime = Timestamp when the object was last updated
cc_official.UpdateUser = User who last updated the object

cc_officialid = 
      Represents the pairing of a given official ID number and a jurisdiction.  Examples of these would
      include the pairing of a state and a drivers license number or state tax ID number.  Multiple OfficialIDs
      can be associated with a given Contact.
    

cc_officialid.ID = Internally managed primary key
cc_officialid.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_officialid.Contact = 
cc_officialid.CreateTime = Timestamp when the object was created
cc_officialid.CreateUser = User who created the object
cc_officialid.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_officialid.OfficialIDType = The type of this official id.
cc_officialid.OfficialIDValue = This official id's value, such as a social security number or drivers' license number.
cc_officialid.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_officialid.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_officialid.State = Jurisdiction.
cc_officialid.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_officialid.UpdateTime = Timestamp when the object was last updated
cc_officialid.UpdateUser = User who last updated the object

cc_organization = Defines an organization that has a hierarchy of groups

cc_organization.ID = Internally managed primary key
cc_organization.Carrier = Flag indicating whether this organization corresponds to the carrier itself.
cc_organization.Contact = Contact entry related to the organization.
cc_organization.CreateTime = Timestamp when the object was created
cc_organization.CreateUser = User who created the object
cc_organization.MasterAdmin = Flag indicating whether this organization is the superuser organization with admin powers over all organizations.
cc_organization.Name = The name of the organization.
cc_organization.NameDenorm = denorm field for The name of the organization.
cc_organization.NameKanji = The kanji name of the organization. Used only for Japanese and will be null otherwise.
cc_organization.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_organization.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_organization.Type = The type of the organization.
cc_organization.UpdateTime = Timestamp when the object was last updated
cc_organization.UpdateUser = User who last updated the object
cc_organization.ZonesToAdmin = Link to joiner table for zones to admin.

cc_OrganizationZoneAdmin = Join table between the organization and the zone, to see which zones an organization can admin over.

cc_OrganizationZoneAdmin.ID = Internally managed primary key
cc_OrganizationZoneAdmin.Country = The country to which the zone belongs.
cc_OrganizationZoneAdmin.CreateTime = Timestamp when the object was created
cc_OrganizationZoneAdmin.CreateUser = User who created the object
cc_OrganizationZoneAdmin.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_OrganizationZoneAdmin.Organization = Fk to the Organization
cc_OrganizationZoneAdmin.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_OrganizationZoneAdmin.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_OrganizationZoneAdmin.UpdateTime = Timestamp when the object was last updated
cc_OrganizationZoneAdmin.UpdateUser = User who last updated the object
cc_OrganizationZoneAdmin.ZoneCode = Code of the zone
cc_OrganizationZoneAdmin.ZoneType = Type of zone.

cc_orggroup = null

cc_orggroup.ID = Internally managed primary key
cc_orggroup.ForeignEntity = 
cc_orggroup.Owner = 
cc_orggroup.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_otherbenefit = 
        Supports Workmen's Compensation functionality. This entity details the amount and reason for miscellaneous
        financial benefits paid an a claim.
      
    

cc_otherbenefit.ID = Internally managed primary key
cc_otherbenefit.Amount = Amount of benefit.
cc_otherbenefit.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_otherbenefit.Claim = The foreign key to the claim.
cc_otherbenefit.Comments = Comments.
cc_otherbenefit.CreateTime = Timestamp when the object was created
cc_otherbenefit.CreateUser = User who created the object
cc_otherbenefit.EndDate = End date of benefit.
cc_otherbenefit.InitialContact = Name of contact for other benefit.
cc_otherbenefit.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_otherbenefit.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_otherbenefit.ReferenceNumber = Reference number for benefit.
cc_otherbenefit.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_otherbenefit.StartDate = Start date of benefit.
cc_otherbenefit.UpdateTime = Timestamp when the object was last updated
cc_otherbenefit.UpdateUser = User who last updated the object

cc_othercvgdet = Details of other coverage associated with an exposure.

cc_othercvgdet.ID = Internally managed primary key
cc_othercvgdet.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_othercvgdet.ContactName = Name of contact at insurer.
cc_othercvgdet.ContactPhone = Phone number of contact at insurer.
cc_othercvgdet.CreateTime = Timestamp when the object was created
cc_othercvgdet.CreateUser = User who created the object
cc_othercvgdet.Exposure = The related exposure.
cc_othercvgdet.Insurer = Name of insurer.
cc_othercvgdet.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_othercvgdet.Notes = Comments/notes about the coverage.
cc_othercvgdet.PolicyNumber = Policy number at insurer.
cc_othercvgdet.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_othercvgdet.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_othercvgdet.UpdateTime = Timestamp when the object was last updated
cc_othercvgdet.UpdateUser = User who last updated the object

cc_otherinstruction = Other instructions for account special handling

cc_otherinstruction.ID = Internally managed primary key
cc_otherinstruction.Comments = Special handling other instruction comment
cc_otherinstruction.CreateTime = Timestamp when the object was created
cc_otherinstruction.CreateUser = User who created the object
cc_otherinstruction.InstructionCategory = The instruction category this instruction relates to.
cc_otherinstruction.InstructionType = The specific instruction type this instruction relates to.
cc_otherinstruction.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_otherinstruction.PolicyType = The policy type this instruction relates to. If no policy type is specified, it will relate to all types.
cc_otherinstruction.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_otherinstruction.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_otherinstruction.SpecialHandling = The special handling object this other instruction relates to.
cc_otherinstruction.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_otherinstruction.UpdateTime = Timestamp when the object was last updated
cc_otherinstruction.UpdateUser = User who last updated the object
cc_otherinstruction.Comments_L10N_ARRAY = 

cc_inst_comm_l10n = null

cc_inst_comm_l10n.ID = Internally managed primary key
cc_inst_comm_l10n.Language = 
cc_inst_comm_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_inst_comm_l10n.Owner = 
cc_inst_comm_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_inst_comm_l10n.Value = 

cc_parameter = For internal Guidewire use only.

cc_parameter.ID = Internally managed primary key
cc_parameter.BooleanValue = For a boolean parameter, the parameter value.
cc_parameter.ComponentType = Component defining the parameter, or null if it is a system-wide parameter.
cc_parameter.CreateTime = Timestamp when the object was created
cc_parameter.CreateUser = User who created the object
cc_parameter.DateValue = For a date or time parameter, the parameter value.
cc_parameter.IntValue = For an integer parameter, the parameter value.
cc_parameter.LongTextValue = For a long text parameter (clob), the parameter value.
cc_parameter.ParameterName = Name of the parameter
cc_parameter.ParameterType = Identifies the value type (string, longtext, integer, boolean, or date).
cc_parameter.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_parameter.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_parameter.StringValue = For a string parameter, the parameter value.
cc_parameter.UpdateTime = Timestamp when the object was last updated
cc_parameter.UpdateUser = User who last updated the object

cc_parentgroup = null

cc_parentgroup.ID = Internally managed primary key
cc_parentgroup.ForeignEntity = 
cc_parentgroup.Owner = 
cc_parentgroup.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_paymentreserve = Links a Payment to an offset Reserve.

cc_paymentreserve.ID = Internally managed primary key
cc_paymentreserve.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_paymentreserve.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_paymentreserve.Payment = The payment.
cc_paymentreserve.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_paymentreserve.Reserve = The reserve.

cc_periodpolicy = Links a PolicyPeriod with its policies.

cc_periodpolicy.ID = Internally managed primary key
cc_periodpolicy.ClaimInfo = The associated ClaimInfo.
cc_periodpolicy.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_periodpolicy.PolicyPeriod = The associated policy period.
cc_periodpolicy.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_phonenormalizerworkitem = Phone Normalizer WorkItem implementation. This should work for most work queues.

cc_phonenormalizerworkitem.ID = Internally managed primary key
cc_phonenormalizerworkitem.Attempts = 
cc_phonenormalizerworkitem.AvailableSince = The time after which the work item can be tried. Must be null on failed work items
cc_phonenormalizerworkitem.CheckedOutBy = 
cc_phonenormalizerworkitem.CreationTime = 
cc_phonenormalizerworkitem.EntityTypeName = Entity name for the associated ID
cc_phonenormalizerworkitem.Exception = Stack trace of the exception
cc_phonenormalizerworkitem.LastUpdateTime = 
cc_phonenormalizerworkitem.Priority = 
cc_phonenormalizerworkitem.ProcessHistoryID = The writer batch job that created this workitem (ProcessHistory).
cc_phonenormalizerworkitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_phonenormalizerworkitem.QueueType = The queue.
cc_phonenormalizerworkitem.Status = Status of this workitem.
cc_phonenormalizerworkitem.TargetIDs = Entity IDs that contain normalizable phone data

cc_pluginlease = null

cc_pluginlease.ID = Internally managed primary key
cc_pluginlease.Acquired = 
cc_pluginlease.Created = 
cc_pluginlease.Exclusivity = 
cc_pluginlease.Expired = 
cc_pluginlease.ExpireRequested = 
cc_pluginlease.FailoverState = 
cc_pluginlease.InitialArguments = 
cc_pluginlease.LeaseOwner = 
cc_pluginlease.LockingColumn = Meaningless column for locking
cc_pluginlease.Name = 
cc_pluginlease.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_pluginlease.Released = 
cc_pluginlease.RetryFailover = 
cc_pluginlease.TransferRequested = 
cc_pluginlease.TransferTarget = 
cc_pluginlease.UniqueIdLSB = 
cc_pluginlease.UniqueIdMSB = 

cc_pluginleasehistory = null

cc_pluginleasehistory.ID = Internally managed primary key
cc_pluginleasehistory.Acquired = 
cc_pluginleasehistory.Created = 
cc_pluginleasehistory.Expired = 
cc_pluginleasehistory.ExpireRequested = 
cc_pluginleasehistory.LeaseOwner = 
cc_pluginleasehistory.LockingColumn = Meaningless column for locking
cc_pluginleasehistory.Name = 
cc_pluginleasehistory.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_pluginleasehistory.ReplacementIdLSB = 
cc_pluginleasehistory.ReplacementIdMSB = 
cc_pluginleasehistory.Terminated = 
cc_pluginleasehistory.TerminationMessage = 
cc_pluginleasehistory.TerminationReason = 
cc_pluginleasehistory.TransferRequested = 
cc_pluginleasehistory.TransferTarget = 
cc_pluginleasehistory.UniqueIdLSB = 
cc_pluginleasehistory.UniqueIdMSB = 

cc_policy = <code>Policy</code>,
and associates it to the claim.  There is a one-to-one relationship between
claims and policies in the system.  If multiple claims have been filed against
the same actual policy, there will be a distinct <code>Policy</code> for every
<code>Claim</code> in the system.
    

cc_policy.ID = Internally managed primary key
cc_policy.AccountNumber = Account number that this Policy belongs to.
cc_policy.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_policy.AssignedRisk = The policy is an Assigned risk from the state or not.
cc_policy.CancellationDate = Date on which the policy was canceled.
cc_policy.CoverageForm = Policy's coverage form.
cc_policy.CreateTime = Timestamp when the object was created
cc_policy.CreateUser = User who created the object
cc_policy.Currency = The Currency of the policy. When set, the new value is also propagated to Claim.Currency.
cc_policy.CustomerServiceTier = Service tier behind this policy
cc_policy.EffectiveDate = Date on which the policy is effective.
cc_policy.ExpirationDate = Date on which the policy expires.
cc_policy.FinancialInterests = Other financial interests of note.
cc_policy.ForeignCoverage = Whether the insured has foreign coverage.
cc_policy.InsuredSICCode = The insured's SIC code (for workers' comp policies only).
cc_policy.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_policy.Notes = Other notes on the policy.
cc_policy.OrigEffectiveDate = First effective date on which the policyholder had coverage.
cc_policy.OtherInsInfo = Notes about the insured's other insurance.
cc_policy.OtherInsurance = Whether the insured has other insurance.
cc_policy.Participation = Participation percentage (for commercial policies only).
cc_policy.PolicyNumber = Number of the policy (generally a string).
cc_policy.PolicyRatingPlan = Policy's rating plan (for workers' comp policies only).
cc_policy.PolicySource = Source of the policy information.
cc_policy.PolicySuffix = Indicates each unique period that a policy has been in effect.  (Sometimes called 'Mod' or 'Module.')
cc_policy.PolicySystemPeriodID = The id of an associated external policy system period.
cc_policy.PolicyType = Type of policy.
cc_policy.ProducerCode = Agency that sold the policy.
cc_policy.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_policy.ReportingDate = Extended reporting date for policies with extended coverage (for commercial policies only).
cc_policy.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_policy.RetroactiveDate = Retroactive date for policies with retroactive coverage (for commercial policies only).
cc_policy.ReturnToWorkPrgm = Return to work program (for workers' comp policies only).
cc_policy.Status = Status of the policy.
cc_policy.TotalProperties = Total number of properties on the master version of the policy.
cc_policy.TotalVehicles = Total number of vehicles on the master version of the policy.
cc_policy.UnderwritingCo = Underwriting company.
cc_policy.UnderwritingGroup = Underwriting group.
cc_policy.UpdateTime = Timestamp when the object was last updated
cc_policy.UpdateUser = User who last updated the object
cc_policy.ValidationLevel = Validation level that this object passed (if any) before it was stored.
cc_policy.Verified = True if no non-internal fields have been changed since this policy was retrieved from external system.
cc_policy.WCOtherStates = Other states in which coverage applies (for workers' comp policies only).
cc_policy.WCStates = States in which coverage applies (for workers' comp policies only).
cc_policy.ClassCodes = List of class codes covered by the Policy.
cc_policy.Contacts = List of contacts associated with this policy.
cc_policy.Coverages = List of coverages directly related to the policy.
cc_policy.Endorsements = List of endorsements for the policy.
cc_policy.PolicyLocations = The list of all Locations available for use on this Policy.
cc_policy.RiskUnits = List of risk units covered by the policy.
cc_policy.Roles = The roles that this claimcontact has.
cc_policy.StatCodes = List of stat lines associated with the policy.

cc_policylocation = null

cc_policylocation.ID = Internally managed primary key
cc_policylocation.Address = The address where this PolicyLocation exists.
cc_policylocation.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_policylocation.CreateTime = Timestamp when the object was created
cc_policylocation.CreateUser = User who created the object
cc_policylocation.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_policylocation.LocationNumber = The alphanumeric "number" associated with this location.
cc_policylocation.Notes = Any notes associated with this location.
cc_policylocation.Policy = This PolicyLocation's owning Policy.
cc_policylocation.PolicySystemId = Identifier for the policy location in an external policy system
cc_policylocation.PrimaryLocation = Indicates whether this PolicyLocation should be considered the primary one on the owning Policy.
cc_policylocation.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_policylocation.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_policylocation.UpdateTime = Timestamp when the object was last updated
cc_policylocation.UpdateUser = User who last updated the object
cc_policylocation.Buildings = Buildings associated with this location.
cc_policylocation.HighValueItems = List of additional high value items.
cc_policylocation.Lienholders = List of lienholders for the property.
cc_policylocation.LocationBasedRisks = List of location based risk units for the property.

cc_policylocationsummary = 
Describes a policy location retrieved from the policy system associated with a catastrophe.  The policy location may or may not be used by a claim.
  

cc_policylocationsummary.ID = Internally managed primary key
cc_policylocationsummary.AddressLine1 = First line of mailing address.
cc_policylocationsummary.AddressLine1Kanji = First line of mailing address in kanji (used only for Japanese addresses and will be null otherwise)
cc_policylocationsummary.AddressLine2 = Second line of mailing address.
cc_policylocationsummary.AddressLine2Kanji = Second line of mailing address in kanji (used only for Japanese addresses and will be null otherwise)
cc_policylocationsummary.AddressLine3 = Third line of mailing address.
cc_policylocationsummary.Catastrophe = Associated catastrophe.
cc_policylocationsummary.CEDEX = CEDEX: Special business mail delivery flag (used only for French addresses and will be null otherwise)
cc_policylocationsummary.CEDEXBureau = CEDEX: Special business mail delivery bureau (used only for French addresses and will be null otherwise)
cc_policylocationsummary.City = City.
cc_policylocationsummary.CityDenorm = denorm field for City.
cc_policylocationsummary.CityKanji = City in kanji (used only for Japanese addresses and will be null otherwise)
cc_policylocationsummary.Country = Country.
cc_policylocationsummary.County = County.
cc_policylocationsummary.CreateTime = Timestamp when the object was created
cc_policylocationsummary.CreateUser = User who created the object
cc_policylocationsummary.EmailAddress = Email address of the primary insured.
cc_policylocationsummary.GeocodeStatus = Enum giving the status of the latitude and longitude data.
cc_policylocationsummary.InsuredAddressLine1 = First line of primary insured address.
cc_policylocationsummary.InsuredAddressLine2 = Second line of primary insured address.
cc_policylocationsummary.InsuredAddressLine3 = Third line of primary insured address.
cc_policylocationsummary.InsuredCity = City of the primary insured.
cc_policylocationsummary.InsuredCityDenorm = denorm field for City of the primary insured.
cc_policylocationsummary.InsuredCountry = Country of the primary insured.
cc_policylocationsummary.InsuredCounty = County of the primary insured.
cc_policylocationsummary.InsuredName = Name of the primary insured.
cc_policylocationsummary.InsuredPostalCode = Postal code of the primary insured; string to handle Zip+4 and international codes.
cc_policylocationsummary.InsuredPostalCodeDenorm = denorm field for Postal code of the primary insured; string to handle Zip+4 and international codes.
cc_policylocationsummary.InsuredState = State of the primary insured.
cc_policylocationsummary.Latitude = Latitude expressed in degrees.  Positive = North; Negative = South: -90 <= x <= 90
cc_policylocationsummary.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_policylocationsummary.Longitude = Longitude expressed in degrees relative to the prime meridian.  Positive = East; Negative = West: -180 <= x < 180
cc_policylocationsummary.Phone = Phone number of the primary insured.
cc_policylocationsummary.PhoneCountry = The phone country of the primary insured
cc_policylocationsummary.PhoneExtension = The phone extension of the primary insured
cc_policylocationsummary.PolicyNumber = Number of the policy (generally a string).
cc_policylocationsummary.PolicySystemId = Identifier for the policy location in an external policy system
cc_policylocationsummary.PolicyType = Type of policy.
cc_policylocationsummary.PostalCode = Postal code; string to handle Zip+4 and international codes.
cc_policylocationsummary.PostalCodeDenorm = denorm field for Postal code; string to handle Zip+4 and international codes.
cc_policylocationsummary.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_policylocationsummary.State = State.
cc_policylocationsummary.TotalInsured = The total insured value for the policy location, in Reporting/Default Currency.
cc_policylocationsummary.UpdateTime = Timestamp when the object was last updated
cc_policylocationsummary.UpdateUser = User who last updated the object
cc_policylocationsummary.ClaimJoin = Link to get to associated claims.

cc_policylocationsummaryjoin = 
Join table between Claim and PolicyLocationSummary.  It exists to improve performance.
  

cc_policylocationsummaryjoin.ID = Internally managed primary key
cc_policylocationsummaryjoin.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_policylocationsummaryjoin.Claim = Associated claim.
cc_policylocationsummaryjoin.CreateTime = Timestamp when the object was created
cc_policylocationsummaryjoin.CreateUser = User who created the object
cc_policylocationsummaryjoin.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_policylocationsummaryjoin.PolicyLocationSummary = Associated PolicyLocationSummary
cc_policylocationsummaryjoin.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_policylocationsummaryjoin.UpdateTime = Timestamp when the object was last updated
cc_policylocationsummaryjoin.UpdateUser = User who last updated the object

cc_policyperiod = aim was entered into ClaimCenter.  The PolicyPeriod entity groups these separate, but related, policy entities
    together for the purpose of determining the amount of an aggregate limit or deductible that has been used by the associated claims.
    

cc_policyperiod.ID = Internally managed primary key
cc_policyperiod.AccountNumber = Account number that the policies of this PolicyPeriod belong to.
cc_policyperiod.CreateTime = Timestamp when the object was created
cc_policyperiod.CreateUser = User who created the object
cc_policyperiod.EffectiveDate = Date on which the policy is effective.
cc_policyperiod.ExpirationDate = Date on which the policy expires.
cc_policyperiod.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_policyperiod.PolicyNumber = Number of the policy (generally a string).
cc_policyperiod.PolicyPeriodType = Type of policy period: account or policy.
cc_policyperiod.PolicySuffix = Indicates each unique period that a policy has been in effect.  (Sometimes called 'Mod' or 'Module.')
cc_policyperiod.PolicyType = Type of policy to which this period applies.
cc_policyperiod.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_policyperiod.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_policyperiod.UpdateTime = Timestamp when the object was last updated
cc_policyperiod.UpdateUser = User who last updated the object
cc_policyperiod.AggregateLimitRpts = Denormalized data for this period.
cc_policyperiod.AggregateLimits = Aggregate limits for the policies in this period.
cc_policyperiod.ClaimAggregateLimitRpts = Denormalized data for this period per claim.
cc_policyperiod.CoverageLines = Coverage lines associated with this period.
cc_policyperiod.Policies = Policies that belong to this period.

cc_policytypemetriclimits = Lists all the claim and exposure metric limits for a particular policy type

cc_policytypemetriclimits.ID = Internally managed primary key
cc_policytypemetriclimits.CreateTime = Timestamp when the object was created
cc_policytypemetriclimits.CreateUser = User who created the object
cc_policytypemetriclimits.Generation = Generation number, used to identify when metric limits were created or retired
cc_policytypemetriclimits.PolicyType = Policy type for the limits.
cc_policytypemetriclimits.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_policytypemetriclimits.UpdateTime = Timestamp when the object was last updated
cc_policytypemetriclimits.UpdateUser = User who last updated the object
cc_policytypemetriclimits.ClaimMetricLimits = Claim metric limits for this policy type.
cc_policytypemetriclimits.ExposureMetricLimits = Exposure metric limits for this policy type.

cc_processhistory = Process run history

cc_processhistory.ID = Internally managed primary key
cc_processhistory.CompleteDate = The date this process completed.
cc_processhistory.CreationDate = The date this process has been requested to start.
cc_processhistory.Description = Short description of a run.
cc_processhistory.FailedOps = The number of operations that failed.
cc_processhistory.FailureReason = If not successful, the reason the process failed.
cc_processhistory.InternalFailure = Whether the failure was internal.
cc_processhistory.LeaseId = The Id of the lease.
cc_processhistory.NotificationSent = Completion Notification Sent
cc_processhistory.OpsPerformed = The total number of operations the process performed.
cc_processhistory.ProcessType = The process this entry refers to.
cc_processhistory.ProfilerData = Raw Profiler data
cc_processhistory.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_processhistory.RanToCompletion = Whether or not the process ran to completion, or failed or was interrupted.
cc_processhistory.ReturnValue = Return value.
cc_processhistory.Scheduled = Whether this was a scheduled run
cc_processhistory.ServerId = Server id.
cc_processhistory.StartDate = The date this process was actually started.

cc_profilerconfig = Profiler configuration for an entry point

cc_profilerconfig.ID = Internally managed primary key
cc_profilerconfig.DbmsCounterThresholdMs = The threshold for generating a report using dbms counters for the interval (start of profiling session, end of profiling session). Use 0 to disable. Only meaningful if ProfilerEnabled is true.
cc_profilerconfig.DiffDbmsCounters = Whether diffing DBMS counters is enabled. Only meaningful if ProfilerEnabled and DbmsCounterThresholdMs are true.
cc_profilerconfig.EntryPoint = Name of entry point
cc_profilerconfig.ExtendedQueryTracing = Whether extended query tracing is enabled. Only meaningful if ProfilerEnabled is true.
cc_profilerconfig.HiResClock = Whether to use hi-resolution clock for timing (Windows only)
cc_profilerconfig.ProfilerEnabled = Whether profiling is enabled for this entry point
cc_profilerconfig.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_profilerconfig.QueryOptimizerTracing = Whether query optimizer tracing is enabled. Only meaningful if ProfilerEnabled is true.
cc_profilerconfig.StackTraceTracking = Whether stack tracing is enabled. Only meaningful if ProfilerEnabled is true.
cc_profilerconfig.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_profilerconfig.IndividualStacks = True to capture individual stacks; null or false to aggregate the stacks

cc_propcontentsscheditem = 
      Describes a lost or damaged item listed in the policy's high value item array
    

cc_propcontentsscheditem.ID = Internally managed primary key
cc_propcontentsscheditem.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_propcontentsscheditem.CreateTime = Timestamp when the object was created
cc_propcontentsscheditem.CreateUser = User who created the object
cc_propcontentsscheditem.Incident = Incident that owns this scheduled item
cc_propcontentsscheditem.ItemOrder = Used to order items in creation order, must be unique per incident
cc_propcontentsscheditem.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_propcontentsscheditem.PropertyItem = The high value item listed on the policy
cc_propcontentsscheditem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_propcontentsscheditem.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_propcontentsscheditem.UpdateTime = Timestamp when the object was last updated
cc_propcontentsscheditem.UpdateUser = User who last updated the object

cc_propertyfiredamage =     Represents details about fire damage to a property
  

cc_propertyfiredamage.ID = Internally managed primary key
cc_propertyfiredamage.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_propertyfiredamage.Arson = Boolean field to indicate if a claim involves arson
cc_propertyfiredamage.Claim = Claim that owns this damage object.
cc_propertyfiredamage.CreateTime = Timestamp when the object was created
cc_propertyfiredamage.CreateUser = User who created the object
cc_propertyfiredamage.FireDeptResponded = Did the fire department respond to the damage?
cc_propertyfiredamage.FireSource = Description of the source of the fire
cc_propertyfiredamage.HowWasFireDiscovered = Description of how the fire was discovered
cc_propertyfiredamage.IsAnyoneInjured = Was anyone injured?
cc_propertyfiredamage.IsHomeHabitable = Can the insured live at home?
cc_propertyfiredamage.IsHomeSecure = Is the home secure?
cc_propertyfiredamage.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_propertyfiredamage.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_propertyfiredamage.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_propertyfiredamage.SmokeDamageOnly = Is the damage only from smoke and not fire?
cc_propertyfiredamage.UpdateTime = Timestamp when the object was last updated
cc_propertyfiredamage.UpdateUser = User who last updated the object

cc_propertyitem = High-value item associated with a PolicyLocation.

cc_propertyitem.ID = Internally managed primary key
cc_propertyitem.AppraisedValue = Appraised value of the item.
cc_propertyitem.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_propertyitem.CreateTime = Timestamp when the object was created
cc_propertyitem.CreateUser = User who created the object
cc_propertyitem.Description = Description of the item.
cc_propertyitem.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_propertyitem.PolicySystemId = Identifier for the property item in an external policy system
cc_propertyitem.Property = The related property.
cc_propertyitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_propertyitem.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_propertyitem.UpdateTime = Timestamp when the object was last updated
cc_propertyitem.UpdateUser = User who last updated the object

cc_propertyowner = Links a lienholder to a property.

cc_propertyowner.ID = Internally managed primary key
cc_propertyowner.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_propertyowner.Lienholder = The relevant lienholder.
cc_propertyowner.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_propertyowner.LocationBasedRU = The related risk unit/building.
cc_propertyowner.OwnerType = Whether the lienholder is a partial owner or the sole owner.
cc_propertyowner.Property = The related property.
cc_propertyowner.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_propertywaterdamage =     Represents details about water damage to a property
  

cc_propertywaterdamage.ID = Internally managed primary key
cc_propertywaterdamage.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_propertywaterdamage.Claim = Claim that owns this damage object.
cc_propertywaterdamage.CreateTime = Timestamp when the object was created
cc_propertywaterdamage.CreateUser = User who created the object
cc_propertywaterdamage.HasWaterBeenTurnedOff = Has the water to the house/room been turned off?
cc_propertywaterdamage.IsRoofProtected = Is the roof damage protected?
cc_propertywaterdamage.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_propertywaterdamage.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_propertywaterdamage.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_propertywaterdamage.UpdateTime = Timestamp when the object was last updated
cc_propertywaterdamage.UpdateUser = User who last updated the object
cc_propertywaterdamage.WaterSource = Where is the water entering the property from?

cc_purgedrootinfo = 
    When an bean implementing RootInfo is purged (such as ClaimInfo when a Claim is purged in ClaimCenter), an instance
    of this class is created to record the PublicID of the purged entity.
    

cc_purgedrootinfo.ID = Internally managed primary key
cc_purgedrootinfo.CreateTime = Timestamp when the object was created
cc_purgedrootinfo.CreateUser = User who created the object
cc_purgedrootinfo.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_purgedrootinfo.PurgedEntityPublicID = The PublicID of the purged entity.
cc_purgedrootinfo.PurgedEntityType = The name of the type of the purged entity.
cc_purgedrootinfo.UpdateTime = Timestamp when the object was last updated
cc_purgedrootinfo.UpdateUser = User who last updated the object

cc_question = A Question

cc_question.ID = Internally managed primary key
cc_question.CreateTime = Timestamp when the object was created
cc_question.CreateUser = User who created the object
cc_question.DefaultAnswer = 
cc_question.Indent = number of spaces to indent
cc_question.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_question.Priority = Sort order priority
cc_question.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_question.QuestionFormat = What format of question to display
cc_question.QuestionSet = 
cc_question.QuestionType = What kind of question is this
cc_question.Required = 
cc_question.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_question.ShouldRetireFromImportXML = If set to true, will retire this question set during the import xml process.
cc_question.Text = 
cc_question.UpdateTime = Timestamp when the object was last updated
cc_question.UpdateUser = User who last updated the object
cc_question.Choices = Alternative possible answers.  Only used if QuestionType == Choice.
cc_question.DefaultAnswer_L10N_ARRAY = 
cc_question.QuestionFilters = 
cc_question.SubQuestions = 
cc_question.Text_L10N_ARRAY = 

cc_questionchoice = One choice in the set of choices for a question of type Choice

cc_questionchoice.ID = Internally managed primary key
cc_questionchoice.Code = 
cc_questionchoice.CreateTime = Timestamp when the object was created
cc_questionchoice.CreateUser = User who created the object
cc_questionchoice.Description = 
cc_questionchoice.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_questionchoice.Name = 
cc_questionchoice.Priority = Sort order priority
cc_questionchoice.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_questionchoice.Question = Question for which this is a possible answer
cc_questionchoice.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_questionchoice.Score = What "score" to give answers that use this choice.  What the score signifies, if anything, depends on how the QuestionSet is used.
cc_questionchoice.UpdateTime = Timestamp when the object was last updated
cc_questionchoice.UpdateUser = User who last updated the object
cc_questionchoice.Description_L10N_ARRAY = 
cc_questionchoice.Name_L10N_ARRAY = 

cc_qchoicedesc_l10n = null

cc_qchoicedesc_l10n.ID = Internally managed primary key
cc_qchoicedesc_l10n.Language = 
cc_qchoicedesc_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_qchoicedesc_l10n.Owner = 
cc_qchoicedesc_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_qchoicedesc_l10n.Value = 

cc_qchoicename_l10n = null

cc_qchoicename_l10n.ID = Internally managed primary key
cc_qchoicename_l10n.Language = 
cc_qchoicename_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_qchoicename_l10n.Owner = 
cc_qchoicename_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_qchoicename_l10n.Value = 

cc_qfilter = A filter for this question set that must pass in order for the question to be displayed in the UI.

cc_qfilter.ID = Internally managed primary key
cc_qfilter.Answer = 
cc_qfilter.CreateTime = Timestamp when the object was created
cc_qfilter.CreateUser = User who created the object
cc_qfilter.FilterQuestion = The question on which answer the Question depends
cc_qfilter.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_qfilter.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_qfilter.Question = Fk used to support the array from Question
cc_qfilter.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_qfilter.UpdateTime = Timestamp when the object was last updated
cc_qfilter.UpdateUser = User who last updated the object

cc_questionset = A set of questions

cc_questionset.ID = Internally managed primary key
cc_questionset.CreateTime = Timestamp when the object was created
cc_questionset.CreateUser = User who created the object
cc_questionset.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_questionset.Name = 
cc_questionset.Priority = Sort order priority
cc_questionset.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_questionset.QuestionSetType = 
cc_questionset.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_questionset.ShouldRetireFromImportXML = If set to true, will retire this question set during the import xml process.
cc_questionset.UpdateTime = Timestamp when the object was last updated
cc_questionset.UpdateUser = User who last updated the object
cc_questionset.Name_L10N_ARRAY = 
cc_questionset.Questions = 
cc_questionset.QuestionSetFilters = 

cc_qsetfilter = 
    A filter that controls the visibility of the question set based on the answer to a given question. While the QuestionSetFilter
    entity exists in the product, it is no longer in use and may be removed in a future release.  QuestionSetFilter can be added 
    as an extension for customers that still require it if and when it is removed.
  

cc_qsetfilter.ID = Internally managed primary key
cc_qsetfilter.Answer = 
cc_qsetfilter.CreateTime = Timestamp when the object was created
cc_qsetfilter.CreateUser = User who created the object
cc_qsetfilter.FilterQuestion = 
cc_qsetfilter.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_qsetfilter.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_qsetfilter.QuestionSet = Fk to support the array from QuestionSet
cc_qsetfilter.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_qsetfilter.UpdateTime = Timestamp when the object was last updated
cc_qsetfilter.UpdateUser = User who last updated the object

cc_qsetname_l10n = null

cc_qsetname_l10n.ID = Internally managed primary key
cc_qsetname_l10n.Language = 
cc_qsetname_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_qsetname_l10n.Owner = 
cc_qsetname_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_qsetname_l10n.Value = 

cc_qsndefans_l10n = null

cc_qsndefans_l10n.ID = Internally managed primary key
cc_qsndefans_l10n.Language = 
cc_qsndefans_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_qsndefans_l10n.Owner = 
cc_qsndefans_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_qsndefans_l10n.Value = 

cc_qsnname_l10n = null

cc_qsnname_l10n.ID = Internally managed primary key
cc_qsnname_l10n.Language = 
cc_qsnname_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_qsnname_l10n.Owner = 
cc_qsnname_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_qsnname_l10n.Value = 

cc_riagreement = 
        Represents the contractual obligation of a reinsurer who has taken on some of the policy risk in exchange for some of the premium.
        The RIAgreement centralizes information related to that contract, detailing how the risk has been divided and ceded.
        Additionally, there is information to indicate when alerts should be directed to counterparties and users.
    

cc_riagreement.ID = Internally managed primary key
cc_riagreement.AgreementName = Agreement name.
cc_riagreement.AgreementNumber = Agreement number.
cc_riagreement.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_riagreement.AttachmentPoint = The lower limit of when coverage starts.
cc_riagreement.CededShare = Percentage of liability ceded to reinsurer.
cc_riagreement.Claim = Associated Claim
cc_riagreement.CreateTime = Timestamp when the object was created
cc_riagreement.CreateUser = User who created the object
cc_riagreement.Currency = The currency of the Agreement.
cc_riagreement.ExceedsNotificationThreshold = Boolean field to mark an agreement as exceeding the notification threshold.
cc_riagreement.ManagedInExternalSystem = Boolean field to indicate if this agreement should be edited in CC or another system.
cc_riagreement.NotificationThreshold = At what amount of total incurred loss would the reinsurers like to be notified of individual large losses.
cc_riagreement.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_riagreement.RecoveryLimit = The maximum amount that can be recovered from this agreement. Usually equal to TopOfLayer minus AttachmentPoint.
cc_riagreement.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_riagreement.RIAgreementGroup = Associated reinsurance agreement group.
cc_riagreement.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_riagreement.TopOfLayer = The upper limit of coverage. Counterpart to AttachmentPoint. Labeled as Coverage Limit in the UI to match PolicyCenter.
cc_riagreement.UpdateTime = Timestamp when the object was last updated
cc_riagreement.UpdateUser = User who last updated the object
cc_riagreement.RICodings = RICodings on this agreement.
cc_riagreement.ProportionalShare = Proportional Share

cc_riagreementgroup = 
        Associates a collection of RIAgreements with a collection of Exposures for a Claim.
    

cc_riagreementgroup.ID = Internally managed primary key
cc_riagreementgroup.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_riagreementgroup.Claim = Claim associated with the risk.
cc_riagreementgroup.CreateTime = Timestamp when the object was created
cc_riagreementgroup.CreateUser = User who created the object
cc_riagreementgroup.ExternalRiskID = Identifier for the risk in an external system. Null if created manually in ClaimCenterS.
cc_riagreementgroup.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_riagreementgroup.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_riagreementgroup.RiskName = Name of the risk.
cc_riagreementgroup.UpdateTime = Timestamp when the object was last updated
cc_riagreementgroup.UpdateUser = User who last updated the object
cc_riagreementgroup.Agreements = List of reinsurance agreements associated with this agreement group.
cc_riagreementgroup.Exposures = List of exposures associated with this reinsurance risk.

cc_ricoding = 
        Associates a Claim's Reinsurance Financial information with the appropriate RIAgreement and ReserveLine.
        Every Reinsurance Transaction must have an RICoding, thereby relating the Transaction
        with a specific RIAgreement (and hence Reinsurer) as well as an obligation on the Claim.
    

cc_ricoding.ID = Internally managed primary key
cc_ricoding.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_ricoding.Claim = The related claim.
cc_ricoding.CreateTime = Timestamp when the object was created
cc_ricoding.CreateUser = User who created the object
cc_ricoding.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_ricoding.ReserveLine = The related ReserveLine.
cc_ricoding.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_ricoding.RIAgreement = The related RIAgreement.
cc_ricoding.UpdateTime = Timestamp when the object was last updated
cc_ricoding.UpdateUser = User who last updated the object
cc_ricoding.RITAccounts = 
cc_ricoding.Transactions = Set of transactions that coded to this RICoding.

cc_ritaccount = RITAccounts are used in ClaimCenter to provide a rolled-up view of all Reinsurance (RI) financials transactions
    entered into the system. They share the same functionality as TAccounts for regular transactions.
    Each RICoding (unique combination of ReserveLine and RIAgreement) has
    X distinct TAccounts that together represent every possible life cycle state for each of the 2 RI transaction subtypes
    (Ceded Reserves, Payment Recoverables), and distinguish the totals for normal transactions vs.
    "adjustment" transactions. Although RITransaction only use the Submitting/Submitted status, we use the
    same TAccount mechanism as regular transactions so Financials Calculations and other code can be reused.
  

cc_ritaccount.ID = Internally managed primary key
cc_ritaccount.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_ritaccount.CreateTime = Timestamp when the object was created
cc_ritaccount.CreateUser = User who created the object
cc_ritaccount.CreditBalance = The balance of the claim currency credit side of this t-account's ledger.
cc_ritaccount.CreditRptBalance = The balance of the reporting currency credit side of this t-account's ledger.
cc_ritaccount.DebitBalance = The balance of the claim currency debit side of this t-account's ledger.
cc_ritaccount.DebitRptBalance = The balance of the reporting currency debit side of this t-account's ledger.
cc_ritaccount.NormalBalance = Indicates whether this t-account's normal balance is 'credit normal' or 'debit normal'.
cc_ritaccount.NumContributingTxns = Stores a denormalized counter of the number of financial transactions currently contributing to this taccount's net balance
cc_ritaccount.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_ritaccount.RICoding = FK to the RICoding that this TAccount is assoicated with.
cc_ritaccount.TAccountType = The type of this t-account, i.e., the transaction subtype(s) and lifecycle state that it reflects.
cc_ritaccount.UpdateTime = Timestamp when the object was last updated
cc_ritaccount.UpdateUser = User who last updated the object
cc_ritaccount.RITAccountLineItems = Line items for this RITAccount.

cc_ritaccountlineitem = The entry of a specific amount of money, either crediting or debiting one T-account. A TaccountTransaction will contain a pair of balancing TAccountLineItems - a debit to one
    T-account and an equal credit to another.
  

cc_ritaccountlineitem.ID = Internally managed primary key
cc_ritaccountlineitem.Amount = The amount of money (in the claim currency) in this line item that was either credited or debited against a TAccount.
cc_ritaccountlineitem.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_ritaccountlineitem.CreateTime = Timestamp when the object was created
cc_ritaccountlineitem.CreateUser = User who created the object
cc_ritaccountlineitem.CreditingTransaction = The TAccountTransaction for which this lineitem credits a t-account.
cc_ritaccountlineitem.DebitingTransaction = The TAccountTransaction for which this lineitem debits a t-account.
cc_ritaccountlineitem.DenormTransaction = Denormalized FK to TAccountTransaction table in order to speed up certain queries.  If both CreditingTransactionID and DebitingTransactionID are not null, then this field is NULL, otherwise this field will have same value as the non-null FK.  This allows us to query against this field only when looking for TAccountTransactions that are currently contributing to a TAccount.
cc_ritaccountlineitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_ritaccountlineitem.RptAmount = The amount of money (in the reporting currency) in this line item that was either credited or debited against a TAccount.
cc_ritaccountlineitem.TAccount = 
cc_ritaccountlineitem.UpdateTime = Timestamp when the object was last updated
cc_ritaccountlineitem.UpdateUser = User who last updated the object

cc_ritaccounttransaction = Contains the TAccountLineItems that change a pair of T-accounts to account for a transaction as it moves
    through its LifeCycle States. For example, when a reserve becomes committed, it is debited (removed from) Pending Approval ReservesXX
    T-Account and added (credited) to the ReservesXX T-Account.  Each TAccountTransaction has a link to its succeeding TAccountTransaction,
    thus providing a history of the life of the associated transaction.
  

cc_ritaccounttransaction.ID = Internally managed primary key
cc_ritaccounttransaction.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_ritaccounttransaction.Comments = Comments about the transaction, such as the LifeCycleState transition for which it was created.
cc_ritaccounttransaction.CreateTime = Timestamp when the object was created
cc_ritaccounttransaction.CreateUser = User who created the object
cc_ritaccounttransaction.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_ritaccounttransaction.Transaction = The higher-level financial transaction for which this t-account transaction was created.
cc_ritaccounttransaction.UpdateTime = Timestamp when the object was last updated
cc_ritaccounttransaction.UpdateUser = User who last updated the object
cc_ritaccounttransaction.CreditingLineItems = Set of TAccountLineItems that are used by this TAccountTransaction to credit a TAccount.
cc_ritaccounttransaction.DebitingLineItems = Set of TAccountLineItems that are used by this TAccountTransaction to debit a TAccount.

cc_ritransaction = 
    Represents a reinsurance financial operation, adding to the reinsurance financials calculations
    as a consequence of the creation of Reserves or Payments. As normal financials transactions are made,
    reinsurance transactions are automatically or manually created to indicate the expected recovery
    of such amounts from Reinsurance agreements.
  

cc_ritransaction.ID = Internally managed primary key
cc_ritransaction.Adjustment = True if this RITransaction was created to adjust the totals on its RICoding. This is usually used to distinguish explicit, user-requested adjustments from RITransactions that were created automatically for non-reinsurance Transactions.
cc_ritransaction.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_ritransaction.Claim = The related claim.<p>Setting the claim also sets this transaction's currency (if null) to the claim's currency.
cc_ritransaction.ClaimAmount = The amount of this RITransaction in the Claim's currency.
cc_ritransaction.ClaimToReportingExchangeRate = ExchangeRate to use when converting ClaimAmount to ReportingAmount. This must be null when the server is configured to run in single-currency mode and non-null otherwise.
cc_ritransaction.Comments = Comments about the transaction, such as a reason.
cc_ritransaction.CostCategory = The CostCategory for this transaction.
cc_ritransaction.CostType = Type of cost (for example, claim cost or adjusting overhead).
cc_ritransaction.CreateTime = Timestamp when the object was created
cc_ritransaction.CreateUser = User who created the object
cc_ritransaction.Exposure = The related exposure.
cc_ritransaction.LifeCycleState = Current internal lifecycle state of the transaction. Changing state affects T-accounts.
cc_ritransaction.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_ritransaction.ReportingAmount = The amount of this line item in the app's default currency (reporting currency).
cc_ritransaction.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_ritransaction.RIAgreement = 
cc_ritransaction.RICoding = The RICoding on which this RI transaction is coded. The Claim, Exposure, CostType, CostCategory, and RIAgreement fields on an RI transaction match those same fields on its RICoding.
cc_ritransaction.Status = Status of the transaction. Further refines the LifeCycleState. Can only change status directly to another status in the same LifeCycleState, which does not affect Taccounts.
cc_ritransaction.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_ritransaction.TransactionSet = Set that groups together one or more transactions for approval.
cc_ritransaction.UpdateTime = Timestamp when the object was last updated
cc_ritransaction.UpdateUser = User who last updated the object
cc_ritransaction.TAccountTransactions = Set of T-account transactions that make up the lifecycle of this Transaction.

cc_ritransactionset = 
      A set of RI transactions created at the same time.
  

cc_ritransactionset.ID = Internally managed primary key
cc_ritransactionset.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_ritransactionset.Claim = The claim entity to which this TransactionSet belongs.
cc_ritransactionset.Comments = Comments about the RI Transaction Set.  Typically, comments give some sense of why the transactions were created.
cc_ritransactionset.CreateTime = Timestamp when the object was created
cc_ritransactionset.CreateUser = User who created the object
cc_ritransactionset.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_ritransactionset.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_ritransactionset.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_ritransactionset.UpdateTime = Timestamp when the object was last updated
cc_ritransactionset.UpdateUser = User who last updated the object
cc_ritransactionset.RITransactions = RITransactions in the set.

cc_rectaccounttransaction = 
Contains the TAccountLineItems that change a pair of T-accounts to account for a transaction as it moves through its LifeCycle State.
Each TAccountTransaction has a link to its succeeding TAccountTransaction, thus providing a history of the life of the associated transaction.
 <br><span class="warning">This entity is overwritten by the application during staging.</span>

cc_rectaccounttransaction.ID = Internally managed primary key
cc_rectaccounttransaction.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_rectaccounttransaction.Comments = Comments about the transaction, such as the LifeCycleState transition for which it was created.
cc_rectaccounttransaction.CreateTime = Timestamp when the object was created
cc_rectaccounttransaction.CreateUser = User who created the object
cc_rectaccounttransaction.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_rectaccounttransaction.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_rectaccounttransaction.Transaction = The higher-level financial transaction for which this t-account transaction was created.
cc_rectaccounttransaction.UpdateTime = Timestamp when the object was last updated
cc_rectaccounttransaction.UpdateUser = User who last updated the object
cc_rectaccounttransaction.CreditingLineItems = Set of TAccountLineItems that are used by this TAccountTransaction to credit a TAccount.
cc_rectaccounttransaction.DebitingLineItems = Set of TAccountLineItems that are used by this TAccountTransaction to debit a TAccount.

cc_recToRecReserves = null

cc_recToRecReserves.ID = Internally managed primary key
cc_recToRecReserves.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_recToRecReserves.ForeignEntity = 
cc_recToRecReserves.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_recToRecReserves.Owner = 
cc_recToRecReserves.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_recoverycoding = 
A RecoveryCoding is a combination of RecoveryCategory and ReserveLine (which itself is a combination of Claim, Exposure, CostType, CostCategory, and ReservingCurrency).
Neither the RecoveryCategory nor ReserveLine on a RecoveryCoding can be null; the "Unspecified" RecoveryCategory value is sometimes used as a default.
A RecoveryCoding is used to categorize Recoveries and RecoveryReserves.
Every Recovery and RecoveryReserve is associated with a RecoveryCoding.
A Recovery or RecoveryReserve's ReserveLine must match its RecoveryCoding's ReserveLine.
<br><span class="warning">This entity is overwritten by the application during staging.</span>

cc_recoverycoding.ID = Internally managed primary key
cc_recoverycoding.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_recoverycoding.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_recoverycoding.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_recoverycoding.RecoveryCategory = The RecoveryCategory to which all associated transactions should be coded.
cc_recoverycoding.ReserveLine = The ReserveLine to which all associated transactions should be coded.
cc_recoverycoding.RecoveryTAccounts = 
cc_recoverycoding.Transactions = Set of transactions that coded to this RecoveryCoding.

cc_recoverytaccount = Represents the value of Recovery and RecoveryReserve transactions in a certain lifecycle state.<br><span class="warning">This entity is overwritten by the application during staging.</span>

cc_recoverytaccount.ID = Internally managed primary key
cc_recoverytaccount.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_recoverytaccount.CreateTime = Timestamp when the object was created
cc_recoverytaccount.CreateUser = User who created the object
cc_recoverytaccount.CreditBalance = The balance of the claim currency credit side of this t-account's ledger.
cc_recoverytaccount.CreditReservingBalance = The balance of the reserving currency credit side of this t-account's ledger.
cc_recoverytaccount.CreditRptBalance = The balance of the reporting currency credit side of this t-account's ledger.
cc_recoverytaccount.DebitBalance = The balance of the claim currency debit side of this t-account's ledger.
cc_recoverytaccount.DebitReservingBalance = The balance of the reserving currency debit side of this t-account's ledger.
cc_recoverytaccount.DebitRptBalance = The balance of the reporting currency debit side of this t-account's ledger.
cc_recoverytaccount.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_recoverytaccount.NormalBalance = Indicates whether this t-account's normal balance is 'credit normal' or 'debit normal'.
cc_recoverytaccount.NumContributingTxns = Stores a denormalized counter of the number of financial transactions currently contributing to this taccount's net balance
cc_recoverytaccount.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_recoverytaccount.RecoveryCoding = FK to the RecoveryCoding that this TAccount is assoicated with.
cc_recoverytaccount.TAccountType = The type of this t-account, i.e., the transaction subtype(s) and lifecycle state that it reflects.
cc_recoverytaccount.UpdateTime = Timestamp when the object was last updated
cc_recoverytaccount.UpdateUser = User who last updated the object
cc_recoverytaccount.RecoveryTAccountLineItems = Line items for this RecoveryTAccount.

cc_recoverytaccountlineitem = 
The entry of a specific amount of money, either crediting or debiting one T-account.
A TaccountTransaction will contain a pair of balancing TAccountLineItems -
a debit to one  T-account and an equal credit to another.
 <br><span class="warning">This entity is overwritten by the application during staging.</span>

cc_recoverytaccountlineitem.ID = Internally managed primary key
cc_recoverytaccountlineitem.Amount = The amount of money (in the claim currency) in this line item that was either credited or debited against a TAccount.
cc_recoverytaccountlineitem.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_recoverytaccountlineitem.CreateTime = Timestamp when the object was created
cc_recoverytaccountlineitem.CreateUser = User who created the object
cc_recoverytaccountlineitem.CreditingTransaction = The TAccountTransaction for which this lineitem credits a t-account.
cc_recoverytaccountlineitem.DebitingTransaction = The TAccountTransaction for which this lineitem debits a t-account.
cc_recoverytaccountlineitem.DenormTransaction = Denormalized FK to RecTAccountTransaction table in order to speed up certain queries.  If both CreditingTransactionID and DebitingTransactionID are not null, then this field is NULL, otherwise this field will have same value as the non-null FK.  This allows us to query against this field only when looking for RecTAccountTransactions that are currently contributing to a RecoveryTAccount.
cc_recoverytaccountlineitem.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_recoverytaccountlineitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_recoverytaccountlineitem.RecoveryTAccount = RecoveryTAccount with which this line item is associated.
cc_recoverytaccountlineitem.ReservingAmount = The amount of money (in the reserving currency) in this line item that was either credited or debited against a RecoveryTAccount.
cc_recoverytaccountlineitem.RptAmount = The amount of money (in the reporting currency) in this line item that was either credited or debited against a TAccount.
cc_recoverytaccountlineitem.UpdateTime = Timestamp when the object was last updated
cc_recoverytaccountlineitem.UpdateUser = User who last updated the object

cc_rectaccttxnhist = null

cc_rectaccttxnhist.ID = Internally managed primary key
cc_rectaccttxnhist.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_rectaccttxnhist.ForeignEntity = 
cc_rectaccttxnhist.Owner = 
cc_rectaccttxnhist.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_recurringcheck = Links the checks created as part of a recurrence of a check.

cc_recurringcheck.ID = Internally managed primary key
cc_recurringcheck.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_recurringcheck.CheckSet = The TransactionSet to which this RecurringCheck belongs.
cc_recurringcheck.CreateTime = Timestamp when the object was created
cc_recurringcheck.CreateUser = User who created the object
cc_recurringcheck.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_recurringcheck.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_recurringcheck.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_recurringcheck.UpdateTime = Timestamp when the object was last updated
cc_recurringcheck.UpdateUser = User who last updated the object
cc_recurringcheck.Checks = Individual checks that comprise this recurring check.

cc_region = 
        Represents a geographic region, an area of responsibility for a User or Group. A region contains
        a set of region zones.  Regions are therefore heterogenous with respect to a zone type.
      
    

cc_region.ID = Internally managed primary key
cc_region.CreateTime = Timestamp when the object was created
cc_region.CreateUser = User who created the object
cc_region.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_region.Name = name given to the region (this must be unique).
cc_region.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_region.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_region.UpdateTime = Timestamp when the object was last updated
cc_region.UpdateUser = User who last updated the object
cc_region.Name_L10N_ARRAY = 
cc_region.RegionZones = The zones that define this region.

cc_region_zone = A zone of a region.  It contains the zone code, the zone type and the country to which the region belongs.

cc_region_zone.ID = Internally managed primary key
cc_region_zone.Code = The code for this zone, this is the value that should be used for lookups.
cc_region_zone.CodeDenorm = denorm field for The code for this zone, this is the value that should be used for lookups.
cc_region_zone.Country = The country to which the zone belongs.
cc_region_zone.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_region_zone.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_region_zone.Region = The region.
cc_region_zone.ZoneType = Type of zone.

cc_region_name_l10n = null

cc_region_name_l10n.ID = Internally managed primary key
cc_region_name_l10n.Language = 
cc_region_name_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_region_name_l10n.Owner = 
cc_region_name_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_region_name_l10n.Value = 

cc_reinsurancecoverage = 
      This reference table contains the coverage type that is related to a Reinsurance Threshold.
      
    

cc_reinsurancecoverage.ID = Internally managed primary key
cc_reinsurancecoverage.Coverage = Coverage Type of the coverage on this Reinsurance Threshold.
cc_reinsurancecoverage.CreateTime = Timestamp when the object was created
cc_reinsurancecoverage.CreateUser = User who created the object
cc_reinsurancecoverage.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_reinsurancecoverage.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_reinsurancecoverage.ReinsuranceThreshold = Related reinsurance threshold.
cc_reinsurancecoverage.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_reinsurancecoverage.UpdateTime = Timestamp when the object was last updated
cc_reinsurancecoverage.UpdateUser = User who last updated the object

cc_reinsurancelosscause = 
      This reference table contains the loss cause that is related to a Reinsurance Threshold.
      
    

cc_reinsurancelosscause.ID = Internally managed primary key
cc_reinsurancelosscause.CreateTime = Timestamp when the object was created
cc_reinsurancelosscause.CreateUser = User who created the object
cc_reinsurancelosscause.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_reinsurancelosscause.LossCause = General cause of loss; dependent on loss type.
cc_reinsurancelosscause.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_reinsurancelosscause.ReinsuranceThreshold = Related reinsurance threshold.
cc_reinsurancelosscause.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_reinsurancelosscause.UpdateTime = Timestamp when the object was last updated
cc_reinsurancelosscause.UpdateUser = User who last updated the object

cc_reinsurancethreshold = 
        This reference table contains the information necessary to determine whether a claim has exceeded the
        reinsurance reportable threshold notification limit based upon the claim's policy type, coverage types and loss causes.
      
    

cc_reinsurancethreshold.ID = Internally managed primary key
cc_reinsurancethreshold.CreateTime = Timestamp when the object was created
cc_reinsurancethreshold.CreateUser = User who created the object
cc_reinsurancethreshold.EndDate = End Date
cc_reinsurancethreshold.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_reinsurancethreshold.LossType = Type of loss.
cc_reinsurancethreshold.PolicyType = Type of policy.
cc_reinsurancethreshold.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_reinsurancethreshold.ReportingThreshold = Reinsurance reporting threshold percentage for which a claim is marked reinsurance reportable.
cc_reinsurancethreshold.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_reinsurancethreshold.StartDate = Start Date
cc_reinsurancethreshold.ThresholdValue = Reinsurance threshold value.
cc_reinsurancethreshold.TreatyType = Type of reinsurance treaty.
cc_reinsurancethreshold.UpdateTime = Timestamp when the object was last updated
cc_reinsurancethreshold.UpdateUser = User who last updated the object
cc_reinsurancethreshold.CoverageTypes = 
cc_reinsurancethreshold.LossCauses = 

cc_relatedactivity = null

cc_relatedactivity.ID = Internally managed primary key
cc_relatedactivity.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_relatedactivity.ForeignEntity = 
cc_relatedactivity.Owner = 
cc_relatedactivity.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_reserveline = <p>Every Transaction either increases or depletes reserves on a ReserveLine. Given the flexibility of Exposure being
      null, and the two typelists being configurable, customers can track their Transactions according to their needs: all
      Reserves and Payments could occur at the claim-level, or they could be categorized by exposure, CostType ("ClaimCost",
      "A & O" adjusting expenses, etc) and CostCategory (Auto body repair, Legal, Vehicle Inspection, etc). Only certain
      combinations of Exposure coverage type, CostType, and CostCategory are valid, as defined in the CostCategory.xml
      typelist file.
    <br><span class="warning">This entity is overwritten by the application during staging.</span>

cc_reserveline.ID = Internally managed primary key
cc_reserveline.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_reserveline.Claim = The related claim.
cc_reserveline.CostCategory = The costcategory for this transaction.
cc_reserveline.CostType = Type of cost (for example, LAE or claim cost).
cc_reserveline.CreateTime = Timestamp when the object was created
cc_reserveline.CreateUser = User who created the object
cc_reserveline.Exposure = The related exposure.
cc_reserveline.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_reserveline.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_reserveline.ReservingCurrency = Reserving Currency of this ReserveLine. Indicates the currency in which reserves are to be set aside and eroded.
cc_reserveline.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_reserveline.UpdateTime = Timestamp when the object was last updated
cc_reserveline.UpdateUser = User who last updated the object
cc_reserveline.RecoveryCodings = Set of RecoveryCodings that reference this ReserveLine.
cc_reserveline.RICodings = Set of RICodings that reference this ReserveLine.
cc_reserveline.TAccounts = 
cc_reserveline.Transactions = Set of transactions that contribute to this ReserveLine.

cc_reservelinewrapper = 
      Provides a level of indirection between a BulkInvoiceItem and its ReserveLine. This is necessary when a
      BulkInvoiceItem is created for a non-existent reserve line, and so cannot be committed to the database.
      The BulkInvoiceItem has a non-null foreign key (FK) to ReserveLineWrapper, with a second FK from the wrapper
      to the actual reserve line that is null if the reserve line doesn't yet exist. The Bulk Invoice screen displays
      the wrapper's correct but uncreated reserve line so the user never knows if the displayed reserve line exists yet.
    

cc_reservelinewrapper.ID = Internally managed primary key
cc_reservelinewrapper.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_reservelinewrapper.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_reservelinewrapper.ReserveLine = The ReserveLine wrapped by this ReserveLineWrapper.

cc_review = A service provider review, created from a given ReviewType.

cc_review.ID = Internally managed primary key
cc_review.AddressBookUID = Represents the ID of the associated ReviewSummary in Address Book. Null if the object is not linked to Address Book.
cc_review.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_review.Claim = Associated Claim.
cc_review.Comments = Comments about the Review
cc_review.Completed = Boolean field to mark a review as completed.
cc_review.Contact = Associated Contact.
cc_review.CreateTime = Timestamp when the object was created
cc_review.CreateUser = User who created the object
cc_review.Description = Description ofthe accident or loss.
cc_review.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_review.Name = Short name of this review type.
cc_review.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_review.RelatedTo = Detailed description of this review type.
cc_review.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_review.ReviewedBy = User who created the review
cc_review.ReviewType = Associated ReviewType.
cc_review.Score = 
cc_review.ServiceDate = Date of the service being reviewed
cc_review.ServiceType = 
cc_review.Subcontact = Optionally associated sub-Contact (Service Person or similar).
cc_review.UpdateTime = Timestamp when the object was last updated
cc_review.UpdateUser = User who last updated the object
cc_review.CategoryScores = List of categories and their scores, associated with this Review.
cc_review.QuestionAnswerSets = List of Question set/Answer Set pairs, and their assigned categories, associated with this Review.

cc_reviewcategoryquestionset = Table linking Reviews to QuestionSet

cc_reviewcategoryquestionset.ID = Internally managed primary key
cc_reviewcategoryquestionset.ElementOrder = 
cc_reviewcategoryquestionset.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_reviewcategoryquestionset.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_reviewcategoryquestionset.QuestionSet = Associated QuestionSet.
cc_reviewcategoryquestionset.ReviewCategory = Category of this QuestionSet.
cc_reviewcategoryquestionset.ReviewType = Associated ReviewType.

cc_reviewcategoryscore = Table linking Reviews to Category Scores

cc_reviewcategoryscore.ID = Internally managed primary key
cc_reviewcategoryscore.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_reviewcategoryscore.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_reviewcategoryscore.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_reviewcategoryscore.Review = Associated Review.
cc_reviewcategoryscore.ReviewCategory = Category of this QuestionSet.
cc_reviewcategoryscore.Score = 

cc_reviewqanswerset = Table linking Reviews to QuestionSet

cc_reviewqanswerset.ID = Internally managed primary key
cc_reviewqanswerset.AnswerSet = Associated AnswerSet.
cc_reviewqanswerset.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_reviewqanswerset.ElementOrder = 
cc_reviewqanswerset.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_reviewqanswerset.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_reviewqanswerset.QuestionSet = Associated QuestionSet.
cc_reviewqanswerset.Review = Associated Review.
cc_reviewqanswerset.ReviewCategory = Category of this QuestionSet.

cc_reviewsyncworkitem = Queue of Reviews to be sent to ContactManager, part of Service Provider Management. Work items are recorded as the ID value of (ClaimCenter) Review entities. This is a system-internal entity.
    

cc_reviewsyncworkitem.ID = Internally managed primary key
cc_reviewsyncworkitem.Attempts = 
cc_reviewsyncworkitem.AvailableSince = The time after which the work item can be tried. Must be null on failed work items
cc_reviewsyncworkitem.CheckedOutBy = 
cc_reviewsyncworkitem.CreationTime = 
cc_reviewsyncworkitem.Exception = Stack trace of the exception
cc_reviewsyncworkitem.LastUpdateTime = 
cc_reviewsyncworkitem.Priority = 
cc_reviewsyncworkitem.ProcessHistoryID = The writer batch job that created this workitem (ProcessHistory).
cc_reviewsyncworkitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_reviewsyncworkitem.Review = Review to be transmitted.
cc_reviewsyncworkitem.Status = Status of this workitem.

cc_reviewtype = Defines a type of service provider review, used to create Review entities.

cc_reviewtype.ID = Internally managed primary key
cc_reviewtype.ContactSubtype = Contact class, like Person, Company, and Venue.
cc_reviewtype.CreateTime = Timestamp when the object was created
cc_reviewtype.CreateUser = User who created the object
cc_reviewtype.Description = Detailed description of this review type.
cc_reviewtype.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_reviewtype.Name = Short name of this review type.
cc_reviewtype.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_reviewtype.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_reviewtype.ShouldRetireFromImportXML = If set to true, will retire this question set during the import xml process.
cc_reviewtype.UpdateTime = Timestamp when the object was last updated
cc_reviewtype.UpdateUser = User who last updated the object
cc_reviewtype.ReviewCategoryQuestionSets = List of Question sets, and their assigned categories, associated with this ReviewType.

cc_riskunit = Supertype for all risk units.

cc_riskunit.ID = Internally managed primary key
cc_riskunit.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_riskunit.ClassCode = The Class Code (if any) assigned to this risk unit
cc_riskunit.CreateTime = Timestamp when the object was created
cc_riskunit.CreateUser = User who created the object
cc_riskunit.Description = Description of this risk
cc_riskunit.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_riskunit.Policy = Related policy.
cc_riskunit.PolicySystemId = Identifier for the risk in an external policy system
cc_riskunit.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_riskunit.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_riskunit.RUNumber = Number of the risk unit on the policy.
cc_riskunit.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_riskunit.UpdateTime = Timestamp when the object was last updated
cc_riskunit.UpdateUser = User who last updated the object
cc_riskunit.Coverages = List of coverages directly related to the risk unit.
cc_riskunit.Building = The building on the location that corresponds to this riskunit.
cc_riskunit.Lienholders = List of lien holders for the property.
cc_riskunit.PolicyLocation = The PolicyLocation associated with this RiskUnit.
cc_riskunit.OtherRiskType = Type of location based miscellaneous risk unit
cc_riskunit.EndDate = The date this trip will end
cc_riskunit.GeographicalRegion = Geographical regions for travel
cc_riskunit.StartDate = The date this trip will start
cc_riskunit.TripDescription = A brief description of the trip
cc_riskunit.Vehicle = Related vehicle.
cc_riskunit.VehicleLocation = The PolicyLocation associted with this Vehicle Risk Unit, if any.

cc_ritaccttxnhist = null

cc_ritaccttxnhist.ID = Internally managed primary key
cc_ritaccttxnhist.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_ritaccttxnhist.ForeignEntity = 
cc_ritaccttxnhist.Owner = 
cc_ritaccttxnhist.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_role = 
        A set of permissions defining a user Role. A User can be given multiple Roles and will be granted
        the union of all their Role permission sets.
      
    

cc_role.ID = Internally managed primary key
cc_role.CarrierInternalRole = If true, this role is applicable to users internal to the carrier organization.
cc_role.CreateTime = Timestamp when the object was created
cc_role.CreateUser = User who created the object
cc_role.Description = An optional, more detailed description of the role.
cc_role.Name = Displayable name of the role.
cc_role.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_role.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_role.RoleType = Type of the role.
cc_role.UpdateTime = Timestamp when the object was last updated
cc_role.UpdateUser = User who last updated the object
cc_role.Description_L10N_ARRAY = 
cc_role.Name_L10N_ARRAY = 
cc_role.Privileges = Privileges granted by membership in this role.

cc_privilege = Joins a Role with the permissions granted by it.

cc_privilege.ID = Internally managed primary key
cc_privilege.Permission = Permission granted by the parent role.
cc_privilege.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_privilege.Role = The parent role.

cc_role_desc_l10n = null

cc_role_desc_l10n.ID = Internally managed primary key
cc_role_desc_l10n.Language = 
cc_role_desc_l10n.Owner = 
cc_role_desc_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_role_desc_l10n.Value = 

cc_role_name_l10n = null

cc_role_name_l10n.ID = Internally managed primary key
cc_role_name_l10n.Language = 
cc_role_name_l10n.Owner = 
cc_role_name_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_role_name_l10n.Value = 

cc_rolling = Entity to keep track of rolling upgrades.

cc_rolling.config = 
cc_rolling.source = 

cc_bizrule = The root entity that encapsulates the definition of a business rule.

cc_bizrule.ID = Internally managed primary key
cc_bizrule.AvailableToRun = 
cc_bizrule.Description = 
cc_bizrule.Name = 
cc_bizrule.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bizrule.RuleCondition = 
cc_bizrule.RuleContextDefinitionKey = 
cc_bizrule.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_bizrule.TriggeringPointKey = 
cc_bizrule.UpdateSystemId = Identifier of the system on which the rule was updated.
cc_bizrule.UpdateTime = 
cc_bizrule.UpdateUserName = The name of the user who updated this rule.
cc_bizrule.RuleCommandDefinitions = 
cc_bizrule.Jurisdictions = 
cc_bizrule.LossTypes = 
cc_bizrule.PolicyTypes = 
cc_bizrule.Versions = 

cc_bizrulecommdef = Rule Command Definition

cc_bizrulecommdef.ID = Internally managed primary key
cc_bizrulecommdef.OrderNumber = 
cc_bizrulecommdef.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bizrulecommdef.Rule = 
cc_bizrulecommdef.RuleActionKey = 
cc_bizrulecommdef.RuleCommandParameters = 

cc_bizrulecommparam = Definition of one parameter in a RuleCommandDefinition

cc_bizrulecommparam.ID = Internally managed primary key
cc_bizrulecommparam.Expression = 
cc_bizrulecommparam.ParameterName = 
cc_bizrulecommparam.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bizrulecommparam.RuleCommandDefinition = 

cc_bizrulecond = Condition of a Rule

cc_bizrulecond.ID = Internally managed primary key
cc_bizrulecond.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bizrulecond.Type = 
cc_bizrulecond.ConditionExpressionFragments = 
cc_bizrulecond.RuleConditionLines = 

cc_bizrulecondline = One line in a RuleCondition

cc_bizrulecondline.ID = Internally managed primary key
cc_bizrulecondline.BooleanOperator = 
cc_bizrulecondline.LeftOperand = 
cc_bizrulecondline.LeftParens = 
cc_bizrulecondline.Operator = 
cc_bizrulecondline.OrderNumber = 
cc_bizrulecondline.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bizrulecondline.RightOperand = 
cc_bizrulecondline.RightParens = 
cc_bizrulecondline.RuleCondition = 

cc_bizruledata = The data contains a serialized set of business rules.

cc_bizruledata.ID = Internally managed primary key
cc_bizruledata.Blob = 
cc_bizruledata.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_bizruleeximtask = The task to export/import business rules.

cc_bizruleeximtask.ID = Internally managed primary key
cc_bizruleeximtask.BatchProcessID = The batch process that processes this task.
cc_bizruleeximtask.BatchProcessCompleted = The date the batch process processed the task.
cc_bizruleeximtask.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bizruleeximtask.RuleData = The serialized rules
cc_bizruleeximtask.RuleVersionType = 
cc_bizruleeximtask.StartedBy = The user who started the task.
cc_bizruleeximtask.StartTime = The time this task started.
cc_bizruleeximtask.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_bizruleeximtask.TerminationRequested = The date this task requested to terminate.
cc_bizruleeximtask.TargetName = The target name, e.g. the file name.
cc_bizruleeximtask.SourceName = The source name, e.g. the file name.

cc_bizruleimtaskitem = null

cc_bizruleimtaskitem.ID = Internally managed primary key
cc_bizruleimtaskitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bizruleimtaskitem.RuleVersion = The exported rule version
cc_bizruleimtaskitem.Task = 

cc_bizrulehead = Rule Head

cc_bizrulehead.ID = Internally managed primary key
cc_bizrulehead.GlobalRuleID = The identity of a rule for which this is the unique head instance.
cc_bizrulehead.InProgressImportTaskEntry = In progress import entry
cc_bizrulehead.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bizrulehead.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_bizrulehead.DeployedVersion = 
cc_bizrulehead.HeadVersion = 

cc_bizimportauditrecord = Records a fact that the RuleVersion or DeployedRuleTag was imported from another system.

cc_bizimportauditrecord.ID = Internally managed primary key
cc_bizimportauditrecord.DeploymentTag = 
cc_bizimportauditrecord.GlobalRuleID = 
cc_bizimportauditrecord.ImportTime = 
cc_bizimportauditrecord.ImportUserName = 
cc_bizimportauditrecord.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bizimportauditrecord.RuleVersion = 

cc_bizruleimtaskentry = null

cc_bizruleimtaskentry.ID = Internally managed primary key
cc_bizruleimtaskentry.ChosenSide = The NewHeadVersion is an exact copy of the given import side
cc_bizruleimtaskentry.ExistingVersion = The existing version.
cc_bizruleimtaskentry.ImportedVersion = The imported rule version.
cc_bizruleimtaskentry.NewHeadVersion = The new head version
cc_bizruleimtaskentry.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bizruleimtaskentry.RuleName = 
cc_bizruleimtaskentry.Status = The current import entry status
cc_bizruleimtaskentry.Task = 

cc_rulevalid = Business Rule Validation Info

cc_rulevalid.ID = Internally managed primary key
cc_rulevalid.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_rulevalid.Rule = 
cc_rulevalid.Valid = 

cc_bizruleversion = Business Rule Version

cc_bizruleversion.ID = Internally managed primary key
cc_bizruleversion.CreateSystemId = Identifier of the system on which the version was created.
cc_bizruleversion.CreateTime = 
cc_bizruleversion.CreateUserName = The name of the user who created this version.
cc_bizruleversion.GlobalRuleID = Identifies the RuleHead to which this version applies.
cc_bizruleversion.LockedInternal = 
cc_bizruleversion.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_bizruleversion.Status = 
cc_bizruleversion.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_bizruleversion.DeploymentTags = 
cc_bizruleversion.ParentEdges = 
cc_bizruleversion.Rule = 

cc_bizruleversionpedge = null

cc_bizruleversionpedge.ID = Internally managed primary key
cc_bizruleversionpedge.AuditTrailParent = 
cc_bizruleversionpedge.OrderNumber = 
cc_bizruleversionpedge.Owner = 
cc_bizruleversionpedge.Parent = 
cc_bizruleversionpedge.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_sitrigger = 
        Describes a trigger for a special investigation. Tracks the Claim that generated the trigger and the rule
        which was triggered.
      
    

cc_sitrigger.ID = Internally managed primary key
cc_sitrigger.AdditionalInformation = Additional information being tracked.
cc_sitrigger.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_sitrigger.Claim = Foreign key to Claim entity.
cc_sitrigger.CreateTime = Timestamp when the object was created
cc_sitrigger.CreateUser = User who created the object
cc_sitrigger.Exposure = Foreign key to exposure table.
cc_sitrigger.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_sitrigger.PointValue = Point value of this trigger - as defined in rules.
cc_sitrigger.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_sitrigger.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_sitrigger.TriggerDescription = Rule that was triggered.
cc_sitrigger.UpdateTime = Timestamp when the object was last updated
cc_sitrigger.UpdateUser = User who last updated the object

cc_siuanswerset = Join table between the answer set and the claim, to allow for multiple SIU answer sets on the same claim

cc_siuanswerset.ID = Internally managed primary key
cc_siuanswerset.AnswerSet = Fk to the AnswerSet
cc_siuanswerset.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_siuanswerset.Claim = Fk to the Claim
cc_siuanswerset.CreateTime = Timestamp when the object was created
cc_siuanswerset.CreateUser = User who created the object
cc_siuanswerset.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_siuanswerset.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_siuanswerset.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_siuanswerset.UpdateTime = Timestamp when the object was last updated
cc_siuanswerset.UpdateUser = User who last updated the object

cc_scheduledjob = Scheduled batch process

cc_scheduledjob.ID = Internally managed primary key
cc_scheduledjob.ActualSchedule = The actual schedule
cc_scheduledjob.ConfigSchedule = The schedule from the configuration file
cc_scheduledjob.NextTime = The next time when the batch process has to be started
cc_scheduledjob.ProcessType = The batch process
cc_scheduledjob.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_scheduledjob.Version = The bean version

cc_scriptparameter = <code>ScriptParameter.OUR_STANDARD_RATE</code>.
      Their values can be edited in the Guidewire applications from the Administration tab.
    

cc_scriptparameter.ID = Internally managed primary key
cc_scriptparameter.BitValue = Value if the parameter type is Bit.
cc_scriptparameter.CreateTime = Timestamp when the object was created
cc_scriptparameter.CreateUser = User who created the object
cc_scriptparameter.DatetimeValue = Value if the parameter type is Datetime.
cc_scriptparameter.DecimalValue = Value if the parameter type is Decimal.
cc_scriptparameter.Group = Group value.
cc_scriptparameter.IntegerValue = Value if the parameter type is Int.
cc_scriptparameter.MoneyValue = Value if the parameter type is Money.
cc_scriptparameter.MonthlyfrequencyValue = Value if the parameter type is Monthly frequency.
cc_scriptparameter.NonnegativeintegerValue = Value if the parameter type is a Non-negative integer.
cc_scriptparameter.NonnegativemoneyValue = Value if the parameter type is Non-negative money.
cc_scriptparameter.ParameterName = Name of the parameter.
cc_scriptparameter.ParameterType = Identifies the value type (string, integer, boolean, date, etc).
cc_scriptparameter.PercentagedecValue = Value if the parameter type is Percentagedec.
cc_scriptparameter.PercentageValue = Value if the parameter type is Percentage.
cc_scriptparameter.PhoneValue = Value if the parameter type is Phone.
cc_scriptparameter.PositiveintegerValue = Value if the parameter type is Positive integer.
cc_scriptparameter.PositivemoneyValue = Value if the parameter type is Positive money.
cc_scriptparameter.PostalCodeValue = Value if the parameter type is PostalCode.
cc_scriptparameter.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_scriptparameter.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_scriptparameter.RiskValue = Value if the parameter type is Risk.
cc_scriptparameter.SpeedValue = Value if the parameter type is Speed.
cc_scriptparameter.UpdateTime = Timestamp when the object was last updated
cc_scriptparameter.UpdateUser = User who last updated the object
cc_scriptparameter.User = User that created the script parameter.
cc_scriptparameter.VarcharValue = Value if the parameter type is Varchar (i.e. String).
cc_scriptparameter.WeeklyfrequencyValue = Value if the parameter type is Weekly frequency.
cc_scriptparameter.YearValue = Value if the parameter type is Year.

cc_securityzone = 
        Used to partition groups, users and entities assigned to them. By default, a user in one zone
        cannot view an entity assigned to someone in a different zone. Each group belongs to exactly
        one security zone, and a customer can define an arbitrary number of security zones. A user is
        a member of a zone if they are a member of a group in the zone, and an assignable entity belongs
        to a zone if its assigned group belongs to the zone. For full details see the Administration Guide.
      
    

cc_securityzone.ID = Internally managed primary key
cc_securityzone.CreateTime = Timestamp when the object was created
cc_securityzone.CreateUser = User who created the object
cc_securityzone.Description = An optional, more detailed description of the security zone.
cc_securityzone.Name = Name of the security zone.
cc_securityzone.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_securityzone.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_securityzone.UpdateTime = Timestamp when the object was last updated
cc_securityzone.UpdateUser = User who last updated the object
cc_securityzone.Description_L10N_ARRAY = 
cc_securityzone.Groups = Groups that belong to this security zone.
cc_securityzone.Name_L10N_ARRAY = 

cc_seczone_dsc_l10n = null

cc_seczone_dsc_l10n.ID = Internally managed primary key
cc_seczone_dsc_l10n.Language = 
cc_seczone_dsc_l10n.Owner = 
cc_seczone_dsc_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_seczone_dsc_l10n.Value = 

cc_seczone_nam_l10n = null

cc_seczone_nam_l10n.ID = Internally managed primary key
cc_seczone_nam_l10n.Language = 
cc_seczone_nam_l10n.Owner = 
cc_seczone_nam_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_seczone_nam_l10n.Value = 

cc_sequence = Store mapping for sequence-key to sequence-number, sequence-key are generated on demand, and number a unique sequnce acquire by application.

cc_sequence.ID = Internally managed primary key
cc_sequence.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_sequence.SequenceKey = The sequence-key (name).
cc_sequence.SequenceNumber = The unique sequence-number for the key.

cc_servicerequest = 
    Represents a unit of work requested of a specialist or vendor, including instructions that describe the work to be
    done and the current state of the ServiceRequest.
  

cc_servicerequest.ID = Internally managed primary key
cc_servicerequest.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_servicerequest.AssignedByUser = User who assigned this entity.
cc_servicerequest.AssignedGroup = Group to which this entity is assigned; null if none assigned
cc_servicerequest.AssignedQueue = Either the Queue to which this entity is assigned (if AssignmentStatus is 'assigned'), the Queue to which the system suggests assignment (if AssignmentStatus is 'manual'), or null if none assigned. Only one of AssignedUserID or AssignedQueueID should be non null.
cc_servicerequest.AssignedUser = Either the User to which this entity is assigned (if AssignmentStatus is 'assigned'), the User to which the system suggests assignment (if AssignmentStatus is 'manual'), or null if none assigned. Only one of AssignedUserID or AssignedQueueID should be non null.
cc_servicerequest.AssignmentDate = Time when entity last assigned
cc_servicerequest.AssignmentStatus = Typelist describing assignment status.
cc_servicerequest.CanceledReason = The reason the service request was canceled
cc_servicerequest.Claim = The related claim.
cc_servicerequest.CloseDate = Date and time when this entity was closed. (Not applicable to all assignable entities)
cc_servicerequest.CreateTime = Timestamp when the object was created
cc_servicerequest.CreateUser = User who created the object
cc_servicerequest.Currency = The currency of this service request, which is used for its quotes, invoices, and checks.
cc_servicerequest.ExpectedQuoteCompletionDate = Date by which the specialist expects to submit the quote, or null if the specialist has not indicated such a date.
cc_servicerequest.ExpectedServiceCompletionDate = Date by which the specialist expects to complete the work, or null if the specialist has not indicated such a date.
cc_servicerequest.Exposure = The exposure that led to the work requested by this service request.
cc_servicerequest.Incident = The incident that led to the work requested by this service request.
cc_servicerequest.Kind = The kind for this service request.
cc_servicerequest.LatestChangeTimestampDenorm = The timestamp of the latest ServiceRequestChange in the History. This value is denormalized here for ease of ordering ServiceRequests in queries. This is non-nullable because History cannot be empty.
cc_servicerequest.PreviousGroup = Group to which this entity was previously assigned.
cc_servicerequest.PreviousQueue = Queue to which this entity was previously assigned.
cc_servicerequest.PreviousUser = User to which this entity was previously assigned.
cc_servicerequest.Progress = This service request's current place in its life cycle.
cc_servicerequest.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_servicerequest.QuoteStatus = The current quote status for this service request.
cc_servicerequest.RequestedQuoteCompletionDate = Desired date by which the specialist will have submitted the quote, or null if the specialist has not indicated such a date.
cc_servicerequest.RequestedServiceCompletionDate = Desired date by which the specialist will have completed the work, or null if the specialist has not indicated such a date.
cc_servicerequest.ServiceRequestNumber = A globally-unique, user-readable identifier for this service request. This number is normally generated within ClaimCenter.
cc_servicerequest.ServiceRequestReferenceNumber = A string identifier assigned to this ServiceRequest by the specialist. The value of this field may only be meaningful to the specialist.
cc_servicerequest.Specialist = The vendor or internal entity selected to do the work requested by this service request.
cc_servicerequest.SpecialistCommMethod = The channel through which the carrier will communicate with the specialist.
cc_servicerequest.Tier = The tier of this service request.
cc_servicerequest.UpdateTime = Timestamp when the object was last updated
cc_servicerequest.UpdateUser = User who last updated the object
cc_servicerequest.Activities = The activities associated with this service request
cc_servicerequest.DocumentLinks = The link information for documents associated with this service request
cc_servicerequest.History = The changes that have been applied to this service request, which together comprise its history.
cc_servicerequest.InstructionHistory = All instructions that have been created for this service request, including instructions that are no longer active.
cc_servicerequest.Invoices = The Invoices associated with this service request
cc_servicerequest.Messages = Messages related to this service request
cc_servicerequest.Notes = The notes associated with this service request
cc_servicerequest.Quotes = The Quotes associated with this service request
cc_servicerequest.ServiceRequestMetrics = Metrics related to this service request
cc_servicerequest.ServiceRequestPromotions = Array of ServiceRequestPromotions linking this ServiceRequest to other ServiceRequests to which this was promoted.

cc_servicerequestchange = 
    An instance of this type records a change to its service request. Properties with names following the "New_" and "_Chg"
    naming conventions are populated automatically by ServiceRequest.recordChange.
  

cc_servicerequestchange.ID = Internally managed primary key
cc_servicerequestchange.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_servicerequestchange.CreateTime = Timestamp when the object was created
cc_servicerequestchange.CreateUser = User who created the object
cc_servicerequestchange.Description = An optional explanation for this change.
cc_servicerequestchange.ExpectedQuoteCompletionDate_Chg = True if ExpectedQuoteCompletionDate is changing.
cc_servicerequestchange.ExpectedServiceCompletionDate_Chg = True if ExpectedServiceCompletionDate is changing.
cc_servicerequestchange.Initiator = The user who initiated this change.
cc_servicerequestchange.Instruction_Chg = True if Instruction is changing.
cc_servicerequestchange.New_ExpectedQuoteCompletionDate = The new value of ServiceRequest.ExpectedQuoteCompletionDate, or null if ExpectedQuoteCompletionDate did not change.
cc_servicerequestchange.New_ExpectedServiceCompletionDate = The new value of ServiceRequest.ExpectedServiceCompletionDate, or null if ExpectedServiceCompletionDate did not change.
cc_servicerequestchange.New_Instruction = The new value of ServiceRequest.Instruction, or null if Instruction did not change. Note that it is expected that ServiceRequest.Instruction will only start referring to a particular instruction once -- there should be at most one ServiceRequestChange on a ServiceRequest referring to a particular ServiceRequestInstruction with this foreign key.
cc_servicerequestchange.New_Progress = The new value of ServiceRequest.Progress, or null if Progress did not change.
cc_servicerequestchange.New_QuoteStatus = The new value of ServiceRequest.QuoteStatus, or null if Quote Status did not change.
cc_servicerequestchange.Operation = The operation performed during this change
cc_servicerequestchange.Progress_Chg = True if Progress is changing.
cc_servicerequestchange.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_servicerequestchange.QuoteStatus_Chg = True if Quote Status is changing.
cc_servicerequestchange.RelatedStatement = The service request statement that is related to this change.
cc_servicerequestchange.Sequence = The sequence of this change on the ServiceRequest. ServiceRequestChanges are ordered consecutively starting with Sequence of 1.
cc_servicerequestchange.ServiceRequest = The related service request.
cc_servicerequestchange.Timestamp = The time at which this change was applied. This timestamp is stored for informational purposes, but it may be possible for the relative timestamps of two instances to incorrectly or ambiguously indicate the relative order of two instances. For reliable ordering, use the Sequence property instead.
cc_servicerequestchange.UpdateTime = Timestamp when the object was last updated
cc_servicerequestchange.UpdateUser = User who last updated the object

cc_servicerequestdocumentlink = Associates a Service Request to a Document. Use ServiceRequest.linkDocument and unlinkDocument to create links between ServiceRequests and documents.

cc_servicerequestdocumentlink.ID = Internally managed primary key
cc_servicerequestdocumentlink.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_servicerequestdocumentlink.DateSpecialistNotified = The date that the specialist was notified about the linked document, or null if the specialist has not been notified.
cc_servicerequestdocumentlink.Document = Associated Document. Warning: even though there is always a Document associated with this entity, this field may be null when the IDocumentMetadataSource plugin is enabled. To reliably get the associated Document, use the LinkedDocument property.
cc_servicerequestdocumentlink.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_servicerequestdocumentlink.ServiceRequest = Service Request the document is linked to.
cc_servicerequestdocumentlink.VisibleToSpecialist = Whether this document should be visible to the specialist.
cc_servicerequestdocumentlink.StatementDocumentLinks = The join entity that holds the information for statements associated with this document

cc_servicerequestinstruction = 
    Contains a set of instructions to be transmitted to the specialist who will work on a service request.
  

cc_servicerequestinstruction.ID = Internally managed primary key
cc_servicerequestinstruction.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_servicerequestinstruction.CreateTime = Timestamp when the object was created
cc_servicerequestinstruction.CreateUser = User who created the object
cc_servicerequestinstruction.CustomerContact = The contact with whom the specialist should coordinate to perform the work. In many cases, this will be the claimant.
cc_servicerequestinstruction.InstructionText = Text instructions to be provided to the specialist.
cc_servicerequestinstruction.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_servicerequestinstruction.ServiceAddress = The location at which the service is to be performed; may be null if the location is implied by the specialist, such as if it will be performed at the specialist's place of business.
cc_servicerequestinstruction.ServiceRequest = The service request for which the specialist is being instructed.
cc_servicerequestinstruction.UpdateTime = Timestamp when the object was last updated
cc_servicerequestinstruction.UpdateUser = User who last updated the object
cc_servicerequestinstruction.Services = The services to be performed for this set of instructions.

cc_servicereqinstructionsvc = 
    Links a ServiceRequestInstruction to a service to be performed.
  

cc_servicereqinstructionsvc.ID = Internally managed primary key
cc_servicereqinstructionsvc.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_servicereqinstructionsvc.CreateTime = Timestamp when the object was created
cc_servicereqinstructionsvc.CreateUser = User who created the object
cc_servicereqinstructionsvc.Instruction = The instruction as part of which the linked service should be performed.
cc_servicereqinstructionsvc.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_servicereqinstructionsvc.Service = The service to be performed.
cc_servicereqinstructionsvc.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_servicereqinstructionsvc.UpdateTime = Timestamp when the object was last updated
cc_servicereqinstructionsvc.UpdateUser = User who last updated the object

cc_servreqmsg = Messages for Service Requests

cc_servreqmsg.ID = Internally managed primary key
cc_servreqmsg.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_servreqmsg.Author = The author of the message
cc_servreqmsg.Body = The body of the service request message
cc_servreqmsg.CreateTime = Timestamp when the object was created
cc_servreqmsg.CreateUser = User who created the object
cc_servreqmsg.LockingColumn = Meaningless column for locking
cc_servreqmsg.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_servreqmsg.SendDate = The date the message was sent
cc_servreqmsg.SentFromPortal = If the message is sent from an external portal
cc_servreqmsg.ServiceRequest = The Service Request related to this message
cc_servreqmsg.Title = The title of the service request message
cc_servreqmsg.Type = The message type
cc_servreqmsg.UpdateTime = Timestamp when the object was last updated
cc_servreqmsg.UpdateUser = User who last updated the object

cc_servreqmetric = Metrics related to a service request

cc_servreqmetric.ID = Internally managed primary key
cc_servreqmetric.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_servreqmetric.CreateTime = Timestamp when the object was created
cc_servreqmetric.CreateUser = User who created the object
cc_servreqmetric.DecimalRedValue = Decimal field to store the red value.
cc_servreqmetric.DecimalTargetValue = Decimal field to store the target value.
cc_servreqmetric.DecimalYellowValue = Decimal field to store the yellow value.
cc_servreqmetric.MetricUnit = Units for this type of metric.
cc_servreqmetric.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_servreqmetric.ReachRedTime = Time the red limit was or will be reached
cc_servreqmetric.ReachYellowTime = Time the yellow limit was or will be reached.
cc_servreqmetric.ServiceRequest = Service Request to which this metric is related.
cc_servreqmetric.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_servreqmetric.UpdateTime = Timestamp when the object was last updated
cc_servreqmetric.UpdateUser = User who last updated the object
cc_servreqmetric.DecimalValue = Decimal field to store the value.
cc_servreqmetric.IntegerValue = Integer field to store the value.
cc_servreqmetric.MoneyValue = Money field to store the money value.
cc_servreqmetric.PercentValue = Percent field to store the value.
cc_servreqmetric.DaysDifferentFromExpected = Difference (in business days or hours) between the actual quote completion date and the expected quote completion date. Only filled out when service request is complete
cc_servreqmetric.Escalated = Indicates if this metric has been previously escalated
cc_servreqmetric.TimeSpentWorking = The aggregate time spent NOT in progress state Specialist Waiting
cc_servreqmetric.WaitingStartTime = The time the current waiting state was entered, null if not waiting
cc_servreqmetric.DaysDifferentFromExpected = Difference (in business days) between the actual service completion date and the expected service completion date. Only filled out when service request is complete
cc_servreqmetric.Escalated = Indicates if this metric has been previously escalated
cc_servreqmetric.Escalated = Indicates if this metric has been previously escalated
cc_servreqmetric.IntegerValue = Integer field to store the value.
cc_servreqmetric.IsOpen = The value of an open time based metric is now - start time, once closed it has a fixed integer value
cc_servreqmetric.Skipped = True if the metric is closed because the normal closing event was skipped.
cc_servreqmetric.StartTime = Starting time of the metric.

cc_servicerequestmetriclimit = 

cc_servicerequestmetriclimit.ID = Internally managed primary key
cc_servicerequestmetriclimit.CreateTime = Timestamp when the object was created
cc_servicerequestmetriclimit.CreateUser = User who created the object
cc_servicerequestmetriclimit.Currency = Currency for this limit, for non-money based limits this is always the default currency
cc_servicerequestmetriclimit.CustomerServiceTier = Customer service tier that this limit applies to, null if it applies to any service tier
cc_servicerequestmetriclimit.DecimalRedValue = Decimal field to store the red value.
cc_servicerequestmetriclimit.DecimalTargetValue = Decimal field to store the target value.
cc_servicerequestmetriclimit.DecimalYellowValue = Decimal field to store the yellow value.
cc_servicerequestmetriclimit.LimitType = Calculation type for this limit
cc_servicerequestmetriclimit.MetricUnit = Units for this type of metric limit.
cc_servicerequestmetriclimit.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_servicerequestmetriclimit.ServiceCategory = Category of service that this limit applies to, null if it applies to any category
cc_servicerequestmetriclimit.ServiceRequestMetricType = Type of service request metric to which this limit applies
cc_servicerequestmetriclimit.ServiceRequestTier = Service request tier to which this limit applies, or null if it applies to any tier
cc_servicerequestmetriclimit.SpecialistService = Fully-specified service that this limit applies to, null if it applies to any service
cc_servicerequestmetriclimit.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_servicerequestmetriclimit.UpdateTime = Timestamp when the object was last updated
cc_servicerequestmetriclimit.UpdateUser = User who last updated the object

cc_origservreq = null

cc_origservreq.ID = Internally managed primary key
cc_origservreq.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_origservreq.ForeignEntity = 
cc_origservreq.Owner = 
cc_origservreq.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_servicerequeststatement = An estimation (such as a quote or invoice) received from a specialist and related to a Service Request.

cc_servicerequeststatement.ID = Internally managed primary key
cc_servicerequeststatement.ApprovalDate = The time at which this statement was approved.
cc_servicerequeststatement.ApprovedBy = The user who approved this statement.
cc_servicerequeststatement.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_servicerequeststatement.CreateTime = Timestamp when the object was created
cc_servicerequeststatement.CreateUser = User who created the object
cc_servicerequeststatement.DeclinedReason = The reason the statement was declined. When the state changes this value is recalculated, as the previous value not longer makes sense.
cc_servicerequeststatement.Description = The description for the statement
cc_servicerequeststatement.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_servicerequeststatement.ReferenceNumber = A string identifier assigned to this ServiceRequestStatement by the specialist. The value of this field may only be meaningful to the specialist.
cc_servicerequeststatement.ServiceRequest = Service Request the statement is linked to.
cc_servicerequeststatement.Source = The external system from which this data comes 
cc_servicerequeststatement.StatementCreationTime = The time at which this statement was created.
cc_servicerequeststatement.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_servicerequeststatement.UpdateTime = Timestamp when the object was last updated
cc_servicerequeststatement.UpdateUser = User who last updated the object
cc_servicerequeststatement.LineItems = 
cc_servicerequeststatement.StatementDocumentLinks = The join entity that holds the information for documents associated with this statement
cc_servicerequeststatement.Check = The check that paid this invoice.
cc_servicerequeststatement.PaidBy = The user who paid this invoice.
cc_servicerequeststatement.PaymentDate = The time at which this invoice was paid.
cc_servicerequeststatement.Status = The current invoice status
cc_servicerequeststatement.ExpectedDaysToPerformService = Number of business days the specialist expects it will take to perform the service.

cc_servicereqstatementdoclink = Associates a Service Request Statement to a Document Link.

cc_servicereqstatementdoclink.ID = Internally managed primary key
cc_servicereqstatementdoclink.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_servicereqstatementdoclink.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_servicereqstatementdoclink.ServiceRequestDocumentLink = Service Request Document Link the statement is linked to.
cc_servicereqstatementdoclink.ServiceRequestStatement = The associated statement for the document link.

cc_servicereqstatementline = A line item from a ServiceRequestStatement

cc_servicereqstatementline.ID = Internally managed primary key
cc_servicereqstatementline.Amount = 
cc_servicereqstatementline.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_servicereqstatementline.Category = 
cc_servicereqstatementline.CreateTime = Timestamp when the object was created
cc_servicereqstatementline.CreateUser = User who created the object
cc_servicereqstatementline.Description = 
cc_servicereqstatementline.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_servicereqstatementline.ServiceRequestStatement = 
cc_servicereqstatementline.UpdateTime = Timestamp when the object was last updated
cc_servicereqstatementline.UpdateUser = User who last updated the object

cc_servreqactinst = null

cc_servreqactinst.ID = Internally managed primary key
cc_servreqactinst.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_servreqactinst.ForeignEntity = 
cc_servreqactinst.Owner = 
cc_servreqactinst.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_servreqltstqte = null

cc_servreqltstqte.ID = Internally managed primary key
cc_servreqltstqte.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_servreqltstqte.ForeignEntity = 
cc_servreqltstqte.Owner = 
cc_servreqltstqte.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_settlement = Describes a settlement with the employee.

cc_settlement.ID = Internally managed primary key
cc_settlement.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_settlement.BenefitType = Type of lost wages benefit.
cc_settlement.CreateTime = Timestamp when the object was created
cc_settlement.CreateUser = User who created the object
cc_settlement.Description = Additional information.
cc_settlement.Exposure = The related exposure.
cc_settlement.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_settlement.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_settlement.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_settlement.SettleAmount = Settlement amount.
cc_settlement.SettleDate = Date of settlement.
cc_settlement.SettleMethod = Method of settlement.
cc_settlement.UpdateTime = Timestamp when the object was last updated
cc_settlement.UpdateUser = User who last updated the object

cc_specialhandling = 
        This is the parent entity for defining special handling of Claims. There may be different special handling needs for claims related to a particular Account, Brokerage or Affinity Program. All the special handling instructions and triggers are hung off the SpecialHandling entity and then different subtypes of this entity point to the owning Account, Brokerage or Program.
    

cc_specialhandling.ID = Internally managed primary key
cc_specialhandling.CreateTime = Timestamp when the object was created
cc_specialhandling.CreateUser = User who created the object
cc_specialhandling.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_specialhandling.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_specialhandling.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_specialhandling.UpdateTime = Timestamp when the object was last updated
cc_specialhandling.UpdateUser = User who last updated the object
cc_specialhandling.AutomatedHandlers = An associative array of AutomatedHandlers, segmented by the AutomatedHandler subtype (i.e., AutomatedActivityHandler and AutomatedNotificationHandler
cc_specialhandling.OtherInstructions = Related other instructions
cc_specialhandling.Account = The Account that owns this instance of Special Handling.  Any Claims created for Policies associated with this Account will have these special handling instructions and triggers applied.
cc_specialhandling.CustomerServiceTier = 

cc_shemailaddress = An email address associated with a special handling notification rule.

cc_shemailaddress.ID = Internally managed primary key
cc_shemailaddress.AutomatedNotificationHandler = 
cc_shemailaddress.CreateTime = Timestamp when the object was created
cc_shemailaddress.CreateUser = User who created the object
cc_shemailaddress.EmailAddress = An email address included in a special handling notification rule.
cc_shemailaddress.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_shemailaddress.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_shemailaddress.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_shemailaddress.UpdateTime = Timestamp when the object was last updated
cc_shemailaddress.UpdateUser = User who last updated the object

cc_shfinancialstate = 
    A set of previously calculated financial amounts for use by Automated Handling triggers that fire when a financial threshold is reached.
    A previously saved value is compared against the triggering threshold amount in order to avoid firing the trigger repeatedly once
      the threshold has been reached.
  

cc_shfinancialstate.ID = Internally managed primary key
cc_shfinancialstate.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_shfinancialstate.Claim = Claim that owns this SpecialHandlingFinancialState object.
cc_shfinancialstate.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_shfinancialstate.PreviousAmount = 

cc_shpreviousvalue =  thresholds and should not be used beyond that context. This entity
    stores the calculated amount for a claim used during a previous comparison against a financial threshold amount in order to avoid firing the trigger repeatedly once
      the threshold has been reachedr.
  

cc_shpreviousvalue.ID = Internally managed primary key
cc_shpreviousvalue.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_shpreviousvalue.FinancialThreshold = 
cc_shpreviousvalue.PreviousAmount = Previous value used by special handling triggers
cc_shpreviousvalue.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_shpreviousvalue.SpecialHandlingFinancialState = The special handling financial state entity that this is associated with.

cc_specialistservice = A node in the specialist services tree.

cc_specialistservice.ID = Internally managed primary key
cc_specialistservice.Active = Indicates whether the service should be used for new service requests.
cc_specialistservice.Code = Unique string identifying this service.
cc_specialistservice.CreateTime = Timestamp when the object was created
cc_specialistservice.CreateUser = User who created the object
cc_specialistservice.Description = Description of the service.
cc_specialistservice.Name = Name of the service.
cc_specialistservice.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_specialistservice.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_specialistservice.UpdateTime = Timestamp when the object was last updated
cc_specialistservice.UpdateUser = User who last updated the object
cc_specialistservice.ChildSpecialistServiceParents = Array of SpecialistServiceParents corresponding to SpecialistServices for which this is the Parent.
cc_specialistservice.CompatibleIncidentTypes = The SpecialistServiceCompatibleIncidentTypes indicating the Incident types with which this service is compatible.
cc_specialistservice.CompatibleKinds = The SpecialistServiceCompatibleServiceRequestKinds indicating the Kinds with which this service is compatible.
cc_specialistservice.Description_L10N_ARRAY = 
cc_specialistservice.Name_L10N_ARRAY = 

cc_specialistsvccompinctype = 
    The presence of an instance of this entity indicates that the related SpecialistService can be used
    with Incidents extending from the specified Incident subclass. In the base configuration, instances
    of this entity must only be linked to root SpecialistServices.
  

cc_specialistsvccompinctype.ID = Internally managed primary key
cc_specialistsvccompinctype.IncidentType = The subclass of Incident with which the related SpecialistService is compatible.
cc_specialistsvccompinctype.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_specialistsvccompinctype.Service = The service that is compatible with the Incident type.

cc_specsvccompsvcreqkind = 
    The presence of an instance of this entity indicates that the related SpecialistService can be used
    on Service Requests with the specified Kind. In the base configuration, instances of this entity
    must only be linked to leaf SpecialistServices.
  

cc_specsvccompsvcreqkind.ID = Internally managed primary key
cc_specsvccompsvcreqkind.Kind = The Kind with which the related SpecialistService is compatible.
cc_specsvccompsvcreqkind.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_specsvccompsvcreqkind.Service = The service that is compatible with the Kind.

cc_spclstsvcparent = null

cc_spclstsvcparent.ID = Internally managed primary key
cc_spclstsvcparent.ForeignEntity = 
cc_spclstsvcparent.Owner = 
cc_spclstsvcparent.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_specsvcdesc_l10n = null

cc_specsvcdesc_l10n.ID = Internally managed primary key
cc_specsvcdesc_l10n.Language = 
cc_specsvcdesc_l10n.Owner = 
cc_specsvcdesc_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_specsvcdesc_l10n.Value = 

cc_specsvcname_l10n = null

cc_specsvcname_l10n.ID = Internally managed primary key
cc_specsvcname_l10n.Language = 
cc_specsvcname_l10n.Owner = 
cc_specsvcname_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_specsvcname_l10n.Value = 

cc_standardworkqueue = Standard WorkItem implementation. This should work for most work queues.

cc_standardworkqueue.ID = Internally managed primary key
cc_standardworkqueue.Attempts = 
cc_standardworkqueue.AvailableSince = The time after which the work item can be tried. Must be null on failed work items
cc_standardworkqueue.CheckedOutBy = 
cc_standardworkqueue.CreationTime = 
cc_standardworkqueue.Exception = Stack trace of the exception
cc_standardworkqueue.LastUpdateTime = 
cc_standardworkqueue.Priority = 
cc_standardworkqueue.ProcessHistoryID = The writer batch job that created this workitem (ProcessHistory).
cc_standardworkqueue.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_standardworkqueue.QueueType = The queue.
cc_standardworkqueue.Status = Status of this workitem.
cc_standardworkqueue.Target = A handle, generally the ID, to the target.

cc_statcode = 
A statistical code or statistical line associated with a worker's comp policy.
    

cc_statcode.ID = Internally managed primary key
cc_statcode.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_statcode.BuildingNumber = Building number with which this stat line is associated.
cc_statcode.ClassCode = Workers comp class code with which this stat line is associated.
cc_statcode.CreateTime = Timestamp when the object was created
cc_statcode.CreateUser = User who created the object
cc_statcode.InsuranceLine = Insurance line (also known as major line or bureau).
cc_statcode.InsuranceSubLine = Insurance sub-line (also known as risk group or risk unit).
cc_statcode.LineNumber = Statistical data line number.
cc_statcode.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_statcode.LocationNumber = Location number with which this stat line is associated.
cc_statcode.MajorPeril = Major peril.
cc_statcode.Notes = Description of the endorsement.
cc_statcode.Policy = Policy with which the statistical code is associated.
cc_statcode.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_statcode.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_statcode.State = State in which the statistical code applies.
cc_statcode.UpdateTime = Timestamp when the object was last updated
cc_statcode.UpdateUser = User who last updated the object
cc_statcode.VehicleNumber = Vehicle number with which this stat line is associated.

cc_statuelimitationsline = An applicable status of limiations in regards to subrogation

cc_statuelimitationsline.ID = Internally managed primary key
cc_statuelimitationsline.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_statuelimitationsline.CreateTime = Timestamp when the object was created
cc_statuelimitationsline.CreateUser = User who created the object
cc_statuelimitationsline.Description = Additional Description of statute of Limitation
cc_statuelimitationsline.JurisdictionState = Jurisdiction State. The Jurisdiction must be associated with JurisdictionType.TC_INSURANCE.
cc_statuelimitationsline.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_statuelimitationsline.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_statuelimitationsline.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_statuelimitationsline.StatuteDate = Last Date prior before claim is expired due to statute of limitations
cc_statuelimitationsline.StatuteLimitType = The type of statute of limitations - e.g. Medical, Indemnity, etc.
cc_statuelimitationsline.SubrogationSummary = Related Subrogation Summary
cc_statuelimitationsline.UpdateTime = Timestamp when the object was last updated
cc_statuelimitationsline.UpdateUser = User who last updated the object

cc_subquestion = A piece of text to be displayed in a bulleted list bellow a question.

cc_subquestion.ID = Internally managed primary key
cc_subquestion.CreateTime = Timestamp when the object was created
cc_subquestion.CreateUser = User who created the object
cc_subquestion.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_subquestion.Priority = Sort order priority
cc_subquestion.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_subquestion.Question = 
cc_subquestion.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_subquestion.Text = 
cc_subquestion.UpdateTime = Timestamp when the object was last updated
cc_subquestion.UpdateUser = User who last updated the object
cc_subquestion.Text_L10N_ARRAY = 

cc_sbqsntext_l10n = null

cc_sbqsntext_l10n.ID = Internally managed primary key
cc_sbqsntext_l10n.Language = 
cc_sbqsntext_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_sbqsntext_l10n.Owner = 
cc_sbqsntext_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_sbqsntext_l10n.Value = 

cc_SubWorkflows = null

cc_SubWorkflows.ID = Internally managed primary key
cc_SubWorkflows.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_SubWorkflows.ForeignEntity = 
cc_SubWorkflows.Owner = 
cc_SubWorkflows.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_subroadverseparty = A subrogations Adverse Parties

cc_subroadverseparty.ID = Internally managed primary key
cc_subroadverseparty.AdverseParty = The Adverse Party related to the Subrogation
cc_subroadverseparty.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_subroadverseparty.ClaimNumber = Claim number at insurer.
cc_subroadverseparty.Classification = Classification of the Adverse Party
cc_subroadverseparty.CreateTime = Timestamp when the object was created
cc_subroadverseparty.CreateUser = User who created the object
cc_subroadverseparty.ExpectedRecovery = Expected recovery percentage from this Contact.
cc_subroadverseparty.Fault = Contact's probable percentage of fault.
cc_subroadverseparty.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_subroadverseparty.MainContactType = Relationship of the main contact to the Adverse Party
cc_subroadverseparty.NoteReceived = Date the prommisory note was received
cc_subroadverseparty.NoteSent = Date the prommisory note was sent
cc_subroadverseparty.PolicyNumber = Policy number at insurer.
cc_subroadverseparty.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_subroadverseparty.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_subroadverseparty.ScheduleRecovery = If the adverse party has agreed to make payments aka Subro Recovery
cc_subroadverseparty.ScheduleRecoveryType = Type of scheduled recovery such as Promissory Note
cc_subroadverseparty.Strategy = Strategy for the Adverse Party
cc_subroadverseparty.SubrogationSummary = Related Subrogation Summary
cc_subroadverseparty.SubroGovernmentInvolved = For Subrogation - Government entity involved as an Adverse Party
cc_subroadverseparty.UpdateTime = Timestamp when the object was last updated
cc_subroadverseparty.UpdateUser = User who last updated the object
cc_subroadverseparty.ScheduledPayments = A list of applicable PaymentPlans for this claim.

cc_subroadversepartyoverride = Join table between Subrogation and SubroAdverseParty to allow fault for the same party to vary across different exposures.

cc_subroadversepartyoverride.ID = Internally managed primary key
cc_subroadversepartyoverride.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_subroadversepartyoverride.CreateTime = Timestamp when the object was created
cc_subroadversepartyoverride.CreateUser = User who created the object
cc_subroadversepartyoverride.ExpectedRecovery = Expected recovery percentage from this Contact.
cc_subroadversepartyoverride.Fault = Contact's probable percentage of fault.
cc_subroadversepartyoverride.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_subroadversepartyoverride.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_subroadversepartyoverride.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_subroadversepartyoverride.SubroAdverseParty = The party whose fault and/or expected recovery are overridden.
cc_subroadversepartyoverride.Subrogation = The subrogation with a fault and/or expected recovery different from the default.
cc_subroadversepartyoverride.UpdateTime = Timestamp when the object was last updated
cc_subroadversepartyoverride.UpdateUser = User who last updated the object

cc_subropaymentschedule = A subrogation payment schedule

cc_subropaymentschedule.ID = Internally managed primary key
cc_subropaymentschedule.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_subropaymentschedule.CreateTime = Timestamp when the object was created
cc_subropaymentschedule.CreateUser = User who created the object
cc_subropaymentschedule.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_subropaymentschedule.PaymentExpDate = Date on which payment against prommisory note is expected
cc_subropaymentschedule.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_subropaymentschedule.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_subropaymentschedule.SubroAdverseParty = Related SubroPaymentPlan
cc_subropaymentschedule.SubroInstallmentAmount = Total Amount of this Installment
cc_subropaymentschedule.UpdateTime = Timestamp when the object was last updated
cc_subropaymentschedule.UpdateUser = User who last updated the object

cc_subrogation = Represents the investigation that a user must perform to determine whether subrogation should be pursued on the associated Exposure or Claim. 

cc_subrogation.ID = Internally managed primary key
cc_subrogation.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_subrogation.AssignedByUser = User who assigned this entity.
cc_subrogation.AssignedGroup = Group to which this entity is assigned; null if none assigned
cc_subrogation.AssignedQueue = Either the Queue to which this entity is assigned (if AssignmentStatus is 'assigned'), the Queue to which the system suggests assignment (if AssignmentStatus is 'manual'), or null if none assigned. Only one of AssignedUserID or AssignedQueueID should be non null.
cc_subrogation.AssignedUser = Either the User to which this entity is assigned (if AssignmentStatus is 'assigned'), the User to which the system suggests assignment (if AssignmentStatus is 'manual'), or null if none assigned. Only one of AssignedUserID or AssignedQueueID should be non null.
cc_subrogation.AssignmentDate = Time when entity last assigned
cc_subrogation.AssignmentStatus = Typelist describing assignment status.
cc_subrogation.CloseComment = Comment upon close of Subrogation opportunity
cc_subrogation.CloseDate = Date and time when this entity was closed. (Not applicable to all assignable entities)
cc_subrogation.CreateTime = Timestamp when the object was created
cc_subrogation.CreateUser = User who created the object
cc_subrogation.Exposure = The associated Exposure. If null, this subrogation is a claim-level subrogation.
cc_subrogation.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_subrogation.Outcome = SubroClosedOutcome
cc_subrogation.PreviousGroup = Group to which this entity was previously assigned.
cc_subrogation.PreviousQueue = Queue to which this entity was previously assigned.
cc_subrogation.PreviousUser = User to which this entity was previously assigned.
cc_subrogation.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_subrogation.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_subrogation.Status = Status of this subrogation
cc_subrogation.SubrogationSummary = Associated SubrogationSummary
cc_subrogation.UpdateTime = Timestamp when the object was last updated
cc_subrogation.UpdateUser = User who last updated the object
cc_subrogation.SubroAdversePartyOverrides = 

cc_subrogationsummary = Subrogation information related to a claim

cc_subrogationsummary.ID = Internally managed primary key
cc_subrogationsummary.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_subrogationsummary.CalculateOSRecReserve = Whether to automatically calculate OS Recovery Reserves
cc_subrogationsummary.Claim = Related Claim
cc_subrogationsummary.CreateTime = Timestamp when the object was created
cc_subrogationsummary.CreateUser = User who created the object
cc_subrogationsummary.EscalateSubro = Escalate toSubro
cc_subrogationsummary.ExtOwned = To indicate Subro for a claim as owned by an external owner
cc_subrogationsummary.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_subrogationsummary.ProrateDeductible = Indicates whether deductible should be prorated
cc_subrogationsummary.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_subrogationsummary.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_subrogationsummary.SubroReferralComment = A Comment from the referer to the referee
cc_subrogationsummary.SubroReferralDate = Date when when referral made to Subrogation
cc_subrogationsummary.UpdateTime = Timestamp when the object was last updated
cc_subrogationsummary.UpdateUser = User who last updated the object
cc_subrogationsummary.StatuteLine = A list of applicable Statute of Limitations for this claim.
cc_subrogationsummary.SubroAdverseParties = A list of applicable Adverse Parties related to for this claim.
cc_subrogationsummary.Subrogations = The subrogations associated with this summary

cc_sumexprfragjoin = null

cc_sumexprfragjoin.ID = Internally managed primary key
cc_sumexprfragjoin.NumericTransformExpression = 
cc_sumexprfragjoin.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_sumexprfragjoin.SumExpressionFragment = 

cc_supervisedgroup = Contains a group that is supervised by the given user.

cc_supervisedgroup.ID = Internally managed primary key
cc_supervisedgroup.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_supervisedgroup.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_supervisedgroup.SupervisedGroup = Group supervised by the owner of the cache
cc_supervisedgroup.SuperviseeCache = Backpointer to the cache

cc_superviseduser = Contains a user that is supervised by the given user.

cc_superviseduser.ID = Internally managed primary key
cc_superviseduser.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_superviseduser.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_superviseduser.SupervisedUser = User supervised by the owner of the cache
cc_superviseduser.SuperviseeCache = Backpointer to the cache

cc_superviseescache = Contains caches of the supervised users and groups for the given user.

cc_superviseescache.ID = Internally managed primary key
cc_superviseescache.CreateTime = Timestamp when the object was created
cc_superviseescache.CreateUser = User who created the object
cc_superviseescache.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_superviseescache.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_superviseescache.SupervisedGroupFP = Fingerprint of the currently cached supervised groups
cc_superviseescache.SupervisedUserFP = Fingerprint of the currently cached supervised users
cc_superviseescache.UpdateTime = Timestamp when the object was last updated
cc_superviseescache.UpdateUser = User who last updated the object
cc_superviseescache.User = Owner of this cache
cc_superviseescache.SupervisedGroups = Cache of supervised groups
cc_superviseescache.SupervisedUsers = Cache of supervised users

cc_systemparameter = Name/value pairs for system parameters.

cc_systemparameter.Name = Property name.
cc_systemparameter.Value = Property value.

cc_taccount = TAccounts are used in ClaimCenter to provide a rolled-up view of all financials transactions
    entered into the system.  Each Reserve Line (unique combination of Claim, Exposure, Cost Type and Cost Category) has
    22 distinct TAccounts that together represent every possible life cycle state for each of the four transaction subtypes
    (Payment, Reserve, Recovery and Recovery Reserve).  The Taccounts occur in pairs; a debit account (example: ReservesXX,
    which holds the amount of a reserve) and a matching credit account (example: Cash Out). Every life cycle state transition
    for a transaction (e.g., from pending-approval to awaiting-submission) affects one debit and one credit T-account equally
    (example: a payment debits ReservesXX and credits Cash Out).  ClaimCenter provides useful calculated values by combining
    the balances of various TAccounts as appropriate.
  <br><span class="warning">This entity is overwritten by the application during staging.</span>

cc_taccount.ID = Internally managed primary key
cc_taccount.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_taccount.CreateTime = Timestamp when the object was created
cc_taccount.CreateUser = User who created the object
cc_taccount.CreditBalance = The balance of the claim currency credit side of this t-account's ledger.
cc_taccount.CreditReservingBalance = The balance of the reserving currency credit side of this t-account's ledger.
cc_taccount.CreditRptBalance = The balance of the reporting currency credit side of this t-account's ledger.
cc_taccount.DebitBalance = The balance of the claim currency debit side of this t-account's ledger.
cc_taccount.DebitReservingBalance = The balance of the reserving currency debit side of this t-account's ledger.
cc_taccount.DebitRptBalance = The balance of the reporting currency debit side of this t-account's ledger.
cc_taccount.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_taccount.NormalBalance = Indicates whether this t-account's normal balance is 'credit normal' or 'debit normal'.
cc_taccount.NumContributingTxns = Stores a denormalized counter of the number of financial transactions currently contributing to this taccount's net balance
cc_taccount.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_taccount.ReserveLine = FK to the ReserveLine that this TAccount is associated with.
cc_taccount.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_taccount.TAccountType = The type of this t-account, i.e., the transaction subtype(s) and lifecycle state that it reflects.
cc_taccount.UpdateTime = Timestamp when the object was last updated
cc_taccount.UpdateUser = User who last updated the object
cc_taccount.Entries = Set of TAccountLineItems that contribute to this T-Account.

cc_taccountlineitem = The entry of a specific amount of money, either crediting or debiting one T-account. A TaccountTransaction will contain a pair of balancing TAccountLineItems - a debit to one
    T-account and an equal credit to another.
  <br><span class="warning">This entity is overwritten by the application during staging.</span>

cc_taccountlineitem.ID = Internally managed primary key
cc_taccountlineitem.Amount = The amount of money (in the claim currency) in this line item that was either credited or debited against a TAccount.
cc_taccountlineitem.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_taccountlineitem.CreateTime = Timestamp when the object was created
cc_taccountlineitem.CreateUser = User who created the object
cc_taccountlineitem.CreditingTransaction = The TAccountTransaction for which this lineitem credits a t-account.
cc_taccountlineitem.DebitingTransaction = The TAccountTransaction for which this lineitem debits a t-account.
cc_taccountlineitem.DenormTransaction = Denormalized FK to TAccountTransaction table in order to speed up certain queries.  If both CreditingTransactionID and DebitingTransactionID are not null, then this field is NULL, otherwise this field will have same value as the non-null FK.  This allows us to query against this field only when looking for TAccountTransactions that are currently contributing to a TAccount.
cc_taccountlineitem.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_taccountlineitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_taccountlineitem.ReservingAmount = The amount of money (in the reserving currency) in this line item that was either credited or debited against a TAccount.
cc_taccountlineitem.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_taccountlineitem.RptAmount = The amount of money (in the reporting currency) in this line item that was either credited or debited against a TAccount.
cc_taccountlineitem.TAccount = 
cc_taccountlineitem.UpdateTime = Timestamp when the object was last updated
cc_taccountlineitem.UpdateUser = User who last updated the object

cc_taccounttransaction = Contains the TAccountLineItems that change a pair of T-accounts to account for a transaction as it moves
    through its LifeCycle States. For example, when a reserve becomes committed, it is debited (removed from) Pending Approval ReservesXX
    T-Account and added (credited) to the ReservesXX T-Account.  Each TAccountTransaction has a link to its succeeding TAccountTransaction,
    thus providing a history of the life of the associated transaction.
  <br><span class="warning">This entity is overwritten by the application during staging.</span>

cc_taccounttransaction.ID = Internally managed primary key
cc_taccounttransaction.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_taccounttransaction.Comments = Comments about the transaction, such as the LifeCycleState transition for which it was created.
cc_taccounttransaction.CreateTime = Timestamp when the object was created
cc_taccounttransaction.CreateUser = User who created the object
cc_taccounttransaction.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_taccounttransaction.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_taccounttransaction.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_taccounttransaction.Transaction = The higher-level financial transaction for which this t-account transaction was created.
cc_taccounttransaction.UpdateTime = Timestamp when the object was last updated
cc_taccounttransaction.UpdateUser = User who last updated the object
cc_taccounttransaction.CreditingLineItems = Set of TAccountLineItems that are used by this TAccountTransaction to credit a TAccount.
cc_taccounttransaction.DebitingLineItems = Set of TAccountLineItems that are used by this TAccountTransaction to debit a TAccount.

cc_tabledatadist = Stores data distribution info for each table in the database.

cc_tabledatadist.ID = Internally managed primary key
cc_tabledatadist.AdminTable = True if admin table
cc_tabledatadist.DatabaseDataDist = DatabaseDataDist for this object.
cc_tabledatadist.EntityName = Name of entity.  Can be subtype entity.
cc_tabledatadist.NumLoadedThruStagingTables = Count of # of rows loaded through the staging tables. (null if non-loadable)
cc_tabledatadist.NumRetiredRows = Count of # of retired rows. (null if non-retireable)
cc_tabledatadist.NumRows = Count of # of rows.
cc_tabledatadist.NumUpdatedRows = Count of # of updated rows.
cc_tabledatadist.NumUpdates = Count of # of total updates.
cc_tabledatadist.PlatformTable = True if platform table
cc_tabledatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_tabledatadist.StagingTableDist = True if staging table distribution
cc_tabledatadist.TableName = Name of table.
cc_tabledatadist.TypeListTableDist = True if type list table distribution
cc_tabledatadist.ArrayDataDists = Collection of ArrayDataDists linked to this TableDataDist.
cc_tabledatadist.AssignableForKeyDataDists = Collection of AssignableForKeyDataDists linked to this TableDataDist.
cc_tabledatadist.BeanVersionDataDists = Collection of BeanVersionDataDists linked to this TableDataDist.
cc_tabledatadist.BlobColDataDists = Collection of BlobColDataDists linked to this TableDataDist.
cc_tabledatadist.BooleanColDataDists = Collection of BooleanColDataDists linked to this TableDataDist.
cc_tabledatadist.ClobColDataDists = Collection of ClobColDataDists linked to this TableDataDist.
cc_tabledatadist.CustomDataDistRequests = Collection of CustomDataDistRequests linked to this TableDataDist.
cc_tabledatadist.DateAnalysisDataDists = Collection of DateAnalysisDataDists linked to this TableDataDist.
cc_tabledatadist.DateBinnedDataDists = Collection of DateBinnedDataDists linked to this TableDataDist.
cc_tabledatadist.DateSpanDataDists = Collection of min and max dates for all date columns in this table
cc_tabledatadist.ForKeyDataDists = Collection of ForKeyDataDists linked to this TableDataDist.
cc_tabledatadist.GenericGroupDataDists = Collection of GenericGroupDataDists linked to this TableDataDist.
cc_tabledatadist.HourAnalysisDataDists = Collection of HourAnalysisDataDists linked to this TableDataDist.
cc_tabledatadist.NullableColumnDataDists = Collection of NullableColumnDataDists linked to this TableDataDist.
cc_tabledatadist.TypeKeyDataDists = Collection of TypeKeyDataDists linked to this TableDataDist.

cc_tableparent = null

cc_tableparent.ID = Internally managed primary key
cc_tableparent.ForeignEntity = 
cc_tableparent.Owner = 
cc_tableparent.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_tableregistry = Stores metadata for each table in the database.

cc_tableregistry.IdName = Name of the unique id.
cc_tableregistry.TableName = Name of the table.

cc_tableupdatestats = Stores update statistics info for each table in the database.

cc_tableupdatestats.ID = Internally managed primary key
cc_tableupdatestats.DatabaseUpdateStats = DatabaseUpdateStats for this object.
cc_tableupdatestats.EndTime = End time of update statistics process for this table.
cc_tableupdatestats.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_tableupdatestats.StartTime = Start time of update statistics process for this table.
cc_tableupdatestats.TableName = Name of table.
cc_tableupdatestats.TableUpdateStatsStatements = Collection of TableUpdateStatsStatements linked to this TableUpdateStats.

cc_tableupdatestatsstatement = Database parameter row.

cc_tableupdatestatsstatement.ID = Internally managed primary key
cc_tableupdatestatsstatement.ObjectName = Object Name
cc_tableupdatestatsstatement.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_tableupdatestatsstatement.TableUpdateStats = Parent
cc_tableupdatestatsstatement.UpdateStatsStatement = Update Statistics Statement
cc_tableupdatestatsstatement.UpdateStatsType = Type of process running the operation.

cc_taccttxnhistory = null

cc_taccttxnhistory.ID = Internally managed primary key
cc_taccttxnhistory.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_taccttxnhistory.ForeignEntity = 
cc_taccttxnhistory.Owner = 
cc_taccttxnhistory.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_tmpagglimitora = Tmp table for populating the aggregate limit denorm table, agglimitrpt.

cc_tmpagglimitora.AggLimitCalcCriteria = Exclusions for limit used calculations
cc_tmpagglimitora.CoverageLineID = A foreign key to the CoverageLine.
cc_tmpagglimitora.LimitType = Aggregate limit type.
cc_tmpagglimitora.PolicyPeriodID = A foreign key to the PolicyPeriod.
cc_tmpagglimitora.ValueType = Aggregate type: limit or deductible.

cc_tmpagglimitrpt = Tmp table for populating the aggregate limit denorm table, agglimitrpt.

cc_tmpagglimitrpt.AggLimitCalcCriteria = Exclusions for limit used calculations
cc_tmpagglimitrpt.CoverageLineID = A foreign key to the CoverageLine.
cc_tmpagglimitrpt.LimitType = Aggregate limit type.
cc_tmpagglimitrpt.PolicyPeriodID = A foreign key to the PolicyPeriod.
cc_tmpagglimitrpt.TmpID = The id of the agglimitrpt.
cc_tmpagglimitrpt.ValueType = Aggregate type: limit or deductible.

cc_tmpbiiteminfo = Temp table for upgrade to BulkInvoiceItemInfo.

cc_tmpbiiteminfo.ID = Internally managed primary key
cc_tmpbiiteminfo.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_tmpbiiteminfo.TmpClaimID = Temp BulkInvoiceItemInfo ClaimID Total Amount.

cc_tmpbulkinvoicesums = Temp table for upgrade to bulk invoices.

cc_tmpbulkinvoicesums.ID = Internally managed primary key
cc_tmpbulkinvoicesums.ApprovedAmount = Temp BulkInvoice Approved Amount.
cc_tmpbulkinvoicesums.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_tmpbulkinvoicesums.TmpCurrency = Temp BulkInvoice Currency.
cc_tmpbulkinvoicesums.TotalAmount = Temp BulkInvoice Total Amount.

cc_tmpcheckrpt = temp table used for recalculating CheckRpt.GrossAmount values

cc_tmpcheckrpt.CheckID = The ID of the check to which the gross amount corresponds
cc_tmpcheckrpt.Currency = The transaction currency of the Check.
cc_tmpcheckrpt.GrossAmount = The gross amount of the check, in the check currency, to be updated to the CheckRpt table
cc_tmpcheckrpt.GrossClaimAmount = The gross amount of the check, in the claim currency, to be updated to the CheckRpt table
cc_tmpcheckrpt.GrossReservingAmount = The gross amount of the check, in the reserving currency, to be updated to the CheckRpt table
cc_tmpcheckrpt.ReservingCurrency = The reserving currency of the Check.

cc_tmpcheckrptcheckgroup = Temp table used for recalculating CheckRpt.GrossAmount values for checks that are part of a group (i.e., primary and secondary payee checks)

cc_tmpcheckrptcheckgroup.CheckGroupID = The ID of the CheckGroup to which the aggregates correspond
cc_tmpcheckrptcheckgroup.Currency = The transaction currency of the checks in this group.
cc_tmpcheckrptcheckgroup.ReservingCurrency = The reserving currency of the checks in this group.
cc_tmpcheckrptcheckgroup.TotalPayments = Total payments for the primary check of the CheckGroup in the Check Currency
cc_tmpcheckrptcheckgroup.TotalPaymentsClaimAmount = Total payments for the primary check of the CheckGroup in the Claim Currency
cc_tmpcheckrptcheckgroup.TotalPaymentsReservingAmount = Total payments for the primary check of the CheckGroup in the Reserving Currency

cc_tmpcheckrptignorepmts = Temp table used to store IDs of offsetting payments for voided/stopped checks, which should not be included in checkrpt grossamount values

cc_tmpcheckrptignorepmts.CheckID = 
cc_tmpcheckrptignorepmts.OffsetPaymentID = 

cc_tmpcheckset = Temp table for upgrade to 3.1 checksets.

cc_tmpcheckset.CheckID = Check id.
cc_tmpcheckset.TransactionSetID = TransactionSet id.

cc_tmpclaimaccess = Tmp table that records information about users and groups that are allowed to access a claim during upgrade.

cc_tmpclaimaccess.Anyone = Whether this permission should be granted to everyone.  If true then GroupID, UserID, and SecurityZoneID should be null.
cc_tmpclaimaccess.ClaimID = A foreign key to the claim.
cc_tmpclaimaccess.GroupID = The permitted group.  Exactly one of GroupID, UserID, and SecurityZoneID should be non-null.
cc_tmpclaimaccess.Permission = The type of permission being granted.
cc_tmpclaimaccess.SecurityZoneID = The permitted security zone.  Exactly one of GroupID, UserID, and SecurityZoneID should be non-null.
cc_tmpclaimaccess.UserID = The permitted user.  Exactly one of GroupID, UserID, and SecurityZoneID should be non-null.

cc_tmpContactAddressLink = Temporary table for linking new addresses to their contacts.

cc_tmpContactAddressLink.ID = Internally managed primary key
cc_tmpContactAddressLink.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_tmpContactAddressLink.TempAddressID = Address to which this entry's contact links.

cc_tmpcoverageriskunitmap = temp map of coverage id to covered riskunit id for upgrade to 5.0.

cc_tmpcoverageriskunitmap.ID = Internally managed primary key
cc_tmpcoverageriskunitmap.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_tmpcoverageriskunitmap.RUID = The covered riskunit's id.

cc_tmpexptoincidentcopy = Temp table used to copy a variety of injury related fields from the cc_incident table to the cc_exposure table

cc_tmpexptoincidentcopy.DetailedInjuryTypeTmp = The DetailedInjuryType value to copy from cc_exposure to cc_incident
cc_tmpexptoincidentcopy.GeneralInjuryTypeTmp = The GeneralInjuryType value to copy from cc_exposure to cc_incident
cc_tmpexptoincidentcopy.ImpairmentTmp = The Impairment value to copy from cc_exposure to cc_incident
cc_tmpexptoincidentcopy.IncidentID = The ID of the incident to be updated by a join to this temp table
cc_tmpexptoincidentcopy.LostWagesTmp = The LostWages value to copy from cc_exposure to cc_incident
cc_tmpexptoincidentcopy.MedicaltrtmntTypeTmp = The MedicalTreatmentType value to copy from cc_exposure to cc_incident
cc_tmpexptoincidentcopy.SeverityTmp = The SeverityType value to copy from cc_exposure to cc_incident

cc_tmpexprptstaging = Temp table with subdef calcs (akin to FinancialsRptUpgrade table), used for populating the ExposureRpt table from the staging tables

cc_tmpexprptstaging.ClaimID = Claim ID
cc_tmpexprptstaging.ErdngUnappPmtsRprtng = All pending-approval eroding payments
cc_tmpexprptstaging.ErodingUnapprvdPmts = All pending-approval eroding payments
cc_tmpexprptstaging.ExposureID = Exposure id.
cc_tmpexprptstaging.FtrErodngPmtsRprtng = All FutureDated eroding payments
cc_tmpexprptstaging.FtrNonErodngPmtsRprtng = All FutureDated non-eroding payments
cc_tmpexprptstaging.FutureErodingPmts = All FutureDated eroding payments
cc_tmpexprptstaging.FutureNonErodingPmts = All FutureDated non-eroding payments
cc_tmpexprptstaging.TotalErodingPmts = All awaiting-submission and committed eroding payments
cc_tmpexprptstaging.TotalNonErodingPmts = All awaiting-submission and committed non-eroding payments
cc_tmpexprptstaging.TotalPayments = All (eroding and non-eroding) awaiting-submission and committed payments
cc_tmpexprptstaging.TotalPaymentsRprtng = All (eroding and non-eroding) awaiting-submission and committed payments
cc_tmpexprptstaging.TotalRecoveries = All committed recoveries
cc_tmpexprptstaging.TotalRecoveriesRprtng = All committed recoveries
cc_tmpexprptstaging.TotalRecoveryReserves = All committed recovery-reserves
cc_tmpexprptstaging.TotalRecReservesRprtng = All committed recovery-reserves
cc_tmpexprptstaging.TotalReserves = All awaiting-submission and commited reserves
cc_tmpexprptstaging.TotalReservesRprtng = All awaiting-submission and commited reserves
cc_tmpexprptstaging.TotlErdngPmtsRprtng = All awaiting-submission and committed eroding payments
cc_tmpexprptstaging.TotlNonErdngPmtsRprtng = All awaiting-submission and committed non-eroding payments

cc_tmpmixedcheckgroups = Temp table used to store IDs of CheckGroups that have a mixture of canceled (i.e., voided/stopped) and non-canceled checks.  This would only happen if one or more checks in the group were reissued

cc_tmpmixedcheckgroups.CheckGroupID = 
cc_tmpmixedcheckgroups.HasMixedChecks = 

cc_tmpnewtacctjointbl = table used to do a cartesian join to produce the 2 new taccounts for rejection of transactions in Nozomi

cc_tmpnewtacctjointbl.TAccountType = Either the new Recoveries or new CommittedErodingPmts TAccountType

cc_tmppipprimarydoctor = Temp table used to store the ids of the primary doctor roles to be copied to PIP injury incidents during the 4.0.x-5.0.x upgrade

cc_tmppipprimarydoctor.ClaimContactRoleID = The ID of the claim contact role to be copied
cc_tmppipprimarydoctor.IncidentID = The ID of the incident to which the copied claim contact role will refer

cc_tmprejtacctcontribtxns = Temp table for Athena to Nozomi upgrade to use for speeding up population of the tmptacctbalancecopy table.  Aggregate contributing transaction counts here.

cc_tmprejtacctcontribtxns.NumCreditingTxns = The number of transactions currently crediting this taccount
cc_tmprejtacctcontribtxns.NumDebitingTxns = The number of transactions currently debiting this taccount
cc_tmprejtacctcontribtxns.TAccountID = The ID of the t-account in question

cc_tmpSearchColumns = 
        Temporary table to improve performance for PopulateSearchColumnBatchProcess.
    

cc_tmpSearchColumns.ID = key id.
cc_tmpSearchColumns.IntValue = for populate int value based search columns
cc_tmpSearchColumns.VarCharValue = for populate varchar based value based search columns

cc_tmpseveritytoinccopy = Temp table used to set the severity value for non-injury incidents during the 4.0.x-5.0.x upgrade

cc_tmpseveritytoinccopy.IncidentID = The ID of the incident to be updated by a join to this temp table
cc_tmpseveritytoinccopy.SeverityTmp = The SeverityType value to copy from cc_exposure to cc_incident

cc_tmpsrctargettaccounts = Temp table for Athena to Nozomi upgrade to change which t-account certain taccountlineitems are pointing to

cc_tmpsrctargettaccounts.LineItemID = The taccountlineitem to update
cc_tmpsrctargettaccounts.TargetTAccountID = The ID of the new TAccount to set into the lineitem

cc_tmpstclaimaccess = Tmp table that records information about users and groups that are allowed to access a claim.  Used for staging table population of new claims.

cc_tmpstclaimaccess.Anyone = Whether this permission should be granted to everyone.  If true then GroupID, UserID, and SecurityZoneID should be null.
cc_tmpstclaimaccess.ClaimID = A foreign key to the claim.
cc_tmpstclaimaccess.GroupID = The permitted group.  Exactly one of GroupID, UserID, and SecurityZoneID should be non-null.
cc_tmpstclaimaccess.Permission = The type of permission being granted.
cc_tmpstclaimaccess.SecurityZoneID = The permitted security zone.  Exactly one of GroupID, UserID, and SecurityZoneID should be non-null.
cc_tmpstclaimaccess.UserID = The permitted user.  Exactly one of GroupID, UserID, and SecurityZoneID should be non-null.

cc_tmpsteclaimaccess = Tmp table that records information about users and groups that are allowed to access a claim.  Used for staging table population of objects against existing claims.

cc_tmpsteclaimaccess.Anyone = Whether this permission should be granted to everyone.  If true then GroupID, UserID, and SecurityZoneID should be null.
cc_tmpsteclaimaccess.ClaimID = A foreign key to the claim.
cc_tmpsteclaimaccess.GroupID = The permitted group.  Exactly one of GroupID, UserID, and SecurityZoneID should be non-null.
cc_tmpsteclaimaccess.Permission = The type of permission being granted.
cc_tmpsteclaimaccess.SecurityZoneID = The permitted security zone.  Exactly one of GroupID, UserID, and SecurityZoneID should be non-null.
cc_tmpsteclaimaccess.UserID = The permitted user.  Exactly one of GroupID, UserID, and SecurityZoneID should be non-null.

cc_tmpstagglimit = Temporary table for populating the aggregate limit denorm table, agglimitrpt, from the staging tables.

cc_tmpstagglimit.AggLimitCalcCriteria = Exclusions for limit used calculations.
cc_tmpstagglimit.CoverageLineID = Publicid of the CoverageLine.
cc_tmpstagglimit.LimitType = Aggregate limit type code.
cc_tmpstagglimit.PolicyPeriodID = Publicid of the PolicyPeriod.
cc_tmpstagglimit.ValueType = Aggregate type code: limit or deductible.

cc_tmpstagglimit2 = Temporary table for setting rows as invalid in the aggregate limit denorm table, agglimitrpt, from the staging tables.

cc_tmpstagglimit2.DenormId = Id of the denorm row in aggregatelimitrpt.

cc_tmpstagingexposurerpt = Temp table with final calcs, utilized during the population of the production ExposureRpt table from staging tables.

cc_tmpstagingexposurerpt.AvailableReserves = The available reserves on an exposure.
cc_tmpstagingexposurerpt.AvailableResrvRprtng = The available reserves on an exposure.
cc_tmpstagingexposurerpt.ClaimID = This exposure's claim
cc_tmpstagingexposurerpt.ClaimPublicID = The public ID for the claim.
cc_tmpstagingexposurerpt.ClaimRptID = The ID for the ClaimRpt record being inserted
cc_tmpstagingexposurerpt.ClaimRptPublicID = The public ID for the ClaimRpt record being inserted.
cc_tmpstagingexposurerpt.ExposureID = The exposure that the calculations are on.
cc_tmpstagingexposurerpt.ExposurePublicID = The public ID for the exposure.
cc_tmpstagingexposurerpt.ExposureRptID = The ID for the ExposureRpt record being inserted
cc_tmpstagingexposurerpt.ExposureRptPublicID = The public ID for the ExposureRpt record being inserted.
cc_tmpstagingexposurerpt.FuturePayments = The total of awaiting submission payments scheduled to be sent after today.
cc_tmpstagingexposurerpt.FuturePaymentsRprtng = The total of awaiting submission payments scheduled to be sent after today.
cc_tmpstagingexposurerpt.OpenRecoveryReserves = The open recovery reserves on an exposure.
cc_tmpstagingexposurerpt.OpenRecoveryResRprtng = The open recovery reserves on an exposure.
cc_tmpstagingexposurerpt.OpenReserves = The open reserves.
cc_tmpstagingexposurerpt.OpenReservesRprtng = The open reserves.
cc_tmpstagingexposurerpt.RemainingReserves = The remaining reserves on an exposure.
cc_tmpstagingexposurerpt.RemainingResrvRprtng = The remaining reserves on an exposure.
cc_tmpstagingexposurerpt.TotalPayments = The total payments.
cc_tmpstagingexposurerpt.TotalPaymentsRprtng = The total payments.
cc_tmpstagingexposurerpt.TotalRecoveries = The total recoveries on an exposure.
cc_tmpstagingexposurerpt.TotalRecoveriesRprtng = The total recoveries on an exposure.

cc_tmptacctbalancecopy = Temp table for Athena to Nozomi upgrade to support copying of balances from old taccount to new taccount

cc_tmptacctbalancecopy.BalanceToCopy = The balance from the old t-account to copy to the new t-account
cc_tmptacctbalancecopy.SourceTAccountType = The type of the source taccount
cc_tmptacctbalancecopy.TAccountID = The ID of the t-account to update
cc_tmptacctbalancecopy.TmpNumContributingTxns = The number of contributing txns to copy to the new t-account

cc_tmptaccountcreatejoin = Temp table for creation of TAccounts during staging table load.

cc_tmptaccountcreatejoin.NormalBalance = Normal balance of the TAccount (i.e., Credit or Debit)
cc_tmptaccountcreatejoin.Type = Type of a TAccount

cc_tmptaccountcreditdebit = Temp table for upgrade to taccounts.

cc_tmptaccountcreditdebit.ID = Internally managed primary key
cc_tmptaccountcreditdebit.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_tmptaccountcreditdebit.TmpCreditBalance = Temp credit balance for claim amount
cc_tmptaccountcreditdebit.TmpCreditBalanceReporting = Temp credit balance for reporting amount
cc_tmptaccountcreditdebit.TmpCreditBalanceReserving = Temp credit balance for reserving amount
cc_tmptaccountcreditdebit.TmpDebitBalance = Temp debit balance for claim amount
cc_tmptaccountcreditdebit.TmpDebitBalanceReporting = Temp debit balance for reporting amount
cc_tmptaccountcreditdebit.TmpDebitBalanceReserving = Temp debit balance for reserving amount
cc_tmptaccountcreditdebit.TmpNumContributingTxns = temp field for the number of contributing transactions

cc_tmptaccountjoin = Temp table for Athena to Nozomi upgrade - used to help with creation of new rejection taccounts

cc_tmptaccountjoin.NewTAccountID = ID of the new taccount
cc_tmptaccountjoin.OldTAccountID = ID of the old taccount
cc_tmptaccountjoin.OldTAccountType = Type of the old taccount (i.e., either Reserves or RecoveryReserves)

cc_tmptaccountlineitem2row = 2 row temp table for upgrade to taccountlineitems.

cc_tmptaccountlineitem2row.ID = Internally managed primary key
cc_tmptaccountlineitem2row.IDXform = Transform for ID.
cc_tmptaccountlineitem2row.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_tmptaccountlineitem2row.PublicIDXform = Transform for PublicID.

cc_tmptaccountreserveline = Temp table for upgrade to taccounts populating reserve line.

cc_tmptaccountreserveline.TAccountID = Temp TAccount ID.
cc_tmptaccountreserveline.TAccountType = type of the taccount
cc_tmptaccountreserveline.TmpNumContributingTxns = The number of transactions currently contributing to this taccount
cc_tmptaccountreserveline.TmpReserveLineID = Temp ReserveLine ID.

cc_tmptacctcontribtxns = Temp table for setting the Number of contributing transactions for each taccount during 4.0 to Nozomi upgrade

cc_tmptacctcontribtxns.TAccountID = primary key of the taccount
cc_tmptacctcontribtxns.TmpNumContributingTxns = count of the # of contributing txns

cc_transaction = <ul><li>Reserve - expected payments</li><li>Payment - money paid out or liability incurred</li>
        <li> RecoveryReserve - expected recoveries</li><li>Recovery - credit or money received</li></ul>
        <p>
        Every transaction is made against a single ReserveLine. It contains a non-null
        array of TransactionLineItem entities holding the amount(s) of the transaction. Checks
        are not transactions. A single transaction will affect multiple T-accounts.
    

cc_transaction.ID = Internally managed primary key
cc_transaction.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_transaction.Claim = The related claim.<p>Setting the claim also sets this transaction's currency to the claim's currency if it is null.
cc_transaction.ClaimToReportingExchangeRate = ExchangeRate to use when converting ClaimAmount to ReportingAmount. Setting this value updates the reporting amounts.
cc_transaction.Comments = Comments about the transaction, such as a reason.
cc_transaction.CostCategory = The CostCategory for this transaction.
cc_transaction.CostType = Type of cost (for example, claim cost or adjusting overhead).
cc_transaction.CreateTime = Timestamp when the object was created
cc_transaction.CreateUser = User who created the object
cc_transaction.Currency = The Currency of the transaction amount.
cc_transaction.Exposure = The related exposure.
cc_transaction.LifeCycleState = Current internal lifecycle state of the transaction. Changing state affects T-accounts.
cc_transaction.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_transaction.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_transaction.RecoveryCoding = The RecoveryCoding to which this transaction is coded.
cc_transaction.ReserveLine = The ReserveLine associated with this transaction.  For all transaction subtypes this ReserveLine will have matching Claim, Exposure, CostType and CostCategory.
cc_transaction.ReservingCurrency = Reserving Currency of this transaction's ReserveLine. Indicates the currency in which reserves are to be set aside and eroded.
cc_transaction.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_transaction.Status = Status of the transaction. Further refines the LifeCycleState. Can only change status directly to another status in the same LifeCycleState, which does not affect Taccounts.
cc_transaction.SubmitDate = Unused. May be removed in a future release.
cc_transaction.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_transaction.TransactionSet = Set that groups together one or more transactions for approval.
cc_transaction.TransToClaimExchangeRate = ExchangeRate to use when converting TransactionAmount to ClaimAmount. Setting this value updates the claim and reporting amounts. Also sets the same ExchangeRate as TransToReservingExchangeRate if ClaimCurrency and ReservingCurrency are equal.
cc_transaction.TransToReservingExchangeRate = ExchangeRate to use when converting TransactionAmount to ReservingAmount. Setting this value updates the reserving amounts. Also sets the same ExchangeRate as TransToClaimExchangeRate if ClaimCurrency and ReservingCurrency are equal.
cc_transaction.UpdateTime = Timestamp when the object was last updated
cc_transaction.UpdateUser = User who last updated the object
cc_transaction.LineItems = Set of line items that further categorize the transaction amount.
cc_transaction.Offsets = Transactions that offset this transaction. A transaction should have at most one item in this array. This array is applicable only to a payment or recovery.
cc_transaction.Onsets = Transactions that onset this transaction. This array is applicable only to a payment or recovery.
cc_transaction.RecTAccountTransactions = Set of T-account transactions that make up the lifecycle of this Transaction. Only applicable to Recoveries and RecoveryReserves.
cc_transaction.TAccountTransactions = Set of T-account transactions that make up the lifecycle of this Transaction.
cc_transaction.Check = Check that paid this payment.
cc_transaction.CloseClaim = If this transaction is a final payment, this indicates whether it should or did close its associated claim.
cc_transaction.CloseExposure = If this transaction is a final payment, this indicates whether it should or did close its associated exposure.
cc_transaction.DoesNotErodeReserves = Indicates whether this payment should not erode reserves for its ReserveLine.  This field can only be set in the CheckWizard UI.  Otherwise, one of the setAsEroding() or setAsNonEroding() methods must be called from a rule to change whether a payment erodes reserves.
cc_transaction.Matter = Foreign key to Matter
cc_transaction.OffsettingReserves = The reserve created to offset this payment, whether to zero reserves or keep reserves from becoming negative.  Should only be one.
cc_transaction.PaymentType = Type of the payment.
cc_transaction.ClaimContact = Person or company from whom the recovery was obtained.
cc_transaction.OBOClaimContact = Person or company responsible for paying.
cc_transaction.PayerDenorm = Payer FK denorm.
cc_transaction.RecoveryCategory = The RecoveryCategory to which this transaction is coded.
cc_transaction.RecoveryCategory = The RecoveryCategory to which this transaction is coded.
cc_transaction.OffsetPayments = The payments for which this reserve is the offset.  Should only be one.

cc_transactionid = Transaction ids sent to create the illusion of idempotency

cc_transactionid.CreationTime = Time of creating the transaction id.
cc_transactionid.tid = Unique transaction id

cc_transactionlineitem = s (e.g., Doctor, Hospital, Legal, Other, etc.).  Every transaction has one or more TransactionLineItems, and
    the amount of the transaction is the aggregate amount of all its line items.
    

cc_transactionlineitem.ID = Internally managed primary key
cc_transactionlineitem.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_transactionlineitem.ClaimAmount = The amount of this line item in the Claim's currency.
cc_transactionlineitem.ClaimForExAmount = The foreign exchange adjustment for this line item in the claim currency. This stores the amount by which the current value of ClaimAmount exceeds its original value.
cc_transactionlineitem.Comments = A note or description of the line item.
cc_transactionlineitem.CreateTime = Timestamp when the object was created
cc_transactionlineitem.CreateUser = User who created the object
cc_transactionlineitem.Deductible = The deductible for which this transaction line item is applied, if any.
cc_transactionlineitem.LineCategory = The category of this line item.
cc_transactionlineitem.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_transactionlineitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_transactionlineitem.ReportingAmount = The amount of this line item in the app's default currency (reporting currency).
cc_transactionlineitem.ReportingForExAmount = The foreign exchange adjustment for this line item in the reporting currency. This stores the amount by which the current value of ReportingAmount exceeds its original value.
cc_transactionlineitem.ReservingAmount = The amount of this line item in the Currency of the ReserveLine (ReservingCurrency).
cc_transactionlineitem.ReservingForExAmount = The foreign exchange adjustment for this line item in the reserving currency. This stores the amount by which the current value of ReservingAmount exceeds its original value.
cc_transactionlineitem.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_transactionlineitem.Transaction = The parent transaction.
cc_transactionlineitem.TransactionAmount = The amount of this line item, in the transaction currency.
cc_transactionlineitem.UpdateTime = Timestamp when the object was last updated
cc_transactionlineitem.UpdateUser = User who last updated the object

cc_transactionoffset = A TransactionOffset relates a transaction to its offsetting transaction (if any).
    It contains two links, one to the original transaction and one to its offsetting transaction.
    A TransactionOffset is created whenever a user recodes or transfers a payment in ClaimCenter,
    and also when a user voids/stops a payment.  In the case of a recode or transfer the Offsetting
    transaction is just a negative copy of the original payment.
  

cc_transactionoffset.ID = Internally managed primary key
cc_transactionoffset.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_transactionoffset.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_transactionoffset.Offset = The offset transaction, to negate the original transaction.
cc_transactionoffset.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_transactionoffset.Transaction = The transaction being offset.

cc_transactiononset = A TransactionOnset relates a transaction to its onsetting
    transactions (if any).  It contains two links, one to the original transaction and one to the new onset transaction.
    A TransactionOnset is created whenever a user recodes or transfers a payment in ClaimCenter. In the case of a
    recode or transfer the onset payment has the same line items as the original payment but a different ReserveLine coding.
  

cc_transactiononset.ID = Internally managed primary key
cc_transactiononset.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_transactiononset.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_transactiononset.Onset = The onset (recode or transfer) transaction, same as the original but on the new ReserveLine/Claim.
cc_transactiononset.OnsetPublicID = PublicID of the onset, used when the FK to the onset has been severed for archiving.
cc_transactiononset.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_transactiononset.Transaction = The transaction being onset.

cc_transactionset = 
      A set of transactions submitted for approval together. Subtypes include ReserveSet, RecoverySet, and
      RecoveryReserveSet, which contain the respective Transaction types. A CheckSet contains Checks and Payments.
      There is no PaymentSet.
    

cc_transactionset.ID = Internally managed primary key
cc_transactionset.ApprovalDate = The date when the object was ultimately approved or rejected
cc_transactionset.ApprovalStatus = The approval status of the object
cc_transactionset.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_transactionset.Claim = The claim entity to which this TransactionSet belongs.
cc_transactionset.CreateTime = Timestamp when the object was created
cc_transactionset.CreateUser = User who created the object
cc_transactionset.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_transactionset.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_transactionset.RequestingUser = The user submitting the object for approval
cc_transactionset.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_transactionset.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_transactionset.UpdateTime = Timestamp when the object was last updated
cc_transactionset.UpdateUser = User who last updated the object
cc_transactionset.Activities = Set of approval / approval denial activities linked to this transaction set.
cc_transactionset.Documents = Set of documents linked to this transaction set.
cc_transactionset.CheckGroups = The check groups of multi-payee checks contained in the check set, if any.
cc_transactionset.Checks = All checks contained in the check set.
cc_transactionset.Recurrence = The recurrence schedule for the check set, if it has one.
cc_transactionset.RecurringChecks = Recurring checks (if any) that make up this check set.
cc_transactionset.Reserves = Reserves that should be approved or rejected along with the set.
cc_transactionset.RecoveryReserves = Recovery reserves in the set.
cc_transactionset.Recoveries = The recoveries in the set.
cc_transactionset.Reserves = Reserves in the set.

cc_transsetdocument = Associates a Document to a TransactionSet.

cc_transsetdocument.ID = Internally managed primary key
cc_transsetdocument.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_transsetdocument.Document = Associated Document.
cc_transsetdocument.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_transsetdocument.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_transsetdocument.TransactionSet = TransactionSet the document is linked to.

cc_tripaccommodation = Used to track the original and changed accommodation on the travel schedule for the insured/claimant

cc_tripaccommodation.ID = Internally managed primary key
cc_tripaccommodation.Address = Address for the planned accommodation
cc_tripaccommodation.AgentFees = Agent fees incurred
cc_tripaccommodation.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_tripaccommodation.Assessment = Approve, deny or review an expense
cc_tripaccommodation.CancellationFees = Cancellation fees incurred
cc_tripaccommodation.CancelOnly = Indicates if the expense is cancelled without the need for additional arrangements
cc_tripaccommodation.CreateTime = Timestamp when the object was created
cc_tripaccommodation.CreateUser = User who created the object
cc_tripaccommodation.EndDate = The ending date/time for this expense
cc_tripaccommodation.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_tripaccommodation.OtherFees = Other fees incurred
cc_tripaccommodation.PaidAmount = Original invoiced amount
cc_tripaccommodation.PropertyName = Name of the accommodation booked
cc_tripaccommodation.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_tripaccommodation.ReasonForCancellation = Reason for cancellation
cc_tripaccommodation.ReasonForDenial = Reasons for denial
cc_tripaccommodation.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_tripaccommodation.StartDate = The starting date/time for this expense
cc_tripaccommodation.TripIncident = Incident this accommodation is related to
cc_tripaccommodation.TripSegment = Accommodation is related to this trip segment
cc_tripaccommodation.UpdateTime = Timestamp when the object was last updated
cc_tripaccommodation.UpdateUser = User who last updated the object
cc_tripaccommodation.AddnlTripAccommodations = All new/additional trip accommodations associated with this accommodation

cc_tripsegment = Used to track the original and changed segments on the travel schedule for the insured/claimant

cc_tripsegment.ID = Internally managed primary key
cc_tripsegment.AgentFees = Agent fees incurred
cc_tripsegment.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_tripsegment.Assessment = Approve, deny or review an expense
cc_tripsegment.CancellationFees = Cancellation fees incurred
cc_tripsegment.CancelOnly = Indicates if the expense is cancelled without the need for additional arrangements
cc_tripsegment.CarrierName = Name of the airline, cruise ship, bus etc
cc_tripsegment.CarrierNumber = Flight, ship, bus number etc
cc_tripsegment.CreateTime = Timestamp when the object was created
cc_tripsegment.CreateUser = User who created the object
cc_tripsegment.EndDate = The ending date/time for this expense
cc_tripsegment.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_tripsegment.OtherFees = Other fees incurred
cc_tripsegment.PaidAmount = Original invoiced amount
cc_tripsegment.PortOfDisembarkation = Arrival airport, port, city etc
cc_tripsegment.PortOfEmbarkation = Boarding airport, port, city etc
cc_tripsegment.PortOfTransit = Transit airports, ports, cities etc
cc_tripsegment.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_tripsegment.ReasonForCancellation = Reason for cancellation
cc_tripsegment.ReasonForDenial = Reasons for denial
cc_tripsegment.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_tripsegment.StartDate = The starting date/time for this expense
cc_tripsegment.TransportType = Type of transport, airline, cruise ship, taxi etc
cc_tripsegment.TripIncident = Incident this schedule is related to
cc_tripsegment.UpdateTime = Timestamp when the object was last updated
cc_tripsegment.UpdateUser = User who last updated the object
cc_tripsegment.AddnlTripSegments = All new/additional trip segments associated with this segment

cc_typecodecountdatadist = Stores typekey type code data distribution.

cc_typecodecountdatadist.ID = Internally managed primary key
cc_typecodecountdatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_typecodecountdatadist.TypeCode = Name of type code.
cc_typecodecountdatadist.TypeCodeCount = Count of type code for this table.
cc_typecodecountdatadist.TypeKeyDataDist = TypeKeyDataDist for this object.

cc_typekeydatadist = Stores type key data distribution.

cc_typekeydatadist.ID = Internally managed primary key
cc_typekeydatadist.NumNonNull = Count of # of non null values.
cc_typekeydatadist.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_typekeydatadist.TableDataDist = TableDataDist for this object.
cc_typekeydatadist.TypeKeyName = Name of type key.
cc_typekeydatadist.TypeCodeCountDataDists = Collection of TypeCodeCountDataDists linked to this ArrayDataDist.

cc_typecodeusagerpt = Table whose sole purpose is to store the report generated by finding usages of upgraded typecodes

cc_typecodeusagerpt.ID = Internally managed primary key
cc_typecodeusagerpt.ColumnName = Name of the column
cc_typecodeusagerpt.Count = Number of typekey references for this (entity, column, typelist) tuple
cc_typecodeusagerpt.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_typecodeusagerpt.ReportItem = One line item in the report
cc_typecodeusagerpt.TableName = Name of the entity
cc_typecodeusagerpt.Typelist = Name of the typelist

cc_typeofproperty = 
        Type of property affected in a property incident. A single incident can affect multiple types of property.
      
    

cc_typeofproperty.ID = Internally managed primary key
cc_typeofproperty.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_typeofproperty.CreateTime = Timestamp when the object was created
cc_typeofproperty.CreateUser = User who created the object
cc_typeofproperty.Incident = 
cc_typeofproperty.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_typeofproperty.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_typeofproperty.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_typeofproperty.TypeofProperty = The type of property affected.
cc_typeofproperty.UpdateTime = Timestamp when the object was last updated
cc_typeofproperty.UpdateUser = User who last updated the object

cc_loaddbstatisticscommand = DB statistics commands to run after a staging table load.

cc_loaddbstatisticscommand.ID = Internally managed primary key
cc_loaddbstatisticscommand.LoadCommand = Parent.
cc_loaddbstatisticscommand.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_loaddbstatisticscommand.StatsCommand = Update database statistics command to run.
cc_loaddbstatisticscommand.TableName = Affected table.

cc_upgradedbstorageset = Stores a database storage set snapshot.

cc_upgradedbstorageset.ID = Internally managed primary key
cc_upgradedbstorageset.AfterUpgrade = True is set created after the process, false if before
cc_upgradedbstorageset.Name = Name of storage set.
cc_upgradedbstorageset.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_upgradedbstorageset.TimeTaken = Time storage set taken.
cc_upgradedbstorageset.UpgradeDBStorageSetType = Database storage set type
cc_upgradedbstorageset.UpgradeInstance = Upgrade instance for this object
cc_upgradedbstorageset.UpgradeDBStorageSetColumns = 
cc_upgradedbstorageset.UpgradeDBStorageSetResults = 

cc_upgradedbstoragesetcolumns = Stores ordered column names for a database storage set.

cc_upgradedbstoragesetcolumns.ID = Internally managed primary key
cc_upgradedbstoragesetcolumns.ColumnClass = Java class of data.
cc_upgradedbstoragesetcolumns.ColumnName = Column name.
cc_upgradedbstoragesetcolumns.ColumnOrder = 0-based ordering of columnname.
cc_upgradedbstoragesetcolumns.CompareColumn = True if column is compared side by side.  False will show differences in parentheses
cc_upgradedbstoragesetcolumns.KeyColumn = True if used to match before and after object.  False if compare before and after
cc_upgradedbstoragesetcolumns.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_upgradedbstoragesetcolumns.UpgradeDBStorageSet = Database storage set for this object

cc_upgradedbstoragesetresults = Stores results of database storage set.

cc_upgradedbstoragesetresults.ID = Internally managed primary key
cc_upgradedbstoragesetresults.ColumnOrder = 0-based ordering of column of result within DBSS results
cc_upgradedbstoragesetresults.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_upgradedbstoragesetresults.RowOrder = 0-based ordering of row of result within DBSS results
cc_upgradedbstoragesetresults.UpgradeDBStorageSet = Database storage set for this object
cc_upgradedbstoragesetresults.Value = Result value.

cc_upgradedatamodelinfo = Capture info at time of each deployment

cc_upgradedatamodelinfo.ID = Internally managed primary key
cc_upgradedatamodelinfo.ApplicationMajorVers = Application Major Schema Version at time of deployment
cc_upgradedatamodelinfo.ApplicationMinorVers = Application Minor Schema Version at time of deployment
cc_upgradedatamodelinfo.ExtensionsVers = Extensions Version at time of deployment
cc_upgradedatamodelinfo.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_upgradedatamodelinfo.PlatformMajorVers = Platform Major Schema Version at time of deployment
cc_upgradedatamodelinfo.PlatformMinorVers = Platform Minor Schema Version at time of deployment
cc_upgradedatamodelinfo.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_upgradeinstance = Upgrade history.

cc_upgradeinstance.ID = Internally managed primary key
cc_upgradeinstance.BackedOut = Only applicable for a rolling upgrade. True if the rolling upgrade has been backed out
cc_upgradeinstance.DatabaseEndTime = Timestamp when the database portion of the upgrade ended
cc_upgradeinstance.DatabaseStartTime = Timestamp when the database portion of the upgrade started
cc_upgradeinstance.DefdTasksCompleted = Whether we completed the deferred upgrade tasks
cc_upgradeinstance.EndTime = Timestamp when the timing completed
cc_upgradeinstance.ExecDuration = Execution duration in seconds
cc_upgradeinstance.Failed = Whether this upgrade failed
cc_upgradeinstance.LockingColumn = Meaningless column for locking
cc_upgradeinstance.NumDefdTasksCompleted = Number of completed deferred upgrade tasks
cc_upgradeinstance.ProfilerData = Raw Profiler data
cc_upgradeinstance.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_upgradeinstance.Resumed = Whether this upgrade was resumed
cc_upgradeinstance.ReverseMigration = Only applicable for a rolling upgrade. True if this schema migration backs out the previous upgrade
cc_upgradeinstance.Rolling = Whether this is a rolling upgrade
cc_upgradeinstance.SourceAppMajorVersion = Application major version of source
cc_upgradeinstance.SourceAppMinorVersion = Application minor version of source
cc_upgradeinstance.SourceBuildVersion = Build version string from source configuration which includes app version and customer version
cc_upgradeinstance.SourceExtensionsVersion = Extension version of source
cc_upgradeinstance.SourcePlMajorVersion = Platform major version of source
cc_upgradeinstance.SourcePlMinorVersion = Platform minor version of source
cc_upgradeinstance.StartTime = Timestamp when the timing began
cc_upgradeinstance.TargetAppMajorVersion = Application major version of target
cc_upgradeinstance.TargetAppMinorVersion = Application minor version of target
cc_upgradeinstance.TargetBuildVersion = Build version string from target configuration which includes app version and customer version
cc_upgradeinstance.TargetChecksum = Checksum of target configuration (only valid if Rolling == true)
cc_upgradeinstance.TargetExtensionsVersion = Extension version of target
cc_upgradeinstance.TargetPlMajorVersion = Platform major version of target
cc_upgradeinstance.TargetPlMinorVersion = Platform minor version of target
cc_upgradeinstance.TotalNumDefdTasks = Total number of deferred upgrade tasks
cc_upgradeinstance.UpdateStatistics = Whether we updated statistics as part of this upgrade
cc_upgradeinstance.DBMSDumps = 
cc_upgradeinstance.UpgradeDBStorageSets = 
cc_upgradeinstance.UpgradeRowCounts = 
cc_upgradeinstance.UpgradeTableRegistries = 

cc_upgraderowcount = Before and after row counts within an upgrade.

cc_upgraderowcount.ID = Internally managed primary key
cc_upgraderowcount.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_upgraderowcount.RowCountAfterUpgrade = Row count after upgrade
cc_upgraderowcount.RowCountBeforeUpgrade = Row count before upgrade
cc_upgraderowcount.RowCountChange = Row count change after upgrade
cc_upgraderowcount.TableName = Table name
cc_upgraderowcount.UpgradeInstance = Parent

cc_upgradeschemaversion = Stores version number of upgrade instrumentation schema to control upgrading these tables.

cc_upgradeschemaversion.Name = Column for unique index
cc_upgradeschemaversion.UpgradeSchemaVersion = Upgrade instrumentation schema version.

cc_upgradetableregistry = Before and after table registry entries within an upgrade.

cc_upgradetableregistry.ID = Internally managed primary key
cc_upgradetableregistry.IDNameAfterUpgrade = Table registry entry after upgrade
cc_upgradetableregistry.IDNameBeforeUpgrade = Table registry entry before upgrade
cc_upgradetableregistry.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_upgradetableregistry.TableName = Table name
cc_upgradetableregistry.UpgradeInstance = Parent

cc_upgradevtdbmsdump = DBMS-specific performance information for a version trigger.

cc_upgradevtdbmsdump.ID = Internally managed primary key
cc_upgradevtdbmsdump.Contents = query
cc_upgradevtdbmsdump.EndTime = Timestamp when the timing completed
cc_upgradevtdbmsdump.ExecDuration = Execution duration in seconds
cc_upgradevtdbmsdump.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_upgradevtdbmsdump.StartTime = Timestamp when the timing began
cc_upgradevtdbmsdump.UpgradeInstance = UpgradeInstance
cc_upgradevtdbmsdump.VersionActionName = Fully qualified name of version trigger to which this applies

cc_user = Internal system users.

cc_user.ID = Internally managed primary key
cc_user.AuthorityProfile = Authority limit profile for this user
cc_user.Contact = Contact entry related to the user.
cc_user.CreateTime = Timestamp when the object was created
cc_user.CreateUser = User who created the object
cc_user.Credential = Security credential for the user.
cc_user.DefaultCountry = User's default country
cc_user.DefaultPhoneCountry = User's default phone country
cc_user.Department = User's department within the company.
cc_user.ExperienceLevel = Experience level of the user.
cc_user.ExternalUser = If true, the user is an external user, and claims assigned to the user should be treated as externally owned.
cc_user.JobTitle = User's job title.
cc_user.Language = User's preferred language.
cc_user.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_user.Locale = User's preferred locale.
cc_user.LossType = High level claim type (for example, Auto or Property).
cc_user.NewlyAssignedActivities = 
cc_user.OffsetStatsUpdateTime = 
cc_user.Organization = Each user should belong to exactly one organization
cc_user.PolicyType = High level policy type (for example, Auto or Property).
cc_user.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_user.QuickClaim = Default quick claim values categorized by LossType.
cc_user.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_user.SessionTimeoutSecs = User's session timeout value in seconds
cc_user.SpatialPointDenorm = Denormalized column from UserContact.PrimaryAddress.SpatialPoint
cc_user.SystemUserType = Indicates the type of special system users (for example, default claim owner). This is null for regular users.
cc_user.TimeZone = User's time zone.
cc_user.UpdateTime = Timestamp when the object was last updated
cc_user.UpdateUser = User who last updated the object
cc_user.UserSettings = Settings for this user (formerly known as preferences).
cc_user.VacationStatus = The vacation status of this user.
cc_user.ValidationLevel = Validation level that this object passed (if any) before it was stored.
cc_user.Attributes = Attributes for the user.
cc_user.BackupUsers = Backup users for this user. Though this is an array, users can only have one backup user.
cc_user.GroupUsers = Groups associated with this user.
cc_user.Regions = Regions associated with this user.
cc_user.Roles = Security roles granted to the user.

cc_userbackup = 
        Supports the creation of backup user attribute for a particular User.
      
    

cc_userbackup.ID = Internally managed primary key
cc_userbackup.BackupUser = User that will serve as backup.
cc_userbackup.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_userbackup.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_userbackup.User = User.

cc_usergroupstats = 
        Represents the combined statistics for a given user in a group. This entity aggregates claim, exposure, and activity
        statistics. Refer to the DashboardStats entity for statistics displayed for a user or in the dashboard.
    

cc_usergroupstats.ID = Internally managed primary key
cc_usergroupstats.AllActOpen = Number of open activities for the given user/group.
cc_usergroupstats.AllMatterOpen = Number of open matters for the given user/group.
cc_usergroupstats.AllOpen = Number of open claims for the given user/group.
cc_usergroupstats.AllSubOpen = Number of open exposures for the given user/group.
cc_usergroupstats.CalculateDate = Date when statistics were calculated.
cc_usergroupstats.ClaimAgingFour = Number of open claims falling into the fourth aging bucket (the divisions are customer-configurable).
cc_usergroupstats.ClaimAgingOne = Number of open claims falling into the first aging bucket (the divisions are customer-configurable).
cc_usergroupstats.ClaimAgingThree = Number of open claims falling into the third aging bucket (the divisions are customer-configurable).
cc_usergroupstats.ClaimAgingTwo = Number of open claims falling into the second aging bucket (the divisions are customer-configurable).
cc_usergroupstats.ClaimWorkload = Total Claim Workload for Group/User
cc_usergroupstats.ClosedThisWeek = Number of claims closed in the time window. Note that the window is now customizable, so this may not actually correspond to the current week, but the column name cannot be easily changed.
cc_usergroupstats.CompletedToday = Number of activities completed today.
cc_usergroupstats.DueToday = Number of activities due today.
cc_usergroupstats.ExpAgingFour = Number of open exposures falling into the fourth aging bucket (the divisions are customer-configurable).
cc_usergroupstats.ExpAgingOne = Number of open exposures falling into the first aging bucket (the divisions are customer-configurable).
cc_usergroupstats.ExpAgingThree = Number of open exposures falling into the third aging bucket (the divisions are customer-configurable).
cc_usergroupstats.ExpAgingTwo = Number of open exposures falling into the second aging bucket (the divisions are customer-configurable).
cc_usergroupstats.ExposureWorkload = Total Exposure Workload for Group/User
cc_usergroupstats.Flagged = Number of flagged claims for the given user/group.
cc_usergroupstats.Group = The given group.
cc_usergroupstats.LitAgingFour = Number of open and litigated claims falling into the fourth aging bucket (the divisions are customer-configurable).
cc_usergroupstats.LitAgingOne = Number of open and litigated claims falling into the first aging bucket (the divisions are customer-configurable).
cc_usergroupstats.LitAgingThree = Number of open and litigated claims falling into the third aging bucket (the divisions are customer-configurable).
cc_usergroupstats.LitAgingTwo = Number of open and litigated claims falling into the second aging bucket (the divisions are customer-configurable).
cc_usergroupstats.MatterClosedThisWeek = Number of matters closed in the time window. Note that the window is now customizable, so this may not actually correspond to the current week, but the column name cannot be easily changed.
cc_usergroupstats.NewThisWeek = Number of claims created in the time window. Note that the window is now customizable, so this may not actually correspond to the current week, but the column name cannot be easily changed.
cc_usergroupstats.Overdue = Number of overdue activities for the given user/group.
cc_usergroupstats.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_usergroupstats.SubAgingFour = Number of active subrogations falling into the fourth aging bucket (the divisions are customer-configurable).
cc_usergroupstats.SubAgingOne = Number of active subrogations falling into the first aging bucket (the divisions are customer-configurable).
cc_usergroupstats.SubAgingThree = Number of active subrogations falling into the third aging bucket (the divisions are customer-configurable).
cc_usergroupstats.SubAgingTwo = Number of active subrogations falling into the second aging bucket (the divisions are customer-configurable).
cc_usergroupstats.SubClosedThisWeek = Number of exposures closed in the time window. Note that the window is now customizable, so this may not actually correspond to the current week, but the column name cannot be easily changed.
cc_usergroupstats.SubLitAgingFour = Number of active subrogations with a related litigation falling into the fourth aging bucket (the divisions are customer-configurable).
cc_usergroupstats.SubLitAgingOne = Number of active subrogations with a related litigation falling into the first aging bucket (the divisions are customer-configurable).
cc_usergroupstats.SubLitAgingThree = Number of active subrogations with a related litigation falling into the third aging bucket (the divisions are customer-configurable).
cc_usergroupstats.SubLitAgingTwo = Number of active subrogations with a related litigation falling into the second aging bucket (the divisions are customer-configurable).
cc_usergroupstats.SubroActiveAll = Active subrogations
cc_usergroupstats.SubroActiveClaim = Active claim-level subrogations
cc_usergroupstats.SubroActiveExposure = Active exposure-level subrogations
cc_usergroupstats.SubroClosed = Subrogations closed within the statistics window
cc_usergroupstats.TotalWorkload = Total Workload for Group/User
cc_usergroupstats.User = The given user.

cc_userregion = Joins a user to one or more regions.

cc_userregion.ID = Internally managed primary key
cc_userregion.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_userregion.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_userregion.Region = Associated region.
cc_userregion.User = Associated user.

cc_userrole = 
        Joins a User with their security roles. The system creates this entity when you assign a Role to a User.
        The User will be granted the union of all the permissions granted by their Roles.
      
    

cc_userrole.ID = Internally managed primary key
cc_userrole.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_userrole.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_userrole.Role = Security role granted to the user.
cc_userrole.User = Parent user.

cc_userroleassign = Claim-level user role assignment.

cc_userroleassign.ID = Internally managed primary key
cc_userroleassign.Active = Indicates whether the user is active in this role assignment.
cc_userroleassign.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_userroleassign.AssignedByUser = User who assigned this entity.
cc_userroleassign.AssignedGroup = Group to which this entity is assigned; null if none assigned
cc_userroleassign.AssignedQueue = Either the Queue to which this entity is assigned (if AssignmentStatus is 'assigned'), the Queue to which the system suggests assignment (if AssignmentStatus is 'manual'), or null if none assigned. Only one of AssignedUserID or AssignedQueueID should be non null.
cc_userroleassign.AssignedUser = Either the User to which this entity is assigned (if AssignmentStatus is 'assigned'), the User to which the system suggests assignment (if AssignmentStatus is 'manual'), or null if none assigned. Only one of AssignedUserID or AssignedQueueID should be non null.
cc_userroleassign.AssignmentDate = Time when entity last assigned
cc_userroleassign.AssignmentStatus = Typelist describing assignment status.
cc_userroleassign.Claim = The claim.
cc_userroleassign.CloseDate = Date and time when this entity was closed. (Not applicable to all assignable entities)
cc_userroleassign.Comments = Comments about this role assignment.
cc_userroleassign.CreateTime = Timestamp when the object was created
cc_userroleassign.CreateUser = User who created the object
cc_userroleassign.Exposure = The associated exposure, if any.
cc_userroleassign.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_userroleassign.PreviousGroup = Group to which this entity was previously assigned.
cc_userroleassign.PreviousQueue = Queue to which this entity was previously assigned.
cc_userroleassign.PreviousUser = User to which this entity was previously assigned.
cc_userroleassign.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_userroleassign.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_userroleassign.Role = The role to which the user is assigned.
cc_userroleassign.UpdateTime = Timestamp when the object was last updated
cc_userroleassign.UpdateUser = User who last updated the object

cc_usersettings = User settings

cc_usersettings.ID = Internally managed primary key
cc_usersettings.CancelAlertDismiss = The date/time when the canceled Activities alert bar was last dismissed
cc_usersettings.CreateTime = Timestamp when the object was created
cc_usersettings.CreateUser = User who created the object
cc_usersettings.LastNClaims = Used to store the claims last viewed across sessions; not user controllable.
cc_usersettings.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_usersettings.MinClaimUpdate = The minimum time between claim update checks, in minutes.
cc_usersettings.NumOpenClaims = The number of claims to hold in memory.
cc_usersettings.PrintMargins = The margin sizes for printing (in inches)
cc_usersettings.PrintPageNums = Whether to print page numbers when printing.
cc_usersettings.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_usersettings.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_usersettings.RotateTables = Whether to rotate table data when printing.
cc_usersettings.ShowPrintPreview = Whether to show a print preview before printing.
cc_usersettings.StartupPage = The startup page for this user
cc_usersettings.UpdateTime = Timestamp when the object was last updated
cc_usersettings.UpdateUser = User who last updated the object

cc_vehicle = 
A vehicle (car, boat, etc.) on a policy.  Describes the vehicle's physical
characteristics (make, model, VIN etc.) and relates the vehicle to its coverages.
  

cc_vehicle.ID = Internally managed primary key
cc_vehicle.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_vehicle.BoatType = Type of boat; only applies if vehicle style is boat.
cc_vehicle.Color = Color of the vehicle.
cc_vehicle.CreateTime = Timestamp when the object was created
cc_vehicle.CreateUser = User who created the object
cc_vehicle.LicensePlate = License plate of the vehicle.
cc_vehicle.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_vehicle.Loan = Whether a loan is owed for the vehicle.
cc_vehicle.LoanMonthlyPayment = Monthly loan payment.
cc_vehicle.LoanMonthsRemaining = Months remaining on loan.
cc_vehicle.LoanPayoffAmount = Loan payoff amount.
cc_vehicle.Make = Make of the vehicle.
cc_vehicle.Manufacturer = Company that manufactured the vehicle.
cc_vehicle.Model = Model of the vehicle.
cc_vehicle.OffRoadStyle = Style of snowmobile or ATV (wheels, tracks etc.). Used by ISO.
cc_vehicle.PolicySystemId = Identifier for the vehicle in an external policy system
cc_vehicle.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_vehicle.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_vehicle.SerialNumber = Serial number; only use if VIN is not appropriate (e.g. for boats).
cc_vehicle.State = State (Jurisdiction) in which the vehicle is registered. The Jurisdiction must be associated with JurisdictionType.TC_VEHICLE_REG.
cc_vehicle.Style = Style of Vehicle.
cc_vehicle.UpdateTime = Timestamp when the object was last updated
cc_vehicle.UpdateUser = User who last updated the object
cc_vehicle.Vin = VIN of the vehicle.
cc_vehicle.Year = Year of the vehicle's manufacture.
cc_vehicle.Lienholders = List of lienholders for the vehicle.

cc_vehicleowner = Links a lienholder to a vehicle.

cc_vehicleowner.ID = Internally managed primary key
cc_vehicleowner.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_vehicleowner.Lienholder = The related lienholder.
cc_vehicleowner.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_vehicleowner.OwnerType = Whether the lienholder is a partial owner or the sole owner.
cc_vehicleowner.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_vehicleowner.Vehicle = The related vehicle.

cc_visibilityzone = null

cc_visibilityzone.ID = Internally managed primary key
cc_visibilityzone.ForeignEntity = 
cc_visibilityzone.Owner = 
cc_visibilityzone.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_WCbenefitfactorDetail = Used to track comments, notes, special exceptions related to the WCBenefitParameterSet

cc_WCbenefitfactorDetail.ID = Internally managed primary key
cc_WCbenefitfactorDetail.AppliesToPPD = If true, this footnote does not apply to PPD
cc_WCbenefitfactorDetail.AppliesToPTD = If true, this footnote does not apply to PTD
cc_WCbenefitfactorDetail.AppliesToTPD = If true, this footnote does not apply to TPD
cc_WCbenefitfactorDetail.AppliesToTTD = If true, this footnote does not apply to TTD
cc_WCbenefitfactorDetail.DetailedFactor = Used to track notes, exceptions, etc. related to WC Benefits
cc_WCbenefitfactorDetail.FactorCategory = Category of the factor: Duration, EE attribute, etc.
cc_WCbenefitfactorDetail.FactorComment = Comment explaining the reasoning behind this event status line.
cc_WCbenefitfactorDetail.FactorValue = Tracks a value related to the Footnote
cc_WCbenefitfactorDetail.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_WCbenefitfactorDetail.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_WCbenefitfactorDetail.WCBenefitParameterSet = 

cc_WCBenefitParameterSet = Reference table tracking state-specific temporary disability minimum and maximum
      monetary benefits for particular date ranges.
    

cc_WCBenefitParameterSet.ID = Internally managed primary key
cc_WCBenefitParameterSet.CreateTime = Timestamp when the object was created
cc_WCBenefitParameterSet.CreateUser = User who created the object
cc_WCBenefitParameterSet.EndDate = PD Benefit Expiration Date
cc_WCBenefitParameterSet.JurisdictionState = Jurisdiction State. The Jurisdiction must be associated with JurisdictionType.TC_INSURANCE.
cc_WCBenefitParameterSet.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_WCBenefitParameterSet.PPDMax = Max State PPD limit
cc_WCBenefitParameterSet.PPDMin = MinState PPD limit 
cc_WCBenefitParameterSet.PPDMinAdjToAWW = For PPD, if true and AWW is less than Min then set Min to AWW
cc_WCBenefitParameterSet.PPDPercentOfWages = The percentage of wages paid for  Permanent Partial Disability  (e.g. 80%)
cc_WCBenefitParameterSet.PTDMax = Max State PTD limit
cc_WCBenefitParameterSet.PTDMin = MinState PTD limit 
cc_WCBenefitParameterSet.PTDMinAdjToAWW = For PTD, if true and AWW is less than Min then set Min to AWW
cc_WCBenefitParameterSet.PTDPercentOfWages = The percentage of wages paid for Permanent Total Disability  (e.g. 80%)
cc_WCBenefitParameterSet.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_WCBenefitParameterSet.RateComments = Additional comments.
cc_WCBenefitParameterSet.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_WCBenefitParameterSet.RetroactivePeriod = The number of days at which the injured worker reimbursed for the Waiting Period presuming worker is still unable to work.
cc_WCBenefitParameterSet.StartDate = PD Benefit Effective Date
cc_WCBenefitParameterSet.TPDMax = Max State TPD limit
cc_WCBenefitParameterSet.TPDMin = MinState TPD limit 
cc_WCBenefitParameterSet.TPDMinAdjToAWW = For TPD, if true and AWW is less than Min then set Min to AWW
cc_WCBenefitParameterSet.TPDPercentOfWages = The percentage of wages paid for Temporary Partial Disability (e.g. 80%)
cc_WCBenefitParameterSet.TTDMax = Max State TTD limit
cc_WCBenefitParameterSet.TTDMin = Min State TTD limit 
cc_WCBenefitParameterSet.TTDMinAdjToAWW = For TTD, if true and AWW is less than Min then set Min to AWW
cc_WCBenefitParameterSet.TTDPercentOfWages = The percentage of wages paid for Temporary Total Disability (e.g. 80%)
cc_WCBenefitParameterSet.UpdateTime = Timestamp when the object was last updated
cc_WCBenefitParameterSet.UpdateUser = User who last updated the object
cc_WCBenefitParameterSet.WaitingPeriodDays = Number of days injured worker required to wait before benefits are paid.
cc_WCBenefitParameterSet.WPNotAppliedToPPD = If true, Waiting Period is not applied for PPD
cc_WCBenefitParameterSet.WPNotAppliedToPTD = If true, Waiting Period is not applied for PTD
cc_WCBenefitParameterSet.WCBenefitFactors = Used to track comments, notes, special exceptions, etc

cc_wcdenialperiod = This reference table contains the information necessary to determine the jurisdictional deadline to accept or
        deny a claim.  Each claim based upon the LossDate and the JurisdictionState should have at most one
        corresponding record in this table.
    

cc_wcdenialperiod.ID = Internally managed primary key
cc_wcdenialperiod.AcceptDocumentTemplate = The id of an associated document template. The id gets passed to IDocumentTemplateSource to retrieve the DocumentTemplateDescriptor.
cc_wcdenialperiod.BenefitPaymentAcceptance = Payment of indemnity benefits implies acceptance of claim
cc_wcdenialperiod.CreateTime = Timestamp when the object was created
cc_wcdenialperiod.CreateUser = User who created the object
cc_wcdenialperiod.DueDateFormula = Which formula including which days to include in calculating the TargetDate.
cc_wcdenialperiod.EffectiveDate = Effective Date
cc_wcdenialperiod.ExpiryDate = End or Expiration Date
cc_wcdenialperiod.JurisdictionState = Jurisdiction State. The Jurisdiction must be associated with JurisdictionType.TC_INSURANCE.
cc_wcdenialperiod.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_wcdenialperiod.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_wcdenialperiod.RejectDocumentTemplate = The id of an associated document template. The id gets passed to IDocumentTemplateSource to retrieve the DocumentTemplateDescriptor.
cc_wcdenialperiod.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_wcdenialperiod.TargetDaysFromLoss = If Date of Loss is a factor per DueDateFormula, used in conjunction with TargetIncludedDays to calculate the DueDate of the activity.
cc_wcdenialperiod.TargetDaysFromNotice = If Date of Notice is a factor per DueDateFormula, used in conjunction with TargetIncludedDays to calculate the DueDate of the activity.
cc_wcdenialperiod.TargetIncludeDays = Which days to include in calculating the TargetDate.
cc_wcdenialperiod.UpdateTime = Timestamp when the object was last updated
cc_wcdenialperiod.UpdateUser = User who last updated the object

cc_wcwaitingperiod = 
        For WC Claims, this array captures the days comprising the waiting period on the claim including whether the
        days withheld have been repaid.
      
    

cc_wcwaitingperiod.ID = Internally managed primary key
cc_wcwaitingperiod.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_wcwaitingperiod.ClaimWorkComp = Claim this diagnosis is related to
cc_wcwaitingperiod.Comments = Comments
cc_wcwaitingperiod.CreateTime = Timestamp when the object was created
cc_wcwaitingperiod.CreateUser = User who created the object
cc_wcwaitingperiod.DateEnded = The date this portion of the Waiting Period was ended
cc_wcwaitingperiod.DateStarted = The date this portion of the Waiting Period was started
cc_wcwaitingperiod.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_wcwaitingperiod.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_wcwaitingperiod.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_wcwaitingperiod.UpdateTime = Timestamp when the object was last updated
cc_wcwaitingperiod.UpdateUser = User who last updated the object
cc_wcwaitingperiod.WaitingDaysApplied = Number of days applied to Waiting Period
cc_wcwaitingperiod.WaitingDaysRepaid = Number of days Waiting Days retroactiviey paid

cc_workitemset = Describes a set of Work Items

cc_workitemset.ID = Internally managed primary key
cc_workitemset.EndTime = timestamp when the last WorkItem finished processing
cc_workitemset.NumOpsCanceled = Number of operations that were not processed because the user canceled the WorkItemSet
cc_workitemset.NumOpsCompleted = Number of operations completed (successfully or otherwise)
cc_workitemset.NumOpsFailed = Number of operations that have failed
cc_workitemset.NumTotalOps = Total number of operations (WorkItems) that make up this WorkItemSet
cc_workitemset.ProcessHistory = Reference to the ProcessHistory instance of the batch process that generated this WorkItemSet
cc_workitemset.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_workitemset.StartTime = timestamp when we started processing the WorkItemSet
cc_workitemset.State = The state of this WorkItemSet
cc_workitemset.WorkItemSetType = The type of WorkItemSet

cc_workqueuestate = State of a Work Queue

cc_workqueuestate.ID = Internally managed primary key
cc_workqueuestate.Active = This Work Queue is active
cc_workqueuestate.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_workqueuestate.UpdateTime = Update time
cc_workqueuestate.WorkQueueID = The related writer batch process, identifying this queue.

cc_workqueueworkercontrol = Input/Extract pointers to work-items.

cc_workqueueworkercontrol.ID = Internally managed primary key
cc_workqueueworkercontrol.LastExecutionTime = 
cc_workqueueworkercontrol.LockName = 
cc_workqueueworkercontrol.PublicID = ID or primary key of the row in the external system to which this row is mapped

cc_workstatus = Denotes changes in the employee's work capacity.

cc_workstatus.ID = Internally managed primary key
cc_workstatus.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_workstatus.Comments = Additional comments.
cc_workstatus.CreateTime = Timestamp when the object was created
cc_workstatus.CreateUser = User who created the object
cc_workstatus.EmploymentData = The related employee.
cc_workstatus.LastWorkedDate = The date the employee last worked. Utilized if WorkCapacity == Off-work
cc_workstatus.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_workstatus.NumDaysWorked = Number of days worked per week.
cc_workstatus.NumHoursWorked = Number of hours worked per week during this period
cc_workstatus.PaidFullForLastWorked = Indicates if the employee was paid in full for the Last day worked. Utilized if WorkCapacity == Off-work
cc_workstatus.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_workstatus.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_workstatus.Status = Work capacity status for the employee.
cc_workstatus.StatusDate = Date when status changed to this entity's WorkCapacity.
cc_workstatus.StatusEndDate = Last day at this WorkCapacity status. Null indicates current status.
cc_workstatus.UpdateTime = Timestamp when the object was last updated
cc_workstatus.UpdateUser = User who last updated the object
cc_workstatus.WageAmountPostInjury = Amount of wages per week post-injury.

cc_workflow = Table for workflow definitions

cc_workflow.ID = Internally managed primary key
cc_workflow.ActiveState = Specific state of this workflow if active (e.g. running, waitmanual, waitactivity).
cc_workflow.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_workflow.CreateTime = Timestamp when the object was created
cc_workflow.CreateUser = User who created the object
cc_workflow.CurrentAction = What action is the Workflow currently trying to take?
cc_workflow.CurrentBranch = ID of the branch the workflow is currently trying to execute.
cc_workflow.CurrentStep = ID of the workflow's current step.
cc_workflow.EnteredStep = Time when the Workflow entered the current step
cc_workflow.ForceTimeoutBranch = ID of the next workflow timeout branch to take.
cc_workflow.Handler = What infrastructure handles this Workflow?
cc_workflow.LogEntryCounter = Counter for assigning a sort order to log entries
cc_workflow.Message = Integration message associated with this workflow
cc_workflow.MessageHistoryID = Completed integration message associated with this workflow
cc_workflow.PreviousStep = ID of the step the workflow was on BEFORE the current step.
cc_workflow.ProcessVersion = Version of the workflow process used, if this uses an internal workflow
cc_workflow.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_workflow.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_workflow.State = State of this workflow (e.g., 'started', 'completed', etc.)
cc_workflow.StepExecTime = Total system time spent actively processing the current step, in millis.  Does not include time spent waiting on triggers, activities, or timeouts
cc_workflow.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_workflow.TestTime = What time the Workflow thinks it is
cc_workflow.TimeoutTime = Date/time when current step will time out.
cc_workflow.TriggerInvoked = Marks the key of a Trigger that was invoked, or null
cc_workflow.UpdateTime = Timestamp when the object was last updated
cc_workflow.UpdateUser = User who last updated the object
cc_workflow.Activities = Active activities on this workflow.
cc_workflow.Log = Log of what work this Workflow has performed
cc_workflow.Claim = The Claim with which this workflow is associated.
cc_workflow.MetroReport = The Metro Report with which this workflow is associated.

cc_workflowlog = Log of what work the Workflows have performed.  Each row is one entry.

cc_workflowlog.ID = Internally managed primary key
cc_workflowlog.ArchivePartition = Unique number to partition the data so that the multiple workers can work independently
cc_workflowlog.Argument = The argument for the display key
cc_workflowlog.DisplayKey = The display key to construct
cc_workflowlog.LogDate = The date when this entry was logged
cc_workflowlog.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_workflowlog.SortOrder = Number of times this workflow has been polled.
cc_workflowlog.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_workflowlog.Workflow = The Workflow this log entry is for
cc_workflowlog.Action = The current action
cc_workflowlog.StepId = The current step of the id
cc_workflowlog.Description = Optional detailed description (may include stack trace)
cc_workflowlog.Summary = Short description
cc_workflowlog.user = The user how invoked the action.

cc_workflowstepstats = Workflow elapsed and execution time statistics aggregated by workflow step.  Elapsed time is the total time spent from step entry to completion.  Execution time is time spent on processing, excluding time spent waiting on triggers, activities, or timeouts.

cc_workflowstepstats.ID = Internally managed primary key
cc_workflowstepstats.ElapsedTimeMax = Maximum elapsed time spent processing any occurrence of this step, in millis.
cc_workflowstepstats.ElapsedTimeMean = Average elapsed time spent processing occurrences of this step, in millis.
cc_workflowstepstats.ElapsedTimeMin = Minimum elapsed time spent processing any occurrence of this step, in millis.
cc_workflowstepstats.ElapsedTimeStdDev = Standard deviation of elapsed time spent processing occurrences of this step, in millis.
cc_workflowstepstats.EndTime = End of the statistics aggregation period.  Statistics were computed from steps completing on or before this time.
cc_workflowstepstats.execTimeMax = Maximum system time spent actively processing any occurrence of this step, in millis.
cc_workflowstepstats.ExecTimeMean = Average system time spent actively processing occurrences of this step, in millis.
cc_workflowstepstats.ExecTimeMin = Minimum system time spent actively processing any occurrence of this step, in millis.
cc_workflowstepstats.ExecTimeStdDev = Standard deviation of system time spent actively processing occurrences of this step, in millis.
cc_workflowstepstats.Executions = Total number of steps that completed within the aggregation period.
cc_workflowstepstats.ProcessVersion = Version of the workflow process used, if this uses an internal workflow
cc_workflowstepstats.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_workflowstepstats.ServerID = The app server ID.
cc_workflowstepstats.StartTime = Start of the statistics aggregation period.  Statistics were computed from steps completing after this time.
cc_workflowstepstats.StepName = ID of the workflow step.
cc_workflowstepstats.WorkflowType = Type of the workflow.

cc_workflowworkitem = Queue of workflows to be advanced.

cc_workflowworkitem.ID = Internally managed primary key
cc_workflowworkitem.Attempts = 
cc_workflowworkitem.AvailableSince = The time after which the work item can be tried. Must be null on failed work items
cc_workflowworkitem.CheckedOutBy = 
cc_workflowworkitem.CreationTime = 
cc_workflowworkitem.Exception = Stack trace of the exception
cc_workflowworkitem.LastUpdateTime = 
cc_workflowworkitem.Priority = 
cc_workflowworkitem.ProcessHistoryID = The writer batch job that created this workitem (ProcessHistory).
cc_workflowworkitem.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_workflowworkitem.Status = Status of this workitem.
cc_workflowworkitem.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_workflowworkitem.Workflow = The Workflow to be advanced.

cc_workloadclassification = Weighted Workload Classification

cc_workloadclassification.ID = Internally managed primary key
cc_workloadclassification.Active = True if this rule is active.
cc_workloadclassification.ClaimLOBCode = Line of Business code; typically related to the policy.
cc_workloadclassification.ClaimLossType = Loss Type of Claim
cc_workloadclassification.ClaimPolicyType = Type of Policy
cc_workloadclassification.CreateTime = Timestamp when the object was created
cc_workloadclassification.CreateUser = User who created the object
cc_workloadclassification.Description = Description
cc_workloadclassification.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_workloadclassification.Name = Name
cc_workloadclassification.Priority = 
cc_workloadclassification.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_workloadclassification.Subtype = Identifies a particular subtype within a supertype table; each subtype of a supertype has its own unique subtype value
cc_workloadclassification.UpdateTime = Timestamp when the object was last updated
cc_workloadclassification.UpdateUser = User who last updated the object
cc_workloadclassification.Weight = Weight that matching assignables will be given
cc_workloadclassification.Conditions = Filtering criteria associated with this classification
cc_workloadclassification.Description_L10N_ARRAY = 
cc_workloadclassification.Name_L10N_ARRAY = 

cc_wclass_desc_l10n = null

cc_wclass_desc_l10n.ID = Internally managed primary key
cc_wclass_desc_l10n.Language = 
cc_wclass_desc_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_wclass_desc_l10n.Owner = 
cc_wclass_desc_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_wclass_desc_l10n.Value = 

cc_wclass_name_l10n = null

cc_wclass_name_l10n.ID = Internally managed primary key
cc_wclass_name_l10n.Language = 
cc_wclass_name_l10n.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_wclass_name_l10n.Owner = 
cc_wclass_name_l10n.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_wclass_name_l10n.Value = 

cc_zone = Geographic zone.

cc_zone.ID = Internally managed primary key
cc_zone.Code = The code for this zone, this is the value that should be used for lookups.
cc_zone.CodeDenorm = denorm field for The code for this zone, this is the value that should be used for lookups.
cc_zone.Country = The country to which the zone belongs.
cc_zone.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_zone.Name = The name of the zone, this is the value used to populate fields.
cc_zone.NameDenorm = denorm field for The name of the zone, this is the value used to populate fields.
cc_zone.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_zone.ZoneType = Type of zone.
cc_zone.ForwardLinkedZones = Zones that are forward linked to this zone.
cc_zone.ReverseLinkedZones = Zones that are reverse linked to this zone.

cc_zone_link = Links 2 zones.

cc_zone_link.ID = Internally managed primary key
cc_zone_link.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_zone_link.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_zone_link.Zone1 = Zone 1.
cc_zone_link.Zone2 = Zone 2.

cc_ref_WC_PD_WeeksAndLimits = 
      Reference table tracking state-specific permanent disability weeks to be paid by
      PD percentages for particular date ranges.
    

cc_ref_WC_PD_WeeksAndLimits.ID = Internally managed primary key
cc_ref_WC_PD_WeeksAndLimits.CreateTime = Timestamp when the object was created
cc_ref_WC_PD_WeeksAndLimits.CreateUser = User who created the object
cc_ref_WC_PD_WeeksAndLimits.DisabilityPercent = PD Disability Percentage
cc_ref_WC_PD_WeeksAndLimits.JurisdictionState = Jurisdiction State. The Jurisdiction must be associated with JurisdictionType.TC_INSURANCE.
cc_ref_WC_PD_WeeksAndLimits.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_ref_WC_PD_WeeksAndLimits.PD_BenefitEndDate = PD Benefit Expiration Date
cc_ref_WC_PD_WeeksAndLimits.PD_BenefitStartDate = PD Benefit Effective Date
cc_ref_WC_PD_WeeksAndLimits.PD_NumWeeks = Number of weeks of PD Benefit to be paid
cc_ref_WC_PD_WeeksAndLimits.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_ref_WC_PD_WeeksAndLimits.RateComments = Additional comments.
cc_ref_WC_PD_WeeksAndLimits.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_ref_WC_PD_WeeksAndLimits.UpdateTime = Timestamp when the object was last updated
cc_ref_WC_PD_WeeksAndLimits.UpdateUser = User who last updated the object

cc_ref_WC_PD_benefits = 
      Reference table tracking state-specific permanent disability minimum and maximum
      monetary benefits by PD percent ranges for particular date ranges.
    

cc_ref_WC_PD_benefits.ID = Internally managed primary key
cc_ref_WC_PD_benefits.CreateTime = Timestamp when the object was created
cc_ref_WC_PD_benefits.CreateUser = User who created the object
cc_ref_WC_PD_benefits.JurisdictionState = Jurisdiction State. The Jurisdiction must be associated with JurisdictionType.TC_INSURANCE.
cc_ref_WC_PD_benefits.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_ref_WC_PD_benefits.Max_DisabilityPercent = Maximum PD Disability Percentage
cc_ref_WC_PD_benefits.Min_DisabilityPercent = Minimum PD Disability Percentage
cc_ref_WC_PD_benefits.PD_BenefitEndDate = PD Benefit Expiration Date
cc_ref_WC_PD_benefits.PD_BenefitStartDate = PD Benefit Effective Date
cc_ref_WC_PD_benefits.PD_MaxBenefit = State PD Benefit Maximum
cc_ref_WC_PD_benefits.PD_MinBenefit = State PD Benefit Minimum
cc_ref_WC_PD_benefits.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_ref_WC_PD_benefits.RateComments = Additional comments.
cc_ref_WC_PD_benefits.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_ref_WC_PD_benefits.UpdateTime = Timestamp when the object was last updated
cc_ref_WC_PD_benefits.UpdateUser = User who last updated the object

cc_ref_WC_TD = 
      Reference table tracking state-specific disability minimum and maximum
      monetary benefits for particular date ranges.
    

cc_ref_WC_TD.ID = Internally managed primary key
cc_ref_WC_TD.CreateTime = Timestamp when the object was created
cc_ref_WC_TD.CreateUser = User who created the object
cc_ref_WC_TD.JurisdictionState = Jurisdiction State
cc_ref_WC_TD.LoadCommandID = LoadCommand for load where row was created. If not null this object was loaded via the loader.
cc_ref_WC_TD.PublicID = ID or primary key of the row in the external system to which this row is mapped
cc_ref_WC_TD.RateComments = Additional comments.
cc_ref_WC_TD.RetiredValue = Whether the entity is still in use. A value of 0 means that the entity is not retired. If the entity is retired from active use, this field has a non-zero value equal to the entity's ID. Once an entity is retired, it should not be unretired.
cc_ref_WC_TD.TD_BenefitEndDate = PD Benefit Expiration Date
cc_ref_WC_TD.TD_BenefitStartDate = PD Benefit Effective Date
cc_ref_WC_TD.TD_Max = Max State TD limit
cc_ref_WC_TD.TD_Min = MinState TD limit 
cc_ref_WC_TD.TTDMinAdjToAWW = If true and AWW is less than Min then set Min to AWW
cc_ref_WC_TD.TTDPercentOfWages = The percentage of wages paid for TTD (e.g. 80%)
cc_ref_WC_TD.UpdateTime = Timestamp when the object was last updated
cc_ref_WC_TD.UpdateUser = User who last updated the object
